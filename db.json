{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/git_multiaccount_config.png","path":"images/git_multiaccount_config.png","modified":0,"renderable":0},{"_id":"source/images/git_multiaccount_connect_github.png","path":"images/git_multiaccount_connect_github.png","modified":0,"renderable":0},{"_id":"source/images/git_multiaccount_connect_osc.png","path":"images/git_multiaccount_connect_osc.png","modified":0,"renderable":0},{"_id":"source/images/git_multiaccount_pub_github.png","path":"images/git_multiaccount_pub_github.png","modified":0,"renderable":0},{"_id":"source/images/git_multiaccount_ssh_file.png","path":"images/git_multiaccount_ssh_file.png","modified":0,"renderable":0},{"_id":"source/images/git_multiaccount_pub_osc.png","path":"images/git_multiaccount_pub_osc.png","modified":0,"renderable":0},{"_id":"source/images/git_multiaccount_ssh_github.jpg","path":"images/git_multiaccount_ssh_github.jpg","modified":0,"renderable":0},{"_id":"source/images/git_multiaccount_ssh_osc.jpg","path":"images/git_multiaccount_ssh_osc.jpg","modified":0,"renderable":0},{"_id":"source/images/markdownpad2.png","path":"images/markdownpad2.png","modified":0,"renderable":0},{"_id":"source/images/process_concurrent_finite_buffer.png","path":"images/process_concurrent_finite_buffer.png","modified":0,"renderable":0},{"_id":"source/images/diff_between_includeCommand_includeAction.PNG","path":"images/diff_between_includeCommand_includeAction.PNG","modified":0,"renderable":0},{"_id":"source/images/jsp_life_cycle.png","path":"images/jsp_life_cycle.png","modified":0,"renderable":0},{"_id":"source/images/redirectAndTransmit.PNG","path":"images/redirectAndTransmit.PNG","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/20180223220057.png","path":"images/20180223220057.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2018要学的知识.md","hash":"18b241f1ec3e0a00744efaad7f1423577b844903","modified":1532341832825},{"_id":"source/_posts/IntelliJ-IDEA-使用技巧.md","hash":"6ee6231b1999ad787e6bfde2443f1d02f68a27cf","modified":1532341832825},{"_id":"source/_posts/JSP学习笔记.md","hash":"489cc24c87bfab36f89d8c1b716e01b858cdfe1e","modified":1532341832825},{"_id":"source/_posts/Java-Socket应用.md","hash":"58df493f9510ee5db899913b6b11bdb54379ad73","modified":1532341832829},{"_id":"source/_posts/Java中的XML.md","hash":"369bbade2524646f8c9607b9b507d11f9d6844dc","modified":1532341832829},{"_id":"source/_posts/centos7-Let-s-Encrypt用Certbot获取Https证书-部署nginx.md","hash":"afb2ea51ce0938f249611223c3a9fb325d9dd497","modified":1532341832829},{"_id":"source/_posts/git分支管理.md","hash":"107d76847bf6e2cc322a1aa5261b671f75f96e85","modified":1532341832829},{"_id":"source/_posts/git多账号配置，同时使用多个代码托管平台.md","hash":"4d9850a747073a6ccbf84a31e8b6c8fec320fbce","modified":1532341832829},{"_id":"source/_posts/java-io流与文件.md","hash":"fd8c80d8c6521b5f91455d9a4e3034c9dcf6b812","modified":1532341832829},{"_id":"source/_posts/java-multithead-note.md","hash":"8d47efe724a70e9abc2e4d4c7e214a4d911b4c40","modified":1532341832829},{"_id":"source/_posts/java反射.md","hash":"a80b36fcf8efdfd98b4c5aa12c47266d96ae8cd3","modified":1532341832829},{"_id":"source/_posts/java异常学习笔记.md","hash":"8accfc73b88d9c4c566a6a1588a98568548f6ed6","modified":1532341832829},{"_id":"source/_posts/java注解.md","hash":"e6eaa14a2d6467858ec3e0c4e3f2c87399abd115","modified":1532341832829},{"_id":"source/_posts/java集合框架.md","hash":"257d34e89b318f0f2bffa4d8474ee2e64e206872","modified":1532341832829},{"_id":"source/_posts/jsoup要点记录.md","hash":"c8828aeb84f2f1a4ac40bdacce4a426bfea2514c","modified":1532341832829},{"_id":"source/_posts/markdownpad2-无法预览-显示This-view-has-crashed.md","hash":"6460914d8ec32ef9c6e380460a66f641abef64e0","modified":1532341832829},{"_id":"source/_posts/nginx-配置实现端口转发.md","hash":"1c19422d55ec10b945a74075446f80167bc121ee","modified":1532341832829},{"_id":"source/_posts/test.md","hash":"773855cabe399e5714128baff8e573214106fb40","modified":1532342356820},{"_id":"source/_posts/vim的使用.md","hash":"109fb5d325676dfce7cbd8bd9d16ed38cc485bc9","modified":1532341832829},{"_id":"source/_posts/进程并发常见问题基于信号量解决方法总结：生产者消费者问题、读写者问题、银行家算法、哲学家进餐.md","hash":"b4ad280669acc33f04570f347aeaac3307b5bbf2","modified":1532341832829},{"_id":"source/archives/index.md","hash":"e07726b13cb858f0d979f1da08cee4927e55d63f","modified":1532341832829},{"_id":"source/categories/index.md","hash":"9cfe8d4f3aff77de521dbf318bdbab59445ee537","modified":1532341832829},{"_id":"source/tags/index.md","hash":"f8e35eaf7e71dbe226de4cec2392567709c67d11","modified":1532341832833},{"_id":"source/images/git_multiaccount_config.png","hash":"b40be9d9dfa3e3b2df554f395a9d80ca75497285","modified":1532341832829},{"_id":"source/images/git_multiaccount_connect_github.png","hash":"4c405a77309aa6b578c9fb3039151b95a0f455f8","modified":1532341832829},{"_id":"source/images/git_multiaccount_connect_osc.png","hash":"496278ad1e3cf95e31b5cacb054171c870aa796a","modified":1532341832829},{"_id":"source/images/git_multiaccount_pub_github.png","hash":"26e1c350b93edd773e3530ac74209f4ccc1355fd","modified":1532341832829},{"_id":"source/images/git_multiaccount_ssh_file.png","hash":"5905566a116c6146fff368a079874694d89cc392","modified":1532341832833},{"_id":"source/images/git_multiaccount_pub_osc.png","hash":"0d94b413269fd3e868b7e515a169586f1fa03384","modified":1532341832829},{"_id":"source/images/git_multiaccount_ssh_github.jpg","hash":"fab9289abda553c1e9699afc010139d6f9991379","modified":1532341832833},{"_id":"source/images/git_multiaccount_ssh_osc.jpg","hash":"b1dc1acaf0675a47944e635c260b9794c86e959b","modified":1532341832833},{"_id":"source/images/markdownpad2.png","hash":"bb926b53eb2991743d47ca56b3c919b27752d779","modified":1532341832833},{"_id":"source/images/process_concurrent_finite_buffer.png","hash":"0b66e4b263d59c6f3bda92d00d35e8bca215bc8c","modified":1532341832833},{"_id":"source/images/diff_between_includeCommand_includeAction.PNG","hash":"274efbafe356c3a03ca84bc577048348d936721b","modified":1532341832829},{"_id":"source/images/jsp_life_cycle.png","hash":"6f0f4c95ef25646d3778bcfe1da94a1599f1172b","modified":1532341832833},{"_id":"source/images/redirectAndTransmit.PNG","hash":"dcf82f3672e71c4f4685a20a855d3e22a1fd9898","modified":1532341832833},{"_id":"public/atom.xml","hash":"f1486286bdab4ad64e0af2ec099d7d53437b8254","modified":1532342895097},{"_id":"public/search.xml","hash":"3edc1ddc17a0ded6d9f0b0dc42066b024fbc85be","modified":1532342895097},{"_id":"public/sitemap.xml","hash":"1084776a70bf560ae25f6ec2d68ea6bcb488091f","modified":1532342895098},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895104},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895104},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895104},{"_id":"public/2018/07/23/test/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895104},{"_id":"public/2018/07/23/java注解/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/07/22/java反射/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/07/21/Java-Socket应用/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/07/20/Java中的XML/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/07/19/java-io流与文件/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/07/15/centos7-Let-s-Encrypt用Certbot获取Https证书-部署nginx/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/07/11/java集合框架/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/07/10/java异常学习笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/05/03/JSP学习笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/04/30/vim的使用/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/04/30/IntelliJ-IDEA-使用技巧/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/04/16/进程并发常见问题基于信号量解决方法总结：生产者消费者问题、读写者问题、银行家算法、哲学家进餐/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/04/09/git多账号配置，同时使用多个代码托管平台/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/04/04/nginx-配置实现端口转发/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895105},{"_id":"public/2018/03/16/java-multithead-note/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/2018/03/16/jsoup要点记录/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/2018/03/11/git分支管理/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/2018/03/10/markdownpad2-无法预览-显示This-view-has-crashed/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/2018/03/08/2018要学的知识/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/archives/2018/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/archives/2018/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/archives/2018/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/archives/2018/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/archives/2018/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/archives/2018/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/categories/计划/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/categories/JSP笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/categories/javase笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895106},{"_id":"public/categories/服务器/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/categories/git/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/categories/编辑器/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/categories/Jsoup笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/categories/踩过的坑/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/categories/计算机基础/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/tags/计划/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/tags/JSP/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/tags/JavaWeb/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/tags/javase/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/tags/centos/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/tags/nginx/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895108},{"_id":"public/tags/git/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895109},{"_id":"public/tags/IDEA/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895109},{"_id":"public/tags/java爬虫/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895109},{"_id":"public/tags/Jsoup/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895109},{"_id":"public/tags/markdownPad/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895109},{"_id":"public/tags/vim/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895109},{"_id":"public/tags/OS/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895109},{"_id":"public/tags/计算机基础/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532342895109},{"_id":"public/images/git_multiaccount_config.png","hash":"b40be9d9dfa3e3b2df554f395a9d80ca75497285","modified":1532342895114},{"_id":"public/images/git_multiaccount_connect_github.png","hash":"4c405a77309aa6b578c9fb3039151b95a0f455f8","modified":1532342895114},{"_id":"public/images/git_multiaccount_connect_osc.png","hash":"496278ad1e3cf95e31b5cacb054171c870aa796a","modified":1532342895114},{"_id":"public/images/git_multiaccount_pub_github.png","hash":"26e1c350b93edd773e3530ac74209f4ccc1355fd","modified":1532342895114},{"_id":"public/images/git_multiaccount_ssh_file.png","hash":"5905566a116c6146fff368a079874694d89cc392","modified":1532342895114},{"_id":"public/images/git_multiaccount_pub_osc.png","hash":"0d94b413269fd3e868b7e515a169586f1fa03384","modified":1532342895115},{"_id":"public/images/git_multiaccount_ssh_github.jpg","hash":"fab9289abda553c1e9699afc010139d6f9991379","modified":1532342895115},{"_id":"public/images/git_multiaccount_ssh_osc.jpg","hash":"b1dc1acaf0675a47944e635c260b9794c86e959b","modified":1532342895115},{"_id":"public/images/markdownpad2.png","hash":"bb926b53eb2991743d47ca56b3c919b27752d779","modified":1532342895115},{"_id":"public/images/process_concurrent_finite_buffer.png","hash":"0b66e4b263d59c6f3bda92d00d35e8bca215bc8c","modified":1532342895116},{"_id":"public/images/diff_between_includeCommand_includeAction.PNG","hash":"274efbafe356c3a03ca84bc577048348d936721b","modified":1532342895121},{"_id":"public/images/jsp_life_cycle.png","hash":"6f0f4c95ef25646d3778bcfe1da94a1599f1172b","modified":1532342895121},{"_id":"public/images/redirectAndTransmit.PNG","hash":"dcf82f3672e71c4f4685a20a855d3e22a1fd9898","modified":1532342895121},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1532344130917},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1532344130917},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1532344130917},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1532344130917},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1532344130917},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1532344130917},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1532344130917},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1532344130921},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1532344130921},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1532344130921},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1532344130921},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1532344130921},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1532344130921},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1532344130921},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1532344130921},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1532344130921},{"_id":"themes/next/layout/_layout.swig","hash":"2629d53fd94bb09fe65d8dfc7314654091e9af85","modified":1532344130949},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1532344130921},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1532344130921},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1532344130921},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1532344130921},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1532344130921},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1532344130921},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1532344130921},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1532344130997},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1532344130997},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532344130949},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532344130949},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1532344130949},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1532344130949},{"_id":"themes/next/layout/_macro/post.swig","hash":"afbe5342c51e1f40a5c1f8a0f6a1529dab7f1a9c","modified":1532344130957},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1532344130957},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1532344130957},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1532344130957},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1532344130961},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1532344130961},{"_id":"themes/next/layout/_partials/head.swig","hash":"04b43fef55abd361eda7dbc67031a7cd9c954d0b","modified":1532344130969},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1532344130969},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1532344130969},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1532344130969},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1532344130969},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1532344130985},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1532344130985},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1532344130985},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1532344130985},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1532344130989},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1532344130989},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1532344130989},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1532344130989},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1532344130989},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1532344130989},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1532344130997},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1532344130997},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1532344130997},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1532344130997},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1532344130997},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1532344130997},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1532344130997},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1532344130997},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1532344130997},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532344130985},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1532344130969},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1532344130969},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1532344130969},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1532344130969},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1532344130969},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1532344130973},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1532344130973},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1532344130973},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532344130985},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1532344130985},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"710e51bad85ac8ed39cd3d2960936bc23f7c279e","modified":1532344130985},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1532344130985},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1532344130985},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1532344130989},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1532344130989},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1532344130993},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1532344130989},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1532344130993},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1532344130993},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1532344130993},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1532344130993},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1532344130993},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1532344130993},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1532344130993},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1532344130993},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1532344130993},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1532344130993},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1532344130993},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1532344130993},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1532344130993},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532344131093},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1532344130997},{"_id":"themes/next/source/images/20180223220057.png","hash":"5cff05ddc220dfa1dd1184b27fdf3a33d080266c","modified":1532344131105},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1532344131105},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1532344131105},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1532344131105},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1532344131105},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1532344131105},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1532344131105},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1532344131105},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1532344131105},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1532344131105},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1532344131105},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1532344131105},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1532344131105},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532344131105},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1532344131105},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532344131105},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1532344131105},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1532344131105},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1532344131109},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532344131053},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532344131053},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532344131053},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532344131089},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532344131089},{"_id":"themes/next/source/images/avatar.jpeg","hash":"7aaee8d8dfe03395e53e70f955f0d50e3eae5bd6","modified":1532344131121},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"e86199fefbbee56c3370618908efeacd52530e5d","modified":1532344131053},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1532344131053},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1532344131053},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1532344131053},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1532344131089},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1532344131089},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1532344131089},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a82bbe643f8c89a4fb123b538d164e5e4b5f2719","modified":1532344131089},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1532344131121},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1532344131121},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1532344131121},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1532344131121},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1532344131125},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1532344131125},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1532344131125},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1532344131125},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1532344131125},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1532344131125},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1532344131125},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1532344131125},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1532344131129},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1532344131129},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1532344131129},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1532344131129},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1532344131137},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1532344131137},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1532344131137},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1532344131137},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1532344131137},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1532344131137},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1532344131137},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1532344131137},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1532344131137},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1532344131149},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1532344131149},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1532344131149},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1532344131149},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1532344131149},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1532344131149},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1532344131149},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1532344131153},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1532344131153},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1532344131153},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1532344131157},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1532344131157},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1532344131157},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1532344131157},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1532344131157},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1532344131157},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1532344131157},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1532344131161},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1532344131161},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1532344131161},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1532344131161},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1532344131161},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1532344131157},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1532344131149},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1532344131005},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1532344131005},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1532344131005},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1532344131005},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1532344131005},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1532344131009},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1532344131009},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1532344131049},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1532344131049},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1532344131049},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1532344131053},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1532344131053},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1532344131053},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1532344131053},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1532344131057},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1532344131057},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1532344131057},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1532344131057},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1532344131057},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1532344131061},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1532344131061},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1532344131057},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1532344131061},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1532344131061},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1532344131065},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1532344131065},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1532344131061},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"79ac0e9b218600443bf26182703fa05a7f4fc280","modified":1532344131065},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b0ea8a2d0dc5127f7bb06f29e730ffa718900ff5","modified":1532344131089},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1532344131089},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1532344131089},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1532344131089},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1532344131065},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1532344131125},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1532344131145},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1532344131145},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1532344131145},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1532344131129},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1532344131129},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1532344131129},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1532344131129},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1532344131129},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1532344131133},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1532344131133},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1532344131133},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1532344131133},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1532344131137},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1532344131137},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1532344131141},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1532344131141},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1532344131141},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1532344131157},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1532344131157},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1532344131145},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1532344131145},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1532344131145},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1532344131161},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1532344131009},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1532344131009},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1532344131009},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1532344131009},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1532344131009},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1532344131009},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1532344131009},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1532344131009},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1532344131013},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1532344131017},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"d90dc6338cd74a9372b98be458b8c11fff4958d4","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"4a08231190f774eccdc7519e346e51cf9ae844fa","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1532344131041},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1532344131045},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1532344131049},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1532344131049},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1532344131049},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1532344131049},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1532344131049},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1532344131049},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1532344131049},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1532344131049},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1532344131061},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532344131061},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532344131065},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1532344131145},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1532344131149},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1532344131149},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1532344131149},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1532344131149},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1532344131133},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1532344131133},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1532344131133},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1532344131133},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1532344131133},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1532344131133},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1532344131145},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1532344131141},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1532344131141},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1532344131129},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1532344131157},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1532344131141}],"Category":[{"name":"计划","_id":"cjjy5e8o800048lyjljuvtwf4"},{"name":"JSP笔记","_id":"cjjy5e8od000a8lyjlba2ye2q"},{"name":"javase笔记","_id":"cjjy5e8oh000g8lyjulcr5f5x"},{"name":"服务器","_id":"cjjy5e8op000s8lyjl2ge2hol"},{"name":"git","_id":"cjjy5e8os00108lyjcnl2b7b9"},{"name":"编辑器","_id":"cjjy5e8oy001i8lyjzbpjsj66"},{"name":"Jsoup笔记","_id":"cjjy5e8p0001q8lyjxgr94pti"},{"name":"踩过的坑","_id":"cjjy5e8p2001w8lyjvvar1bwj"},{"name":"计算机基础","_id":"cjjy5e8p300228lyjwc1o7lkv"}],"Data":[],"Page":[{"title":"archives","date":"2018-02-23T14:19:04.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2018-02-23 22:19:04\ntype: \"archives\"\n---\n","updated":"2018-07-23T10:30:32.829Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjjy5e8o500018lyjh9saz8u7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-02-23T14:18:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-23 22:18:47\ntype: \"categories\"\n---\n","updated":"2018-07-23T10:30:32.829Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjjy5e8o700038lyjd5y1urv3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-02-23T14:18:06.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-23 22:18:06\ntype: \"tags\"\n---\n","updated":"2018-07-23T10:30:32.833Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjjy5e8ob00078lyjuh2dreic","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2018要学的知识","date":"2018-03-08T04:29:55.000Z","_content":"\n#### <font color = #1E90FF size = 5 face = \"黑体\">  java </font>\n - **<font size = 4 face = \"宋体\">  《java核心技术》 </font>**\n - **<font size = 4 face = \"宋体\">  《servlet、jsp、spring mvc初学指南》 </font>**\n - **<font size = 4 face = \"宋体\">  《Spring技术内幕》 </font>**\n - **<font size = 4 face = \"宋体\">  《轻量级javaEE》 </font>**\n - **<font size = 4 face = \"宋体\">  《java编程思想》 </font>**\n - **<font size = 4 face = \"宋体\">  《深入理解java虚拟机》 </font>**\n \n#### <font color = #1E90FF size = 5 face = \"黑体\">  前端入门 </font>\n - **<font size = 4 face = \"宋体\">  bootstrap写页面 </font>**\n - **<font size = 4 face = \"宋体\">  jquery </font>**\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  数据库</font>\n - **<font size = 4 face = \"宋体\">  《高性能mysql》</font>**\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  linux</font>\n - **<font size = 4 face = \"宋体\">  《Linux私房菜基础学习》</font>**\n \n#### <font color = #1E90FF size = 5 face = \"黑体\">  专业基础课</font>\n - **<font size = 4 face = \"宋体\">  计算机组成原理 </font>**\n - **<font size = 4 face = \"宋体\">  操作系统 </font>** \n - **<font size = 4 face = \"宋体\">  计算机网络</font>**\n - **<font size = 4 face = \"宋体\">  数据库 </font>**\n - **<font size = 4 face = \"宋体\">  编译原理 </font>**","source":"_posts/2018要学的知识.md","raw":"---\ntitle: 2018要学的知识\ndate: 2018-03-08 12:29:55\ncategories: \"计划\" \ntags:\n    - 计划\n---\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  java </font>\n - **<font size = 4 face = \"宋体\">  《java核心技术》 </font>**\n - **<font size = 4 face = \"宋体\">  《servlet、jsp、spring mvc初学指南》 </font>**\n - **<font size = 4 face = \"宋体\">  《Spring技术内幕》 </font>**\n - **<font size = 4 face = \"宋体\">  《轻量级javaEE》 </font>**\n - **<font size = 4 face = \"宋体\">  《java编程思想》 </font>**\n - **<font size = 4 face = \"宋体\">  《深入理解java虚拟机》 </font>**\n \n#### <font color = #1E90FF size = 5 face = \"黑体\">  前端入门 </font>\n - **<font size = 4 face = \"宋体\">  bootstrap写页面 </font>**\n - **<font size = 4 face = \"宋体\">  jquery </font>**\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  数据库</font>\n - **<font size = 4 face = \"宋体\">  《高性能mysql》</font>**\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  linux</font>\n - **<font size = 4 face = \"宋体\">  《Linux私房菜基础学习》</font>**\n \n#### <font color = #1E90FF size = 5 face = \"黑体\">  专业基础课</font>\n - **<font size = 4 face = \"宋体\">  计算机组成原理 </font>**\n - **<font size = 4 face = \"宋体\">  操作系统 </font>** \n - **<font size = 4 face = \"宋体\">  计算机网络</font>**\n - **<font size = 4 face = \"宋体\">  数据库 </font>**\n - **<font size = 4 face = \"宋体\">  编译原理 </font>**","slug":"2018要学的知识","published":1,"updated":"2018-07-23T10:30:32.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8o100008lyjll9dbc12","content":"<h4 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"  java \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  java </font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  《java核心技术》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《servlet、jsp、spring mvc初学指南》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《Spring技术内幕》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《轻量级javaEE》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《java编程思想》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《深入理解java虚拟机》 </font></strong></li>\n</ul>\n<h4 id=\"前端入门\"><a href=\"#前端入门\" class=\"headerlink\" title=\"  前端入门 \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  前端入门 </font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  bootstrap写页面 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  jquery </font></strong></li>\n</ul>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"  数据库\"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  数据库</font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  《高性能mysql》</font></strong></li>\n</ul>\n<h4 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"  linux\"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  linux</font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  《Linux私房菜基础学习》</font></strong></li>\n</ul>\n<h4 id=\"专业基础课\"><a href=\"#专业基础课\" class=\"headerlink\" title=\"  专业基础课\"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  专业基础课</font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  计算机组成原理 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  操作系统 </font></strong> </li>\n<li><strong><font size=\"4\" face=\"宋体\">  计算机网络</font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  数据库 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  编译原理 </font></strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"  java \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  java </font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  《java核心技术》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《servlet、jsp、spring mvc初学指南》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《Spring技术内幕》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《轻量级javaEE》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《java编程思想》 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  《深入理解java虚拟机》 </font></strong></li>\n</ul>\n<h4 id=\"前端入门\"><a href=\"#前端入门\" class=\"headerlink\" title=\"  前端入门 \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  前端入门 </font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  bootstrap写页面 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  jquery </font></strong></li>\n</ul>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"  数据库\"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  数据库</font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  《高性能mysql》</font></strong></li>\n</ul>\n<h4 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"  linux\"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  linux</font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  《Linux私房菜基础学习》</font></strong></li>\n</ul>\n<h4 id=\"专业基础课\"><a href=\"#专业基础课\" class=\"headerlink\" title=\"  专业基础课\"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  专业基础课</font></h4><ul>\n<li><strong><font size=\"4\" face=\"宋体\">  计算机组成原理 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  操作系统 </font></strong> </li>\n<li><strong><font size=\"4\" face=\"宋体\">  计算机网络</font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  数据库 </font></strong></li>\n<li><strong><font size=\"4\" face=\"宋体\">  编译原理 </font></strong></li>\n</ul>\n"},{"title":"JSP学习笔记","date":"2018-05-03T13:17:47.000Z","_content":"### 一、jsp简介\n\n#### 1、Jsp三大指令\n\n- page指令:<%@page 属性=\"\" %>,位于jsp页面顶端，可以有多个\n\n\n\t```jsp\n\t<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" import=\"java.text.*\"%>\n\n\t```\n\n- taglib指令：标签库\n\n\n- include\n\t> include指令:\n\t\n\t\t<%@include file=\"date.jsp\"%>\n\t> include动作:<jsp:include page=\"url\" flush=\"true|false\"/>\n\t\t\n\t\tpage:要包含的页面\n\n\t\tflush：被包含的页面是否从缓冲区读取\n\n\t**include指令与include动作的区别：**\n![diff_between_includeCommand_includeAction](https://i.imgur.com/YyHsnwD.png)\n\n\n\t- forward动作：<jsp: forward page=\"url\"/>,\n\t\n\t\t等同于：request.getRequestDispatcher(\"/url\").forward(request,response);\n\n\t- param动作：<jsp:param name=\"参数名\" value=\"参数值\">\n\t\n\t\t常与<jsp:forward>一起使用，作为其的子标签:\n\t``` jsp\n\t<jsp:forward page=\"user.jsp\">\n        <%--用<jsp:param \"></jsp:param>添加参数--%>\n        <jsp:param name=\"email\" value=\"11111111@163.com\"></jsp:param>\n   </jsp:forward>\n\t```\n\n#### 2、jsp注释\n- html的注释\n\t<!-- html注释 -->\n- jsp的注释\n <%-- jsp注释 -->（客户端不可见）\n- jsp脚本注释:\n\t\n\t//单行\n\n\t/* */ 多行\n \n#### 3、jsp脚本\n<% java代码 %>\n\n#### 4、jsp声明变量或方法\n<%! java代码 %>\n\n#### 5、jsp表达式\n<%=表达式 %>  ps:不可;分号结束\n\n#### 6、jsp页面的生命周期\n\n![jsp_life_cycle.png](https://i.imgur.com/U27ljB4.png) \n\n\n### 二、jsp内置对象\n** 九大内置对象：**\n>out,\nrequest,\nresponse,\nsession,\napplication,\nPage,\npageContext,\nexception,\nconfig\n\n- out\n\n```html\n\n\t<%\n    \tout.println(\"<h2>静夜思</h2>\");\n    \tout.println(\"床前明月光<br>\");\n    \tout.println(\"疑是地上霜<br>\");\n    \tout.flush();\n   \t\t/*out.clear();会抛出异常*/\n    \tout.clearBuffer();//这里不会抛出异常\n    \tout.println(\"举头望明月<br>\");\n    \tout.println(\"低头思故乡<br>\");\n    %>\n\n    缓冲区大小：<%= out.getBufferSize()%>byte<br>\n    缓冲区剩余大小：<%= out.getRemaining()%>byte<br>\n    是否自动清空缓冲区：<%= out.isAutoFlush()%><br>\n```\n\n- request\n \n```html\n\n\t<%\n        request.setCharacterEncoding(\"utf-8\");//解决post中文乱码问题，但无法解决get，get解决需要直接Tomcat配置文件\n        request.setAttribute(\"password\",\"123456\");//设置属性密码\n    %>\n    用户名：<%= request.getParameter(\"username\")%><br>\n    爱好：\n    <%\n        if(request.getParameterValues(\"favorite\") != null){  //这里需要判断为不为空，jsp这里不能将String数组看为Boolean\n            String[] favorites = request.getParameterValues(\"favorite\");\n            for (int i = 0; i < favorites.length; i++) {\n                out.println(favorites[i] + \"&nbsp;&nbsp;&nbsp;\");\n            }\n        }\n        String realPath = request.getRealPath(\"requset.jsp\");%><br>\n\n    密码：\n    <%=request.getAttribute(\"password\")%><br>\n\n    请求体的MIME类型：\n    <%=request.getContentType()%><br>\n\n    协议类型和版本号：\n    <%=request.getProtocol()%><br>\n\n    服务器主机名：\n    <%=request.getServerName()%><br>\n\n    服务器端口号：\n    <%=request.getServerPort()%><br>\n\n    请求文件长度：\n    <%=request.getContentLength()%><br>\n\n    请求的客户端地址：\n    <%=request.getRemoteAddr()%><<br>\n\n    请求的真实路径：\n    <%=request.getRealPath(\"requset.jsp\")%><br>\n\n    请求的上下文路径：\n    <%=request.getContextPath()%>\n```\n\t\n\n- response\n\n```html\n\n\t<%\n        response.setContentType(\"text/html;charset=utf-8\");\n        out.println(\"<h1>response内置对象</h1>\");\n        out.println(\"<hr>\");\n        //out.flush();\n        /* 因为getWrite获得的输出流对象会先于内置对象out输出，\n        所以要先清空缓冲区，使out强制输出，否则结果会是先输出outer\n        再输出out*/\n\n        PrintWriter outer = response.getWriter();\n        outer.println(\"大家好，我是response生成的输出流outer\");\n\t//  response.sendRedirect(\"login.jsp\");//重定向\n\t//  response.sendRedirect(\"request.jsp\");\n        request.getRequestDispatcher(\"request.jsp\").forward(request,response);//转发\n    %>\n\n```\n\n**请求转发和请求重定向：**\n\n![redirectAndTransmit.PNG](https://i.imgur.com/wWWpmzd.png)\n\n- session\n>     HttpSession的实例，\n>     周期：在第一个jsp页面被加载时自动创建，\n>     即浏览器连接到服务器开始，关闭浏览器离开这个服务器结束，\n>     在服务器的几个页面之间切换，服务器应当知道这是一个客户，\n>     就可以用session对象\n\n```html\n\n\t<%\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年mm月dd日 HH:mm:ss\");\n        Date d = new Date(session.getCreationTime());\n        session.setAttribute(\"username\",\"pinnuli\");\n        session.setAttribute(\"password\",\"123456\");\n        session.setAttribute(\"age\",20);\n\t//  session.setMaxInactiveInterval(10);\n\n\t//设置session最大生成期限，单位秒,也可在web.xml中设置session-timeout\n\n    %>\n    Session创建时间：\n    <%=sdf.format(d)%><br>\n\n    Session的ID：\n    <%=session.getId()%><br>\n\n    Session中获取属性值：\n    <%=session.getAttribute(\"username\")%><br>\n\n    Session保存的属性数组：\n    <%\n        String[] names = session.getValueNames();\n        for(int i=0; i<names.length; i++){\n            out.println(names[i] + \"&nbsp;&nbsp;\");\n        }\n\t//        session.invalidate();//销毁当前会话,每次刷新一次页面就会新建一个session\n    %><br>\n    <%--测试不同页面是否同一个session--%>\n    <a href=\"session_page2.jsp\">跳转到session_page2</a>\n```\n\n- application\n\t\n> 实现用户间数据的共享，可存放全局边变量，相当于java的静态变量\n\n```html\n\n\t<%\n        application.setAttribute(\"city\",\"广州\");\n        application.setAttribute(\"postcode\",\"510000\");\n        application.setAttribute(\"email\",\"guangzhou@163.com\");\n    %>\n    所在城市：<%=application.getAttribute(\"city\")%><br>\n    所有属性：\n    <%\n        Enumeration attributes = application.getAttributeNames();\n        while (attributes.hasMoreElements()){\n            out.println(attributes.nextElement() + \"&nbsp;&nbsp;\");\n        }\n    %><br>\n\n    jsp(serviet)引擎名和版本号：<%=application.getServerInfo()%><br>\n```\n\t\n- page、pageContext\n\n```html\n\t<h3>page:</h3>当前page页面的字符串描述：<%=page.toString()%><br><br>\n\n   <h3>pageContext:</h3>用户名：从session中获取属性-<%=pageContext.getSession().getAttribute(\"username\")%><br>\n\n    <%--跳转到其他页面--%>\n   <%--<%\n       pageContext.forward(\"out.jsp\");\n   %>--%>\n    include方法，包含其他页面:\n        <%\n            pageContext.include(\"out.jsp\");\n        %>\n```\n\n- exception\n\n```html\n\n\t异常消息：<%=exception.getMessage()%><br>\n    异常的字符串描述：<%=exception.toString()%>\n```\n\n\n### 三、jsp使用Javabean\n\n#### 1. Javabean的设计原则\n\n- 必须是公有类\n- 必须包含无参构造方法\n- 属性私有\n- 用getter()和setter()进行封装\n\n\t例如：\n\n\t```java\n\n\tpublic class Students{\n    \tprivate String name;\n\t\tprivate int age;\n    \n\t\tpublic  Students(){\n        \n    \t}\n\n    \tpublic String getName() {\n        \treturn name;\n    \t}\n\n    \tpublic void setName(String name) {\n        \tthis.name = name;\n    \t}\n\n    \tpublic int getAge() {\n        \treturn age;\n    \t}\n\n    \tpublic void setAge(int age) {\n        \tthis.age = age;\n    \t}\n    \n\t}\n\n\t```\n\n\n#### 2. 存取Javabean有关的jsp动作元素\n\n  \n**在jsp页面中使用Javabeans：**\n\n\n- 像使用普通java类一样，创建Javabean实例\n- 在jsp页面中通常使用jsp动作标签使用javabean,常用的动作标签：userBeans、setProperty、getProperty\n\n\t- `<jsp:useBeans>`\n\n\t在jsp页面中实例化或者在指定范围内使用Javabean：\n\n\t`<jsp:useBeans id=\"标示符\" class=\"java类名\" scope=\"作用范围\"/>`\n\t> scope属性：指定Javabean的作用范围\n\t> page：当前页面,重定向和转发都无效\n\t> request：可通过HttpRequest.getAttribute()取得Javabean对象，重定向无效，转发有效\n\t> session：可通过HttpSession.getAttribute()取得Javabean对象，同个会话有效\n\t> application:可通过application.getAttribute()取得Javabean对象，不同会话都有效\n\n\t例如：\n\t```html\n\t\t<jsp:useBean id=\"myUsers\" class=\"com.po.Users\" scope=\"application\"></jsp:useBean>\n\t\t用户名：<jsp:getProperty name=\"myUsers\" property=\"username\"></jsp:getProperty>\n\t\t密码：<jsp:getProperty name=\"myUsers\" property=\"password\"></jsp:getProperty>\n\t```\n\n\t也可使用内置对象获取：\n\t```html\n    \t用户名：<%=((Users)application.getAttribute(\"myUsers\")).getUsername()%>\n    \t密码： <%=((Users) application.getAttribute(\"myUsers\")).getPassword()%>\n\t\n\t\n\t```\n\n\t- `<jsp:setProperty>`\n\t \n\t```html\t\n\t\t根据表单自动匹配所有属性:\n\t\t<jsp:setProperty name=\"myUsers\" property=\"username\"></jsp:setProperty>\n\n\t\t根据表单匹配部分属性:\n\t    <jsp:setProperty name=\"myUsers\" property=\"username\"></jsp:setProperty>\n\n\t\t与表单无关，通过手工赋值给属性:\n\t    <jsp:setProperty name=\"myUsers\" property=\"password\" value=\"hahahaha\"></jsp:setProperty>\n\t\n\t\t通过url传参数给属性赋值:\n\t\t<jsp:setProperty name=\"myUsers\" property=\"password\" param=\"testparam\"></jsp:setProperty>\n\t\n\t```\n\n\t- `<jsp:getProperty>`\n\t\n\t```html\n\t\t使用getProperty获取属性值:\n\t    <jsp:getProperty name=\"myUsers\" property=\"username\"></jsp:getProperty>\n\n\t```\n\t\n\t","source":"_posts/JSP学习笔记.md","raw":"---\ntitle: JSP学习笔记\ndate: 2018-05-03 21:17:47\ncategories: \"JSP笔记\" \ntags:\n\t- JSP\n\t- JavaWeb\n---\n### 一、jsp简介\n\n#### 1、Jsp三大指令\n\n- page指令:<%@page 属性=\"\" %>,位于jsp页面顶端，可以有多个\n\n\n\t```jsp\n\t<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" import=\"java.text.*\"%>\n\n\t```\n\n- taglib指令：标签库\n\n\n- include\n\t> include指令:\n\t\n\t\t<%@include file=\"date.jsp\"%>\n\t> include动作:<jsp:include page=\"url\" flush=\"true|false\"/>\n\t\t\n\t\tpage:要包含的页面\n\n\t\tflush：被包含的页面是否从缓冲区读取\n\n\t**include指令与include动作的区别：**\n![diff_between_includeCommand_includeAction](https://i.imgur.com/YyHsnwD.png)\n\n\n\t- forward动作：<jsp: forward page=\"url\"/>,\n\t\n\t\t等同于：request.getRequestDispatcher(\"/url\").forward(request,response);\n\n\t- param动作：<jsp:param name=\"参数名\" value=\"参数值\">\n\t\n\t\t常与<jsp:forward>一起使用，作为其的子标签:\n\t``` jsp\n\t<jsp:forward page=\"user.jsp\">\n        <%--用<jsp:param \"></jsp:param>添加参数--%>\n        <jsp:param name=\"email\" value=\"11111111@163.com\"></jsp:param>\n   </jsp:forward>\n\t```\n\n#### 2、jsp注释\n- html的注释\n\t<!-- html注释 -->\n- jsp的注释\n <%-- jsp注释 -->（客户端不可见）\n- jsp脚本注释:\n\t\n\t//单行\n\n\t/* */ 多行\n \n#### 3、jsp脚本\n<% java代码 %>\n\n#### 4、jsp声明变量或方法\n<%! java代码 %>\n\n#### 5、jsp表达式\n<%=表达式 %>  ps:不可;分号结束\n\n#### 6、jsp页面的生命周期\n\n![jsp_life_cycle.png](https://i.imgur.com/U27ljB4.png) \n\n\n### 二、jsp内置对象\n** 九大内置对象：**\n>out,\nrequest,\nresponse,\nsession,\napplication,\nPage,\npageContext,\nexception,\nconfig\n\n- out\n\n```html\n\n\t<%\n    \tout.println(\"<h2>静夜思</h2>\");\n    \tout.println(\"床前明月光<br>\");\n    \tout.println(\"疑是地上霜<br>\");\n    \tout.flush();\n   \t\t/*out.clear();会抛出异常*/\n    \tout.clearBuffer();//这里不会抛出异常\n    \tout.println(\"举头望明月<br>\");\n    \tout.println(\"低头思故乡<br>\");\n    %>\n\n    缓冲区大小：<%= out.getBufferSize()%>byte<br>\n    缓冲区剩余大小：<%= out.getRemaining()%>byte<br>\n    是否自动清空缓冲区：<%= out.isAutoFlush()%><br>\n```\n\n- request\n \n```html\n\n\t<%\n        request.setCharacterEncoding(\"utf-8\");//解决post中文乱码问题，但无法解决get，get解决需要直接Tomcat配置文件\n        request.setAttribute(\"password\",\"123456\");//设置属性密码\n    %>\n    用户名：<%= request.getParameter(\"username\")%><br>\n    爱好：\n    <%\n        if(request.getParameterValues(\"favorite\") != null){  //这里需要判断为不为空，jsp这里不能将String数组看为Boolean\n            String[] favorites = request.getParameterValues(\"favorite\");\n            for (int i = 0; i < favorites.length; i++) {\n                out.println(favorites[i] + \"&nbsp;&nbsp;&nbsp;\");\n            }\n        }\n        String realPath = request.getRealPath(\"requset.jsp\");%><br>\n\n    密码：\n    <%=request.getAttribute(\"password\")%><br>\n\n    请求体的MIME类型：\n    <%=request.getContentType()%><br>\n\n    协议类型和版本号：\n    <%=request.getProtocol()%><br>\n\n    服务器主机名：\n    <%=request.getServerName()%><br>\n\n    服务器端口号：\n    <%=request.getServerPort()%><br>\n\n    请求文件长度：\n    <%=request.getContentLength()%><br>\n\n    请求的客户端地址：\n    <%=request.getRemoteAddr()%><<br>\n\n    请求的真实路径：\n    <%=request.getRealPath(\"requset.jsp\")%><br>\n\n    请求的上下文路径：\n    <%=request.getContextPath()%>\n```\n\t\n\n- response\n\n```html\n\n\t<%\n        response.setContentType(\"text/html;charset=utf-8\");\n        out.println(\"<h1>response内置对象</h1>\");\n        out.println(\"<hr>\");\n        //out.flush();\n        /* 因为getWrite获得的输出流对象会先于内置对象out输出，\n        所以要先清空缓冲区，使out强制输出，否则结果会是先输出outer\n        再输出out*/\n\n        PrintWriter outer = response.getWriter();\n        outer.println(\"大家好，我是response生成的输出流outer\");\n\t//  response.sendRedirect(\"login.jsp\");//重定向\n\t//  response.sendRedirect(\"request.jsp\");\n        request.getRequestDispatcher(\"request.jsp\").forward(request,response);//转发\n    %>\n\n```\n\n**请求转发和请求重定向：**\n\n![redirectAndTransmit.PNG](https://i.imgur.com/wWWpmzd.png)\n\n- session\n>     HttpSession的实例，\n>     周期：在第一个jsp页面被加载时自动创建，\n>     即浏览器连接到服务器开始，关闭浏览器离开这个服务器结束，\n>     在服务器的几个页面之间切换，服务器应当知道这是一个客户，\n>     就可以用session对象\n\n```html\n\n\t<%\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年mm月dd日 HH:mm:ss\");\n        Date d = new Date(session.getCreationTime());\n        session.setAttribute(\"username\",\"pinnuli\");\n        session.setAttribute(\"password\",\"123456\");\n        session.setAttribute(\"age\",20);\n\t//  session.setMaxInactiveInterval(10);\n\n\t//设置session最大生成期限，单位秒,也可在web.xml中设置session-timeout\n\n    %>\n    Session创建时间：\n    <%=sdf.format(d)%><br>\n\n    Session的ID：\n    <%=session.getId()%><br>\n\n    Session中获取属性值：\n    <%=session.getAttribute(\"username\")%><br>\n\n    Session保存的属性数组：\n    <%\n        String[] names = session.getValueNames();\n        for(int i=0; i<names.length; i++){\n            out.println(names[i] + \"&nbsp;&nbsp;\");\n        }\n\t//        session.invalidate();//销毁当前会话,每次刷新一次页面就会新建一个session\n    %><br>\n    <%--测试不同页面是否同一个session--%>\n    <a href=\"session_page2.jsp\">跳转到session_page2</a>\n```\n\n- application\n\t\n> 实现用户间数据的共享，可存放全局边变量，相当于java的静态变量\n\n```html\n\n\t<%\n        application.setAttribute(\"city\",\"广州\");\n        application.setAttribute(\"postcode\",\"510000\");\n        application.setAttribute(\"email\",\"guangzhou@163.com\");\n    %>\n    所在城市：<%=application.getAttribute(\"city\")%><br>\n    所有属性：\n    <%\n        Enumeration attributes = application.getAttributeNames();\n        while (attributes.hasMoreElements()){\n            out.println(attributes.nextElement() + \"&nbsp;&nbsp;\");\n        }\n    %><br>\n\n    jsp(serviet)引擎名和版本号：<%=application.getServerInfo()%><br>\n```\n\t\n- page、pageContext\n\n```html\n\t<h3>page:</h3>当前page页面的字符串描述：<%=page.toString()%><br><br>\n\n   <h3>pageContext:</h3>用户名：从session中获取属性-<%=pageContext.getSession().getAttribute(\"username\")%><br>\n\n    <%--跳转到其他页面--%>\n   <%--<%\n       pageContext.forward(\"out.jsp\");\n   %>--%>\n    include方法，包含其他页面:\n        <%\n            pageContext.include(\"out.jsp\");\n        %>\n```\n\n- exception\n\n```html\n\n\t异常消息：<%=exception.getMessage()%><br>\n    异常的字符串描述：<%=exception.toString()%>\n```\n\n\n### 三、jsp使用Javabean\n\n#### 1. Javabean的设计原则\n\n- 必须是公有类\n- 必须包含无参构造方法\n- 属性私有\n- 用getter()和setter()进行封装\n\n\t例如：\n\n\t```java\n\n\tpublic class Students{\n    \tprivate String name;\n\t\tprivate int age;\n    \n\t\tpublic  Students(){\n        \n    \t}\n\n    \tpublic String getName() {\n        \treturn name;\n    \t}\n\n    \tpublic void setName(String name) {\n        \tthis.name = name;\n    \t}\n\n    \tpublic int getAge() {\n        \treturn age;\n    \t}\n\n    \tpublic void setAge(int age) {\n        \tthis.age = age;\n    \t}\n    \n\t}\n\n\t```\n\n\n#### 2. 存取Javabean有关的jsp动作元素\n\n  \n**在jsp页面中使用Javabeans：**\n\n\n- 像使用普通java类一样，创建Javabean实例\n- 在jsp页面中通常使用jsp动作标签使用javabean,常用的动作标签：userBeans、setProperty、getProperty\n\n\t- `<jsp:useBeans>`\n\n\t在jsp页面中实例化或者在指定范围内使用Javabean：\n\n\t`<jsp:useBeans id=\"标示符\" class=\"java类名\" scope=\"作用范围\"/>`\n\t> scope属性：指定Javabean的作用范围\n\t> page：当前页面,重定向和转发都无效\n\t> request：可通过HttpRequest.getAttribute()取得Javabean对象，重定向无效，转发有效\n\t> session：可通过HttpSession.getAttribute()取得Javabean对象，同个会话有效\n\t> application:可通过application.getAttribute()取得Javabean对象，不同会话都有效\n\n\t例如：\n\t```html\n\t\t<jsp:useBean id=\"myUsers\" class=\"com.po.Users\" scope=\"application\"></jsp:useBean>\n\t\t用户名：<jsp:getProperty name=\"myUsers\" property=\"username\"></jsp:getProperty>\n\t\t密码：<jsp:getProperty name=\"myUsers\" property=\"password\"></jsp:getProperty>\n\t```\n\n\t也可使用内置对象获取：\n\t```html\n    \t用户名：<%=((Users)application.getAttribute(\"myUsers\")).getUsername()%>\n    \t密码： <%=((Users) application.getAttribute(\"myUsers\")).getPassword()%>\n\t\n\t\n\t```\n\n\t- `<jsp:setProperty>`\n\t \n\t```html\t\n\t\t根据表单自动匹配所有属性:\n\t\t<jsp:setProperty name=\"myUsers\" property=\"username\"></jsp:setProperty>\n\n\t\t根据表单匹配部分属性:\n\t    <jsp:setProperty name=\"myUsers\" property=\"username\"></jsp:setProperty>\n\n\t\t与表单无关，通过手工赋值给属性:\n\t    <jsp:setProperty name=\"myUsers\" property=\"password\" value=\"hahahaha\"></jsp:setProperty>\n\t\n\t\t通过url传参数给属性赋值:\n\t\t<jsp:setProperty name=\"myUsers\" property=\"password\" param=\"testparam\"></jsp:setProperty>\n\t\n\t```\n\n\t- `<jsp:getProperty>`\n\t\n\t```html\n\t\t使用getProperty获取属性值:\n\t    <jsp:getProperty name=\"myUsers\" property=\"username\"></jsp:getProperty>\n\n\t```\n\t\n\t","slug":"JSP学习笔记","published":1,"updated":"2018-07-23T10:30:32.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8o500028lyjozu8xfwb","content":"<h3 id=\"一、jsp简介\"><a href=\"#一、jsp简介\" class=\"headerlink\" title=\"一、jsp简介\"></a>一、jsp简介</h3><h4 id=\"1、Jsp三大指令\"><a href=\"#1、Jsp三大指令\" class=\"headerlink\" title=\"1、Jsp三大指令\"></a>1、Jsp三大指令</h4><ul>\n<li>page指令:&lt;%@page 属性=”” %&gt;,位于jsp页面顶端，可以有多个</li>\n</ul>\n<pre><code><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"text/html;charset=UTF-8\"</span> language=<span class=\"string\">\"java\"</span> <span class=\"keyword\">import</span>=<span class=\"string\">\"java.text.*\"</span>%&gt;</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>taglib指令：标签库</li>\n</ul>\n<ul>\n<li><p>include</p>\n<blockquote>\n<p>include指令:</p>\n</blockquote>\n<pre><code>&lt;%@include file=&quot;date.jsp&quot;%&gt;\n</code></pre><blockquote>\n<p>include动作:<jsp:include page=\"url\" flush=\"true|false\"></jsp:include></p>\n</blockquote>\n<pre><code>page:要包含的页面\n\nflush：被包含的页面是否从缓冲区读取\n</code></pre><p>  <strong>include指令与include动作的区别：</strong><br><img src=\"https://i.imgur.com/YyHsnwD.png\" alt=\"diff_between_includeCommand_includeAction\"></p>\n</li>\n</ul>\n<pre><code>- forward动作：&lt;jsp: forward page=&quot;url&quot;/&gt;,\n\n    等同于：request.getRequestDispatcher(&quot;/url&quot;).forward(request,response);\n\n- param动作：&lt;jsp:param name=&quot;参数名&quot; value=&quot;参数值&quot;&gt;\n\n    常与&lt;jsp:forward&gt;一起使用，作为其的子标签:\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;jsp:forward page=<span class=\"string\">\"user.jsp\"</span>&gt;</span><br><span class=\"line\">       &lt;%--用&lt;jsp:param <span class=\"string\">\"&gt;&lt;/jsp:param&gt;添加参数--%&gt;</span></span><br><span class=\"line\"><span class=\"string\">       &lt;jsp:param name=\"</span>email<span class=\"string\">\" value=\"</span><span class=\"number\">11111111</span>@<span class=\"number\">163</span>.com<span class=\"string\">\"&gt;&lt;/jsp:param&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/jsp:forward&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"2、jsp注释\"><a href=\"#2、jsp注释\" class=\"headerlink\" title=\"2、jsp注释\"></a>2、jsp注释</h4><ul>\n<li>html的注释  <!-- html注释 --></li>\n<li>jsp的注释<br>&lt;%– jsp注释 –&gt;（客户端不可见）</li>\n<li><p>jsp脚本注释:</p>\n<p>  //单行</p>\n<p>  /<em> </em>/ 多行</p>\n</li>\n</ul>\n<h4 id=\"3、jsp脚本\"><a href=\"#3、jsp脚本\" class=\"headerlink\" title=\"3、jsp脚本\"></a>3、jsp脚本</h4><p>&lt;% java代码 %&gt;</p>\n<h4 id=\"4、jsp声明变量或方法\"><a href=\"#4、jsp声明变量或方法\" class=\"headerlink\" title=\"4、jsp声明变量或方法\"></a>4、jsp声明变量或方法</h4><p>&lt;%! java代码 %&gt;</p>\n<h4 id=\"5、jsp表达式\"><a href=\"#5、jsp表达式\" class=\"headerlink\" title=\"5、jsp表达式\"></a>5、jsp表达式</h4><p>&lt;%=表达式 %&gt;  ps:不可;分号结束</p>\n<h4 id=\"6、jsp页面的生命周期\"><a href=\"#6、jsp页面的生命周期\" class=\"headerlink\" title=\"6、jsp页面的生命周期\"></a>6、jsp页面的生命周期</h4><p><img src=\"https://i.imgur.com/U27ljB4.png\" alt=\"jsp_life_cycle.png\"> </p>\n<h3 id=\"二、jsp内置对象\"><a href=\"#二、jsp内置对象\" class=\"headerlink\" title=\"二、jsp内置对象\"></a>二、jsp内置对象</h3><p><strong> 九大内置对象：</strong></p>\n<blockquote>\n<p>out,<br>request,<br>response,<br>session,<br>application,<br>Page,<br>pageContext,<br>exception,<br>config</p>\n</blockquote>\n<ul>\n<li>out</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\">   \tout.println(\"&lt;h2&gt;静夜思&lt;/h2&gt;\");</span><br><span class=\"line\">   \tout.println(\"床前明月光<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>\");</span><br><span class=\"line\">   \tout.println(\"疑是地上霜<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>\");</span><br><span class=\"line\">   \tout.flush();</span><br><span class=\"line\">  \t\t/*out.clear();会抛出异常*/</span><br><span class=\"line\">   \tout.clearBuffer();//这里不会抛出异常</span><br><span class=\"line\">   \tout.println(\"举头望明月<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>\");</span><br><span class=\"line\">   \tout.println(\"低头思故乡<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>\");</span><br><span class=\"line\">   %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   缓冲区大小：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">out.getBufferSize</span>()%&gt;</span>byte<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   缓冲区剩余大小：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">out.getRemaining</span>()%&gt;</span>byte<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   是否自动清空缓冲区：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">out.isAutoFlush</span>()%&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>request</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">request.setCharacterEncoding</span>(\"<span class=\"attr\">utf-8</span>\");//解决<span class=\"attr\">post</span>中文乱码问题，但无法解决<span class=\"attr\">get</span>，<span class=\"attr\">get</span>解决需要直接<span class=\"attr\">Tomcat</span>配置文件</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">request.setAttribute</span>(\"<span class=\"attr\">password</span>\",\"<span class=\"attr\">123456</span>\");//设置属性密码</span></span><br><span class=\"line\"><span class=\"tag\">   %&gt;</span></span><br><span class=\"line\">   用户名：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">request.getParameter</span>(\"<span class=\"attr\">username</span>\")%&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   爱好：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">if</span>(<span class=\"attr\">request.getParameterValues</span>(\"<span class=\"attr\">favorite</span>\") != <span class=\"string\">null)&#123;</span>  //这里需要判断为不为空，<span class=\"attr\">jsp</span>这里不能将<span class=\"attr\">String</span>数组看为<span class=\"attr\">Boolean</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">String</span>[] <span class=\"attr\">favorites</span> = <span class=\"string\">request.getParameterValues(</span>\"<span class=\"attr\">favorite</span>\");</span></span><br><span class=\"line\">           for (int i = 0; i &lt; favorites.length; i++) &#123;</span><br><span class=\"line\">               out.println(favorites[i] + \"&amp;nbsp;&amp;nbsp;&amp;nbsp;\");</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       String realPath = request.getRealPath(\"requset.jsp\");%&gt;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   密码：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getAttribute(\"password\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   请求体的MIME类型：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getContentType()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   协议类型和版本号：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getProtocol()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   服务器主机名：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getServerName()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   服务器端口号：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getServerPort()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   请求文件长度：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getContentLength()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   请求的客户端地址：</span><br><span class=\"line\">   &lt;%=request.getRemoteAddr()%&gt;&lt;&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   请求的真实路径：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getRealPath(\"requset.jsp\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   请求的上下文路径：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getContextPath()%</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>response</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">response.setContentType</span>(\"<span class=\"attr\">text</span>/<span class=\"attr\">html</span>;<span class=\"attr\">charset</span>=<span class=\"string\">utf-8</span>\");</span></span><br><span class=\"line\">       out.println(\"&lt;h1&gt;response内置对象&lt;/h1&gt;\");</span><br><span class=\"line\">       out.println(\"<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>\");</span><br><span class=\"line\">       //out.flush();</span><br><span class=\"line\">       /* 因为getWrite获得的输出流对象会先于内置对象out输出，</span><br><span class=\"line\">       所以要先清空缓冲区，使out强制输出，否则结果会是先输出outer</span><br><span class=\"line\">       再输出out*/</span><br><span class=\"line\"></span><br><span class=\"line\">       PrintWriter outer = response.getWriter();</span><br><span class=\"line\">       outer.println(\"大家好，我是response生成的输出流outer\");</span><br><span class=\"line\">//  response.sendRedirect(\"login.jsp\");//重定向</span><br><span class=\"line\">//  response.sendRedirect(\"request.jsp\");</span><br><span class=\"line\">       request.getRequestDispatcher(\"request.jsp\").forward(request,response);//转发</span><br><span class=\"line\">   %&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>请求转发和请求重定向：</strong></p>\n<p><img src=\"https://i.imgur.com/wWWpmzd.png\" alt=\"redirectAndTransmit.PNG\"></p>\n<ul>\n<li>session<blockquote>\n<pre><code>HttpSession的实例，\n周期：在第一个jsp页面被加载时自动创建，\n即浏览器连接到服务器开始，关闭浏览器离开这个服务器结束，\n在服务器的几个页面之间切换，服务器应当知道这是一个客户，\n就可以用session对象\n</code></pre></blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">SimpleDateFormat</span> <span class=\"attr\">sdf</span> = <span class=\"string\">new</span> <span class=\"attr\">SimpleDateFormat</span>(\"<span class=\"attr\">yyyy</span>年<span class=\"attr\">mm</span>月<span class=\"attr\">dd</span>日 <span class=\"attr\">HH:mm:ss</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">Date</span> <span class=\"attr\">d</span> = <span class=\"string\">new</span> <span class=\"attr\">Date</span>(<span class=\"attr\">session.getCreationTime</span>());</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">session.setAttribute</span>(\"<span class=\"attr\">username</span>\",\"<span class=\"attr\">pinnuli</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">session.setAttribute</span>(\"<span class=\"attr\">password</span>\",\"<span class=\"attr\">123456</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">session.setAttribute</span>(\"<span class=\"attr\">age</span>\",<span class=\"attr\">20</span>);</span></span><br><span class=\"line\"><span class=\"tag\">//  <span class=\"attr\">session.setMaxInactiveInterval</span>(<span class=\"attr\">10</span>);</span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">//设置<span class=\"attr\">session</span>最大生成期限，单位秒,也可在<span class=\"attr\">web.xml</span>中设置<span class=\"attr\">session-timeout</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">   %&gt;</span></span><br><span class=\"line\">   Session创建时间：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=sdf.format(d)%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   Session的ID：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=session.getId()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   Session中获取属性值：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=session.getAttribute(\"username\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   Session保存的属性数组：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">String</span>[] <span class=\"attr\">names</span> = <span class=\"string\">session.getValueNames();</span></span></span><br><span class=\"line\">       for(int i=0; i&lt;names.length; i++)&#123;</span><br><span class=\"line\">           out.println(names[i] + \"&amp;nbsp;&amp;nbsp;\");</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">//        session.invalidate();//销毁当前会话,每次刷新一次页面就会新建一个session</span><br><span class=\"line\">   %&gt;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%--测试不同页面是否同一个session--%</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"session_page2.jsp\"</span>&gt;</span>跳转到session_page2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>application</li>\n</ul>\n<blockquote>\n<p>实现用户间数据的共享，可存放全局边变量，相当于java的静态变量</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">application.setAttribute</span>(\"<span class=\"attr\">city</span>\",\"广州\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">application.setAttribute</span>(\"<span class=\"attr\">postcode</span>\",\"<span class=\"attr\">510000</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">application.setAttribute</span>(\"<span class=\"attr\">email</span>\",\"<span class=\"attr\">guangzhou</span>@<span class=\"attr\">163.com</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">   %&gt;</span></span><br><span class=\"line\">   所在城市：<span class=\"tag\">&lt;<span class=\"name\">%=application.getAttribute(\"city\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   所有属性：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">Enumeration</span> <span class=\"attr\">attributes</span> = <span class=\"string\">application.getAttributeNames();</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">while</span> (<span class=\"attr\">attributes.hasMoreElements</span>())&#123;</span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">out.println</span>(<span class=\"attr\">attributes.nextElement</span>() + \"&amp;<span class=\"attr\">nbsp</span>;&amp;<span class=\"attr\">nbsp</span>;\");</span></span><br><span class=\"line\"><span class=\"tag\">       &#125;</span></span><br><span class=\"line\"><span class=\"tag\">   %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   jsp(serviet)引擎名和版本号：<span class=\"tag\">&lt;<span class=\"name\">%=application.getServerInfo()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>page、pageContext</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>page:<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>当前page页面的字符串描述：<span class=\"tag\">&lt;<span class=\"name\">%=page.toString()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>pageContext:<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>用户名：从session中获取属性-<span class=\"tag\">&lt;<span class=\"name\">%=pageContext.getSession().getAttribute(\"username\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%--跳转到其他页面--%</span>&gt;</span></span><br><span class=\"line\">  &lt;%--&lt;%</span><br><span class=\"line\">      pageContext.forward(\"out.jsp\");</span><br><span class=\"line\">  %&gt;--%&gt;</span><br><span class=\"line\">   include方法，包含其他页面:</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">pageContext.include</span>(\"<span class=\"attr\">out.jsp</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       %&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>exception</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">异常消息：<span class=\"tag\">&lt;<span class=\"name\">%=exception.getMessage()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   异常的字符串描述：<span class=\"tag\">&lt;<span class=\"name\">%=exception.toString()%</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、jsp使用Javabean\"><a href=\"#三、jsp使用Javabean\" class=\"headerlink\" title=\"三、jsp使用Javabean\"></a>三、jsp使用Javabean</h3><h4 id=\"1-Javabean的设计原则\"><a href=\"#1-Javabean的设计原则\" class=\"headerlink\" title=\"1. Javabean的设计原则\"></a>1. Javabean的设计原则</h4><ul>\n<li>必须是公有类</li>\n<li>必须包含无参构造方法</li>\n<li>属性私有</li>\n<li><p>用getter()和setter()进行封装</p>\n<p>  例如：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Students</span></span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">   </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"title\">Students</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-存取Javabean有关的jsp动作元素\"><a href=\"#2-存取Javabean有关的jsp动作元素\" class=\"headerlink\" title=\"2. 存取Javabean有关的jsp动作元素\"></a>2. 存取Javabean有关的jsp动作元素</h4><p><strong>在jsp页面中使用Javabeans：</strong></p>\n<ul>\n<li>像使用普通java类一样，创建Javabean实例</li>\n<li><p>在jsp页面中通常使用jsp动作标签使用javabean,常用的动作标签：userBeans、setProperty、getProperty</p>\n<ul>\n<li><p><code>&lt;jsp:useBeans&gt;</code></p>\n<p>在jsp页面中实例化或者在指定范围内使用Javabean：</p>\n<p><code>&lt;jsp:useBeans id=&quot;标示符&quot; class=&quot;java类名&quot; scope=&quot;作用范围&quot;/&gt;</code></p>\n<blockquote>\n<p>scope属性：指定Javabean的作用范围<br>page：当前页面,重定向和转发都无效<br>request：可通过HttpRequest.getAttribute()取得Javabean对象，重定向无效，转发有效<br>session：可通过HttpSession.getAttribute()取得Javabean对象，同个会话有效<br>application:可通过application.getAttribute()取得Javabean对象，不同会话都有效</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:useBean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.po.Users\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"application\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:useBean</span>&gt;</span></span><br><span class=\"line\">用户名：<span class=\"tag\">&lt;<span class=\"name\">jsp:getProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:getProperty</span>&gt;</span></span><br><span class=\"line\">密码：<span class=\"tag\">&lt;<span class=\"name\">jsp:getProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"password\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:getProperty</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>也可使用内置对象获取：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名：<span class=\"tag\">&lt;<span class=\"name\">%=((Users)application.getAttribute(\"myUsers\")).getUsername()%</span>&gt;</span></span><br><span class=\"line\">密码： <span class=\"tag\">&lt;<span class=\"name\">%=((Users)</span> <span class=\"attr\">application.getAttribute</span>(\"<span class=\"attr\">myUsers</span>\"))<span class=\"attr\">.getPassword</span>()%&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;jsp:setProperty&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据表单自动匹配所有属性:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:setProperty</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">根据表单匹配部分属性:</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:setProperty</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">与表单无关，通过手工赋值给属性:</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hahahaha\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:setProperty</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">通过url传参数给属性赋值:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">param</span>=<span class=\"string\">\"testparam\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:setProperty</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;jsp:getProperty&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用getProperty获取属性值:</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">jsp:getProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:getProperty</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、jsp简介\"><a href=\"#一、jsp简介\" class=\"headerlink\" title=\"一、jsp简介\"></a>一、jsp简介</h3><h4 id=\"1、Jsp三大指令\"><a href=\"#1、Jsp三大指令\" class=\"headerlink\" title=\"1、Jsp三大指令\"></a>1、Jsp三大指令</h4><ul>\n<li>page指令:&lt;%@page 属性=”” %&gt;,位于jsp页面顶端，可以有多个</li>\n</ul>\n<pre><code><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"text/html;charset=UTF-8\"</span> language=<span class=\"string\">\"java\"</span> <span class=\"keyword\">import</span>=<span class=\"string\">\"java.text.*\"</span>%&gt;</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>taglib指令：标签库</li>\n</ul>\n<ul>\n<li><p>include</p>\n<blockquote>\n<p>include指令:</p>\n</blockquote>\n<pre><code>&lt;%@include file=&quot;date.jsp&quot;%&gt;\n</code></pre><blockquote>\n<p>include动作:<jsp:include page=\"url\" flush=\"true|false\"></jsp:include></p>\n</blockquote>\n<pre><code>page:要包含的页面\n\nflush：被包含的页面是否从缓冲区读取\n</code></pre><p>  <strong>include指令与include动作的区别：</strong><br><img src=\"https://i.imgur.com/YyHsnwD.png\" alt=\"diff_between_includeCommand_includeAction\"></p>\n</li>\n</ul>\n<pre><code>- forward动作：&lt;jsp: forward page=&quot;url&quot;/&gt;,\n\n    等同于：request.getRequestDispatcher(&quot;/url&quot;).forward(request,response);\n\n- param动作：&lt;jsp:param name=&quot;参数名&quot; value=&quot;参数值&quot;&gt;\n\n    常与&lt;jsp:forward&gt;一起使用，作为其的子标签:\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;jsp:forward page=<span class=\"string\">\"user.jsp\"</span>&gt;</span><br><span class=\"line\">       &lt;%--用&lt;jsp:param <span class=\"string\">\"&gt;&lt;/jsp:param&gt;添加参数--%&gt;</span></span><br><span class=\"line\"><span class=\"string\">       &lt;jsp:param name=\"</span>email<span class=\"string\">\" value=\"</span><span class=\"number\">11111111</span>@<span class=\"number\">163</span>.com<span class=\"string\">\"&gt;&lt;/jsp:param&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/jsp:forward&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"2、jsp注释\"><a href=\"#2、jsp注释\" class=\"headerlink\" title=\"2、jsp注释\"></a>2、jsp注释</h4><ul>\n<li>html的注释  <!-- html注释 --></li>\n<li>jsp的注释<br>&lt;%– jsp注释 –&gt;（客户端不可见）</li>\n<li><p>jsp脚本注释:</p>\n<p>  //单行</p>\n<p>  /<em> </em>/ 多行</p>\n</li>\n</ul>\n<h4 id=\"3、jsp脚本\"><a href=\"#3、jsp脚本\" class=\"headerlink\" title=\"3、jsp脚本\"></a>3、jsp脚本</h4><p>&lt;% java代码 %&gt;</p>\n<h4 id=\"4、jsp声明变量或方法\"><a href=\"#4、jsp声明变量或方法\" class=\"headerlink\" title=\"4、jsp声明变量或方法\"></a>4、jsp声明变量或方法</h4><p>&lt;%! java代码 %&gt;</p>\n<h4 id=\"5、jsp表达式\"><a href=\"#5、jsp表达式\" class=\"headerlink\" title=\"5、jsp表达式\"></a>5、jsp表达式</h4><p>&lt;%=表达式 %&gt;  ps:不可;分号结束</p>\n<h4 id=\"6、jsp页面的生命周期\"><a href=\"#6、jsp页面的生命周期\" class=\"headerlink\" title=\"6、jsp页面的生命周期\"></a>6、jsp页面的生命周期</h4><p><img src=\"https://i.imgur.com/U27ljB4.png\" alt=\"jsp_life_cycle.png\"> </p>\n<h3 id=\"二、jsp内置对象\"><a href=\"#二、jsp内置对象\" class=\"headerlink\" title=\"二、jsp内置对象\"></a>二、jsp内置对象</h3><p><strong> 九大内置对象：</strong></p>\n<blockquote>\n<p>out,<br>request,<br>response,<br>session,<br>application,<br>Page,<br>pageContext,<br>exception,<br>config</p>\n</blockquote>\n<ul>\n<li>out</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\">   \tout.println(\"&lt;h2&gt;静夜思&lt;/h2&gt;\");</span><br><span class=\"line\">   \tout.println(\"床前明月光<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>\");</span><br><span class=\"line\">   \tout.println(\"疑是地上霜<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>\");</span><br><span class=\"line\">   \tout.flush();</span><br><span class=\"line\">  \t\t/*out.clear();会抛出异常*/</span><br><span class=\"line\">   \tout.clearBuffer();//这里不会抛出异常</span><br><span class=\"line\">   \tout.println(\"举头望明月<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>\");</span><br><span class=\"line\">   \tout.println(\"低头思故乡<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>\");</span><br><span class=\"line\">   %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   缓冲区大小：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">out.getBufferSize</span>()%&gt;</span>byte<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   缓冲区剩余大小：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">out.getRemaining</span>()%&gt;</span>byte<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   是否自动清空缓冲区：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">out.isAutoFlush</span>()%&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>request</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">request.setCharacterEncoding</span>(\"<span class=\"attr\">utf-8</span>\");//解决<span class=\"attr\">post</span>中文乱码问题，但无法解决<span class=\"attr\">get</span>，<span class=\"attr\">get</span>解决需要直接<span class=\"attr\">Tomcat</span>配置文件</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">request.setAttribute</span>(\"<span class=\"attr\">password</span>\",\"<span class=\"attr\">123456</span>\");//设置属性密码</span></span><br><span class=\"line\"><span class=\"tag\">   %&gt;</span></span><br><span class=\"line\">   用户名：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">request.getParameter</span>(\"<span class=\"attr\">username</span>\")%&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   爱好：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">if</span>(<span class=\"attr\">request.getParameterValues</span>(\"<span class=\"attr\">favorite</span>\") != <span class=\"string\">null)&#123;</span>  //这里需要判断为不为空，<span class=\"attr\">jsp</span>这里不能将<span class=\"attr\">String</span>数组看为<span class=\"attr\">Boolean</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">String</span>[] <span class=\"attr\">favorites</span> = <span class=\"string\">request.getParameterValues(</span>\"<span class=\"attr\">favorite</span>\");</span></span><br><span class=\"line\">           for (int i = 0; i &lt; favorites.length; i++) &#123;</span><br><span class=\"line\">               out.println(favorites[i] + \"&amp;nbsp;&amp;nbsp;&amp;nbsp;\");</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       String realPath = request.getRealPath(\"requset.jsp\");%&gt;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   密码：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getAttribute(\"password\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   请求体的MIME类型：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getContentType()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   协议类型和版本号：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getProtocol()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   服务器主机名：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getServerName()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   服务器端口号：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getServerPort()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   请求文件长度：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getContentLength()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   请求的客户端地址：</span><br><span class=\"line\">   &lt;%=request.getRemoteAddr()%&gt;&lt;&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   请求的真实路径：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getRealPath(\"requset.jsp\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   请求的上下文路径：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=request.getContextPath()%</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>response</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">response.setContentType</span>(\"<span class=\"attr\">text</span>/<span class=\"attr\">html</span>;<span class=\"attr\">charset</span>=<span class=\"string\">utf-8</span>\");</span></span><br><span class=\"line\">       out.println(\"&lt;h1&gt;response内置对象&lt;/h1&gt;\");</span><br><span class=\"line\">       out.println(\"<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>\");</span><br><span class=\"line\">       //out.flush();</span><br><span class=\"line\">       /* 因为getWrite获得的输出流对象会先于内置对象out输出，</span><br><span class=\"line\">       所以要先清空缓冲区，使out强制输出，否则结果会是先输出outer</span><br><span class=\"line\">       再输出out*/</span><br><span class=\"line\"></span><br><span class=\"line\">       PrintWriter outer = response.getWriter();</span><br><span class=\"line\">       outer.println(\"大家好，我是response生成的输出流outer\");</span><br><span class=\"line\">//  response.sendRedirect(\"login.jsp\");//重定向</span><br><span class=\"line\">//  response.sendRedirect(\"request.jsp\");</span><br><span class=\"line\">       request.getRequestDispatcher(\"request.jsp\").forward(request,response);//转发</span><br><span class=\"line\">   %&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>请求转发和请求重定向：</strong></p>\n<p><img src=\"https://i.imgur.com/wWWpmzd.png\" alt=\"redirectAndTransmit.PNG\"></p>\n<ul>\n<li>session<blockquote>\n<pre><code>HttpSession的实例，\n周期：在第一个jsp页面被加载时自动创建，\n即浏览器连接到服务器开始，关闭浏览器离开这个服务器结束，\n在服务器的几个页面之间切换，服务器应当知道这是一个客户，\n就可以用session对象\n</code></pre></blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">SimpleDateFormat</span> <span class=\"attr\">sdf</span> = <span class=\"string\">new</span> <span class=\"attr\">SimpleDateFormat</span>(\"<span class=\"attr\">yyyy</span>年<span class=\"attr\">mm</span>月<span class=\"attr\">dd</span>日 <span class=\"attr\">HH:mm:ss</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">Date</span> <span class=\"attr\">d</span> = <span class=\"string\">new</span> <span class=\"attr\">Date</span>(<span class=\"attr\">session.getCreationTime</span>());</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">session.setAttribute</span>(\"<span class=\"attr\">username</span>\",\"<span class=\"attr\">pinnuli</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">session.setAttribute</span>(\"<span class=\"attr\">password</span>\",\"<span class=\"attr\">123456</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">session.setAttribute</span>(\"<span class=\"attr\">age</span>\",<span class=\"attr\">20</span>);</span></span><br><span class=\"line\"><span class=\"tag\">//  <span class=\"attr\">session.setMaxInactiveInterval</span>(<span class=\"attr\">10</span>);</span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">//设置<span class=\"attr\">session</span>最大生成期限，单位秒,也可在<span class=\"attr\">web.xml</span>中设置<span class=\"attr\">session-timeout</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">   %&gt;</span></span><br><span class=\"line\">   Session创建时间：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=sdf.format(d)%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   Session的ID：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=session.getId()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   Session中获取属性值：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%=session.getAttribute(\"username\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   Session保存的属性数组：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">String</span>[] <span class=\"attr\">names</span> = <span class=\"string\">session.getValueNames();</span></span></span><br><span class=\"line\">       for(int i=0; i&lt;names.length; i++)&#123;</span><br><span class=\"line\">           out.println(names[i] + \"&amp;nbsp;&amp;nbsp;\");</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">//        session.invalidate();//销毁当前会话,每次刷新一次页面就会新建一个session</span><br><span class=\"line\">   %&gt;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%--测试不同页面是否同一个session--%</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"session_page2.jsp\"</span>&gt;</span>跳转到session_page2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>application</li>\n</ul>\n<blockquote>\n<p>实现用户间数据的共享，可存放全局边变量，相当于java的静态变量</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">application.setAttribute</span>(\"<span class=\"attr\">city</span>\",\"广州\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">application.setAttribute</span>(\"<span class=\"attr\">postcode</span>\",\"<span class=\"attr\">510000</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">application.setAttribute</span>(\"<span class=\"attr\">email</span>\",\"<span class=\"attr\">guangzhou</span>@<span class=\"attr\">163.com</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">   %&gt;</span></span><br><span class=\"line\">   所在城市：<span class=\"tag\">&lt;<span class=\"name\">%=application.getAttribute(\"city\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   所有属性：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">Enumeration</span> <span class=\"attr\">attributes</span> = <span class=\"string\">application.getAttributeNames();</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">while</span> (<span class=\"attr\">attributes.hasMoreElements</span>())&#123;</span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">out.println</span>(<span class=\"attr\">attributes.nextElement</span>() + \"&amp;<span class=\"attr\">nbsp</span>;&amp;<span class=\"attr\">nbsp</span>;\");</span></span><br><span class=\"line\"><span class=\"tag\">       &#125;</span></span><br><span class=\"line\"><span class=\"tag\">   %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   jsp(serviet)引擎名和版本号：<span class=\"tag\">&lt;<span class=\"name\">%=application.getServerInfo()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>page、pageContext</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>page:<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>当前page页面的字符串描述：<span class=\"tag\">&lt;<span class=\"name\">%=page.toString()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>pageContext:<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>用户名：从session中获取属性-<span class=\"tag\">&lt;<span class=\"name\">%=pageContext.getSession().getAttribute(\"username\")%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%--跳转到其他页面--%</span>&gt;</span></span><br><span class=\"line\">  &lt;%--&lt;%</span><br><span class=\"line\">      pageContext.forward(\"out.jsp\");</span><br><span class=\"line\">  %&gt;--%&gt;</span><br><span class=\"line\">   include方法，包含其他页面:</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">pageContext.include</span>(\"<span class=\"attr\">out.jsp</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">       %&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>exception</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">异常消息：<span class=\"tag\">&lt;<span class=\"name\">%=exception.getMessage()%</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">   异常的字符串描述：<span class=\"tag\">&lt;<span class=\"name\">%=exception.toString()%</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、jsp使用Javabean\"><a href=\"#三、jsp使用Javabean\" class=\"headerlink\" title=\"三、jsp使用Javabean\"></a>三、jsp使用Javabean</h3><h4 id=\"1-Javabean的设计原则\"><a href=\"#1-Javabean的设计原则\" class=\"headerlink\" title=\"1. Javabean的设计原则\"></a>1. Javabean的设计原则</h4><ul>\n<li>必须是公有类</li>\n<li>必须包含无参构造方法</li>\n<li>属性私有</li>\n<li><p>用getter()和setter()进行封装</p>\n<p>  例如：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Students</span></span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">   </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"title\">Students</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-存取Javabean有关的jsp动作元素\"><a href=\"#2-存取Javabean有关的jsp动作元素\" class=\"headerlink\" title=\"2. 存取Javabean有关的jsp动作元素\"></a>2. 存取Javabean有关的jsp动作元素</h4><p><strong>在jsp页面中使用Javabeans：</strong></p>\n<ul>\n<li>像使用普通java类一样，创建Javabean实例</li>\n<li><p>在jsp页面中通常使用jsp动作标签使用javabean,常用的动作标签：userBeans、setProperty、getProperty</p>\n<ul>\n<li><p><code>&lt;jsp:useBeans&gt;</code></p>\n<p>在jsp页面中实例化或者在指定范围内使用Javabean：</p>\n<p><code>&lt;jsp:useBeans id=&quot;标示符&quot; class=&quot;java类名&quot; scope=&quot;作用范围&quot;/&gt;</code></p>\n<blockquote>\n<p>scope属性：指定Javabean的作用范围<br>page：当前页面,重定向和转发都无效<br>request：可通过HttpRequest.getAttribute()取得Javabean对象，重定向无效，转发有效<br>session：可通过HttpSession.getAttribute()取得Javabean对象，同个会话有效<br>application:可通过application.getAttribute()取得Javabean对象，不同会话都有效</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:useBean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.po.Users\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"application\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:useBean</span>&gt;</span></span><br><span class=\"line\">用户名：<span class=\"tag\">&lt;<span class=\"name\">jsp:getProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:getProperty</span>&gt;</span></span><br><span class=\"line\">密码：<span class=\"tag\">&lt;<span class=\"name\">jsp:getProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"password\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:getProperty</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>也可使用内置对象获取：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名：<span class=\"tag\">&lt;<span class=\"name\">%=((Users)application.getAttribute(\"myUsers\")).getUsername()%</span>&gt;</span></span><br><span class=\"line\">密码： <span class=\"tag\">&lt;<span class=\"name\">%=((Users)</span> <span class=\"attr\">application.getAttribute</span>(\"<span class=\"attr\">myUsers</span>\"))<span class=\"attr\">.getPassword</span>()%&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;jsp:setProperty&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据表单自动匹配所有属性:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:setProperty</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">根据表单匹配部分属性:</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:setProperty</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">与表单无关，通过手工赋值给属性:</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hahahaha\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:setProperty</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">通过url传参数给属性赋值:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">param</span>=<span class=\"string\">\"testparam\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:setProperty</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;jsp:getProperty&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用getProperty获取属性值:</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">jsp:getProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUsers\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:getProperty</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"java Socket应用¨","date":"2018-07-21T07:09:14.000Z","_content":"####  一、Socket使用时应当注意的一些问题\n-设置超时，从套接字读取信息时，在有数据可供访问之前，读操作会被阻塞，如果此时主机不可达，那么程序将会等待很长时间，并因为系统操作系统的限制最终导致超时\n\n> 调用setSoTimeout方法设置\n\n```JAVA\nSocket s = new Socket(...);\ns.setSoTimeout(10000);\n```\n> 对构造器Socket(String host,int port)，可以先构建一个无连接的套接字，再使用超时\n\n```java\nSocket s = new Socket();\ns.connect(new InetSocketAddress(host,port),timeout);\n````\n\n- 可中断套接字，用SocketChannel类\n- 需要解析因特网地址时，可以用InetAddress类\n- 为多个客户端服务时，可以用多线程解决\n- 半关闭：套接字连接的一段UN可以终止其输出，同时仍可以接受来自另一端的数据，反过来也一样，调用Socket.shutdownInput/Socket.shutdownOutput\n#### 二、获取Web数\n- **URI和URL**\n    - URL是URI的一个特例，URI是个纯粹的语法结构，包含用来点位Web资源的字符串和各种组成功哪部分，URL包含了用于定位Web资源的足够信息，其他无法定位任何数据的URI，称之为URN\n    - 一个URI具有一下语法：`[scema:]schemaSpecficPart[#fragment]`\n    > I.包含schema:部分的URI成为绝对URI，否则为相对URI\n    II.绝对URI的schemaSpecficPart不是以`/`揩油，则称为不透明的，如:`mialto:pinnuli!hostname.com`\n    III.所有绝对的透明URI和所有相对URI都是分层的，如：`http://hostname.com/index.html`，`../../java/net/Socket.html#Socket()`\n    IV.一个分层URI的URI的schemaSpecficPart具有一下结构：[//authority][path][?query],基于服务器的URI，authority具有一下形式:[user-info@]host[:port]\n    - java中URI类的作用\n        - 解析表示福并将它分解成各种不同组成成分\n        - 标识符的相对化和解析相对标识符\n- 使用URLCollection\n    > URLConnection类可以比URL类有更多的控制\n    \n    必须严格按照以下步骤进行操作：\n    1.调用URL类中的openConnection方法得到URLConnection对象：`URLConnection connection = url.openConnection();`\n    2.设置请求属性\n    3.调用connect方法连接远程资源:connection.connect();\n    4.建立连接后，可以查询头信息\n    5.访问资源数据，使用getInputStream方法获取一个输入流\n    > PS:这里的getInputStream/getOutputStream与Socket类的又很大的不同，这里具有很多处理请求和响应消息头时的强大功能\n- 提交表单\n    1.提交数据之前，需要创建一个URLConnection对象\n    ```java\n    URL url = new URL(\"http;??host/script\");\n    URLConnection connection = url.openConnection();\n    ```\n    2.调用setDoOutput方法建立一个输出的连接\n    ```java\n    connection.setRequestMethod(\"POST\");\n    connection.setDoOutput（true);\n    ```\n    3.调用getOutputStream方法获得一个输出流，想服务器发送数据\n    ```java\n    OutputStreamWriter osw = new OutputStreamWriter(connection.getOutputStream(), \"UTF-8\");\n    osw.write(name1 + \"=\" + URLEncoder.eccode(value1,\"UTF-8\") + \"&);\n    osw.write(name2 + \"=\" + URLEncoder.encode(value2,\"UTF-8\"));\n     ```\n    4.关闭输出流\n    ```java\n    osw.flush();\n    osw.close();\n    ```\n    5.调用getInputStream方法对服务器的响应\n    ```java\n    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n    StringBuffer response = new StringBuffer();\n    String temp;\n    while ((temp = br.readLine()) != null) {\n        response.append(temp);\n        response.append(\"\\n\");\n    }\n    ```\n    >I.设置请求方法时，必须使用大写，如POST，使用post无法识别\n    II.如果想要获取错误页面，可以将URLConnection转型为HTTPURLConnection类并调用getErrorStream方法\n    `InputStream err = ((HTTPURLConnection) connection).getErrorStream();`\n\n\n    URL编码需遵循以下规则：\n    >I.保留字符A-Z、a-z、0-9 以及.-*_\n    II.用`+`替换所有空格\n    III.将其他所有字符编码为UTF-8，并将每个字节都编码为%后面紧跟一个两位的十六进制数字\n    比如发送\"New York, NY\"，可以使用New+York%2C+NY\n----\n#### 二、基于TCP的SOcket通信\n1.创建ServerSocket和Socket\n2.打开连接到Socket的输入/输出流\n3.按照协议对Socket进行读/写操作\n4.关闭输入/输出流，关闭Socket\n##### 服务端（多线程响应多个客户端）\n\n    ```java\n    //创建一个服务器端Socket，即ServerSocket，指定绑定的端口，并负责监听此端口\n    ServerSocket serverSocket=new ServerSocket(8888);\n    Socket socket=null;\n    System.out.println(\"***服务器即将启动，等待客户端的连接***\");\n    while(true){\n        //调用accept()方法开始监听，等待客户端的连接\n        socket=serverSocket.accept();\n        //创建一个新的线程\n        ServerThread serverThread=new ServerThread(socket);\n        //启动线程\n        serverThread.start();\n    }\n    ```\n\n> ServerThread类\n\n    ```java\n    public class ServerThread extends Thread {\n\tSocket socket = null;\n\tpublic ServerThread(Socket socket) {\n\t\tthis.socket = socket;\n\t}\n\t\n\t//线程执行的操作，响应客户端的请求\n\tpublic void run(){\n\t\tInputStream is=null;\n\t\tInputStreamReader isr=null;\n\t\tBufferedReader br=null;\n\t\tOutputStream os=null;\n\t\tPrintWriter pw=null;\n\t\ttry {\n\t\t\t//获取输入流，并读取客户端信息\n\t\t\tis = socket.getInputStream();\n\t\t\tisr = new InputStreamReader(is);\n\t\t\tbr = new BufferedReader(isr);\n\t\t\tString info=null;\n\t\t\twhile((info=br.readLine())!=null){//循环读取客户端的信息\n\t\t\t\tSystem.out.println(\"我是服务器，客户端说：\"+info);\n\t\t\t}\n\t\t\tsocket.shutdownInput();//关闭输入流，半关闭\n\t\t\t//获取输出流，响应客户端的请求\n\t\t\tos = socket.getOutputStream();\n\t\t\tpw = new PrintWriter(os);\n\t\t\tpw.write(\"欢迎您！\");\n\t\t\tpw.flush();//调用flush()方法将缓冲输出\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally{\n\t\t\t//关闭资源\n\t\t\ttry {\n\t\t\t\tif(pw!=null)\n\t\t\t\t\tpw.close();\n\t\t\t\tif(os!=null)\n\t\t\t\t\tos.close();\n\t\t\t\tif(br!=null)\n\t\t\t\t\tbr.close();\n\t\t\t\tif(isr!=null)\n\t\t\t\t\tisr.close();\n\t\t\t\tif(is!=null)\n\t\t\t\t\tis.close();\n\t\t\t\tif(socket!=null)\n\t\t\t\t\tsocket.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n    ```\n\n#####客户端\n\n    ```java\n    //1.创建客户端Socket，指定服务器地址和端口\n    Socket socket=new Socket(\"localhost\", 8888);\n    //2.获取输出流，向服务器端发送信息\n    OutputStream os=socket.getOutputStream();//字节输出流\n    PrintWriter pw=new PrintWriter(os);//将输出流包装为打印流\n    pw.write(\"用户名：alice;密码：789\");\n    pw.flush();\n    socket.shutdownOutput();//关闭输出流\n    //3.获取输入流，并读取服务器端的响应信息\n    InputStream is=socket.getInputStream();\n    BufferedReader br=new BufferedReader(new InputStreamReader(is));\n    String info=null;\n    while((info=br.readLine())!=null){\n        System.out.println(\"我是客户端，服务器说：\"+info);\n    }\n    //4.关闭资源\n    br.close();\n    is.close();\n    pw.close();\n    os.close();\n    socket.close();\n    ```\n\n----\n#### 二、基于UDP的SOcket通信\n1.定义发送信息\n2.创建DatagramPacket，包含将要发送的信息\n3.创建DatagramSocket\n4.发送数据\n##### 服务端：\n- 接收客户端发送的数据\n\n    ```java\n    //1.创建服务器端DatagramSocket，指定端口\n    DatagramSocket socket=new DatagramSocket(8800);\n    //2.创建数据报，用于接收客户端发送的数据\n    byte[] data =new byte[1024];//创建字节数组，指定接收的数据包的大小\n    DatagramPacket packet=new DatagramPacket(data, data.length);\n    //3.接收客户端发送的数据\n    socket.receive(packet);//此方法在接收到数据报之前会一直阻塞\n    //4.读取数据\n    String info=new String(data, 0, packet.getLength());\n    System.out.println(\"我是服务器，客户端说：\"+info);\n    ```\n- 向客户端响应数据\n\n    ```java\n    //1.定义客户端的地址、端口号、数据\n    InetAddress address=packet.getAddress();\n    int port=packet.getPort();\n    byte[] data2=\"欢迎您!\".getBytes();\n    //2.创建数据报，包含响应的数据信息\n    DatagramPacket packet2=new DatagramPacket(data2, data2.length, address, port);\n    //3.响应客户端\n    socket.send(packet2);\n    //4.关闭资源\n    socket.close();\n    ```\n##### 客户端：\n- 向服务器端发送数据\n    ```java\n    //1.定义服务器的地址、端口号、数据\n    InetAddress address=InetAddress.getByName(\"localhost\");\n    int port=8800;\n    byte[] data=\"用户名：admin;密码：123\".getBytes();\n    //2.创建数据报，包含发送的数据信息\n    DatagramPacket packet=new DatagramPacket(data, data.length, address, port);\n    //3.创建DatagramSocket对象\n    DatagramSocket socket=new DatagramSocket();\n    //4.向服务器端发送数据报\n    socket.send(packet);\n    ```\n- 接收服务器端响应的数据\n    ```java\n    //1.创建数据报，用于接收服务器端响应的数据\n    byte[] data2=new byte[1024];\n    DatagramPacket packet2=new DatagramPacket(data2, data2.length);\n    //2.接收服务器响应的数据\n    socket.receive(packet2);\n    //3.读取数据\n    String reply=new String(data2, 0, packet2.getLength());\n    System.out.println(\"我是客户端，服务器说：\"+reply);\n    //4.关闭资源\n    socket.close();\n    ```\n    > 当Socket关闭时，输入输出流也就关闭了\n\n> 参阅[Java Socket应用---通信是这样练成的](https://www.imooc.com/learn/161)","source":"_posts/Java-Socket应用.md","raw":"---\ntitle: java Socket应用¨\ndate: 2018-07-21 15:09:14\ncategories: \"javase笔记\" \ntags:\n    - javase\n---\n####  一、Socket使用时应当注意的一些问题\n-设置超时，从套接字读取信息时，在有数据可供访问之前，读操作会被阻塞，如果此时主机不可达，那么程序将会等待很长时间，并因为系统操作系统的限制最终导致超时\n\n> 调用setSoTimeout方法设置\n\n```JAVA\nSocket s = new Socket(...);\ns.setSoTimeout(10000);\n```\n> 对构造器Socket(String host,int port)，可以先构建一个无连接的套接字，再使用超时\n\n```java\nSocket s = new Socket();\ns.connect(new InetSocketAddress(host,port),timeout);\n````\n\n- 可中断套接字，用SocketChannel类\n- 需要解析因特网地址时，可以用InetAddress类\n- 为多个客户端服务时，可以用多线程解决\n- 半关闭：套接字连接的一段UN可以终止其输出，同时仍可以接受来自另一端的数据，反过来也一样，调用Socket.shutdownInput/Socket.shutdownOutput\n#### 二、获取Web数\n- **URI和URL**\n    - URL是URI的一个特例，URI是个纯粹的语法结构，包含用来点位Web资源的字符串和各种组成功哪部分，URL包含了用于定位Web资源的足够信息，其他无法定位任何数据的URI，称之为URN\n    - 一个URI具有一下语法：`[scema:]schemaSpecficPart[#fragment]`\n    > I.包含schema:部分的URI成为绝对URI，否则为相对URI\n    II.绝对URI的schemaSpecficPart不是以`/`揩油，则称为不透明的，如:`mialto:pinnuli!hostname.com`\n    III.所有绝对的透明URI和所有相对URI都是分层的，如：`http://hostname.com/index.html`，`../../java/net/Socket.html#Socket()`\n    IV.一个分层URI的URI的schemaSpecficPart具有一下结构：[//authority][path][?query],基于服务器的URI，authority具有一下形式:[user-info@]host[:port]\n    - java中URI类的作用\n        - 解析表示福并将它分解成各种不同组成成分\n        - 标识符的相对化和解析相对标识符\n- 使用URLCollection\n    > URLConnection类可以比URL类有更多的控制\n    \n    必须严格按照以下步骤进行操作：\n    1.调用URL类中的openConnection方法得到URLConnection对象：`URLConnection connection = url.openConnection();`\n    2.设置请求属性\n    3.调用connect方法连接远程资源:connection.connect();\n    4.建立连接后，可以查询头信息\n    5.访问资源数据，使用getInputStream方法获取一个输入流\n    > PS:这里的getInputStream/getOutputStream与Socket类的又很大的不同，这里具有很多处理请求和响应消息头时的强大功能\n- 提交表单\n    1.提交数据之前，需要创建一个URLConnection对象\n    ```java\n    URL url = new URL(\"http;??host/script\");\n    URLConnection connection = url.openConnection();\n    ```\n    2.调用setDoOutput方法建立一个输出的连接\n    ```java\n    connection.setRequestMethod(\"POST\");\n    connection.setDoOutput（true);\n    ```\n    3.调用getOutputStream方法获得一个输出流，想服务器发送数据\n    ```java\n    OutputStreamWriter osw = new OutputStreamWriter(connection.getOutputStream(), \"UTF-8\");\n    osw.write(name1 + \"=\" + URLEncoder.eccode(value1,\"UTF-8\") + \"&);\n    osw.write(name2 + \"=\" + URLEncoder.encode(value2,\"UTF-8\"));\n     ```\n    4.关闭输出流\n    ```java\n    osw.flush();\n    osw.close();\n    ```\n    5.调用getInputStream方法对服务器的响应\n    ```java\n    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n    StringBuffer response = new StringBuffer();\n    String temp;\n    while ((temp = br.readLine()) != null) {\n        response.append(temp);\n        response.append(\"\\n\");\n    }\n    ```\n    >I.设置请求方法时，必须使用大写，如POST，使用post无法识别\n    II.如果想要获取错误页面，可以将URLConnection转型为HTTPURLConnection类并调用getErrorStream方法\n    `InputStream err = ((HTTPURLConnection) connection).getErrorStream();`\n\n\n    URL编码需遵循以下规则：\n    >I.保留字符A-Z、a-z、0-9 以及.-*_\n    II.用`+`替换所有空格\n    III.将其他所有字符编码为UTF-8，并将每个字节都编码为%后面紧跟一个两位的十六进制数字\n    比如发送\"New York, NY\"，可以使用New+York%2C+NY\n----\n#### 二、基于TCP的SOcket通信\n1.创建ServerSocket和Socket\n2.打开连接到Socket的输入/输出流\n3.按照协议对Socket进行读/写操作\n4.关闭输入/输出流，关闭Socket\n##### 服务端（多线程响应多个客户端）\n\n    ```java\n    //创建一个服务器端Socket，即ServerSocket，指定绑定的端口，并负责监听此端口\n    ServerSocket serverSocket=new ServerSocket(8888);\n    Socket socket=null;\n    System.out.println(\"***服务器即将启动，等待客户端的连接***\");\n    while(true){\n        //调用accept()方法开始监听，等待客户端的连接\n        socket=serverSocket.accept();\n        //创建一个新的线程\n        ServerThread serverThread=new ServerThread(socket);\n        //启动线程\n        serverThread.start();\n    }\n    ```\n\n> ServerThread类\n\n    ```java\n    public class ServerThread extends Thread {\n\tSocket socket = null;\n\tpublic ServerThread(Socket socket) {\n\t\tthis.socket = socket;\n\t}\n\t\n\t//线程执行的操作，响应客户端的请求\n\tpublic void run(){\n\t\tInputStream is=null;\n\t\tInputStreamReader isr=null;\n\t\tBufferedReader br=null;\n\t\tOutputStream os=null;\n\t\tPrintWriter pw=null;\n\t\ttry {\n\t\t\t//获取输入流，并读取客户端信息\n\t\t\tis = socket.getInputStream();\n\t\t\tisr = new InputStreamReader(is);\n\t\t\tbr = new BufferedReader(isr);\n\t\t\tString info=null;\n\t\t\twhile((info=br.readLine())!=null){//循环读取客户端的信息\n\t\t\t\tSystem.out.println(\"我是服务器，客户端说：\"+info);\n\t\t\t}\n\t\t\tsocket.shutdownInput();//关闭输入流，半关闭\n\t\t\t//获取输出流，响应客户端的请求\n\t\t\tos = socket.getOutputStream();\n\t\t\tpw = new PrintWriter(os);\n\t\t\tpw.write(\"欢迎您！\");\n\t\t\tpw.flush();//调用flush()方法将缓冲输出\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally{\n\t\t\t//关闭资源\n\t\t\ttry {\n\t\t\t\tif(pw!=null)\n\t\t\t\t\tpw.close();\n\t\t\t\tif(os!=null)\n\t\t\t\t\tos.close();\n\t\t\t\tif(br!=null)\n\t\t\t\t\tbr.close();\n\t\t\t\tif(isr!=null)\n\t\t\t\t\tisr.close();\n\t\t\t\tif(is!=null)\n\t\t\t\t\tis.close();\n\t\t\t\tif(socket!=null)\n\t\t\t\t\tsocket.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n    ```\n\n#####客户端\n\n    ```java\n    //1.创建客户端Socket，指定服务器地址和端口\n    Socket socket=new Socket(\"localhost\", 8888);\n    //2.获取输出流，向服务器端发送信息\n    OutputStream os=socket.getOutputStream();//字节输出流\n    PrintWriter pw=new PrintWriter(os);//将输出流包装为打印流\n    pw.write(\"用户名：alice;密码：789\");\n    pw.flush();\n    socket.shutdownOutput();//关闭输出流\n    //3.获取输入流，并读取服务器端的响应信息\n    InputStream is=socket.getInputStream();\n    BufferedReader br=new BufferedReader(new InputStreamReader(is));\n    String info=null;\n    while((info=br.readLine())!=null){\n        System.out.println(\"我是客户端，服务器说：\"+info);\n    }\n    //4.关闭资源\n    br.close();\n    is.close();\n    pw.close();\n    os.close();\n    socket.close();\n    ```\n\n----\n#### 二、基于UDP的SOcket通信\n1.定义发送信息\n2.创建DatagramPacket，包含将要发送的信息\n3.创建DatagramSocket\n4.发送数据\n##### 服务端：\n- 接收客户端发送的数据\n\n    ```java\n    //1.创建服务器端DatagramSocket，指定端口\n    DatagramSocket socket=new DatagramSocket(8800);\n    //2.创建数据报，用于接收客户端发送的数据\n    byte[] data =new byte[1024];//创建字节数组，指定接收的数据包的大小\n    DatagramPacket packet=new DatagramPacket(data, data.length);\n    //3.接收客户端发送的数据\n    socket.receive(packet);//此方法在接收到数据报之前会一直阻塞\n    //4.读取数据\n    String info=new String(data, 0, packet.getLength());\n    System.out.println(\"我是服务器，客户端说：\"+info);\n    ```\n- 向客户端响应数据\n\n    ```java\n    //1.定义客户端的地址、端口号、数据\n    InetAddress address=packet.getAddress();\n    int port=packet.getPort();\n    byte[] data2=\"欢迎您!\".getBytes();\n    //2.创建数据报，包含响应的数据信息\n    DatagramPacket packet2=new DatagramPacket(data2, data2.length, address, port);\n    //3.响应客户端\n    socket.send(packet2);\n    //4.关闭资源\n    socket.close();\n    ```\n##### 客户端：\n- 向服务器端发送数据\n    ```java\n    //1.定义服务器的地址、端口号、数据\n    InetAddress address=InetAddress.getByName(\"localhost\");\n    int port=8800;\n    byte[] data=\"用户名：admin;密码：123\".getBytes();\n    //2.创建数据报，包含发送的数据信息\n    DatagramPacket packet=new DatagramPacket(data, data.length, address, port);\n    //3.创建DatagramSocket对象\n    DatagramSocket socket=new DatagramSocket();\n    //4.向服务器端发送数据报\n    socket.send(packet);\n    ```\n- 接收服务器端响应的数据\n    ```java\n    //1.创建数据报，用于接收服务器端响应的数据\n    byte[] data2=new byte[1024];\n    DatagramPacket packet2=new DatagramPacket(data2, data2.length);\n    //2.接收服务器响应的数据\n    socket.receive(packet2);\n    //3.读取数据\n    String reply=new String(data2, 0, packet2.getLength());\n    System.out.println(\"我是客户端，服务器说：\"+reply);\n    //4.关闭资源\n    socket.close();\n    ```\n    > 当Socket关闭时，输入输出流也就关闭了\n\n> 参阅[Java Socket应用---通信是这样练成的](https://www.imooc.com/learn/161)","slug":"Java-Socket应用","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8oa00068lyjiapge1ep","content":"<h4 id=\"一、Socket使用时应当注意的一些问题\"><a href=\"#一、Socket使用时应当注意的一些问题\" class=\"headerlink\" title=\"一、Socket使用时应当注意的一些问题\"></a>一、Socket使用时应当注意的一些问题</h4><p>-设置超时，从套接字读取信息时，在有数据可供访问之前，读操作会被阻塞，如果此时主机不可达，那么程序将会等待很长时间，并因为系统操作系统的限制最终导致超时</p>\n<blockquote>\n<p>调用setSoTimeout方法设置</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Socket s = <span class=\"keyword\">new</span> Socket(...);</span><br><span class=\"line\">s.setSoTimeout(<span class=\"number\">10000</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对构造器Socket(String host,int port)，可以先构建一个无连接的套接字，再使用超时</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Socket s = <span class=\"keyword\">new</span> Socket();</span><br><span class=\"line\">s.connect(<span class=\"keyword\">new</span> InetSocketAddress(host,port),timeout);</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可中断套接字，用SocketChannel类</li>\n<li>需要解析因特网地址时，可以用InetAddress类</li>\n<li>为多个客户端服务时，可以用多线程解决</li>\n<li>半关闭：套接字连接的一段UN可以终止其输出，同时仍可以接受来自另一端的数据，反过来也一样，调用Socket.shutdownInput/Socket.shutdownOutput<h4 id=\"二、获取Web数\"><a href=\"#二、获取Web数\" class=\"headerlink\" title=\"二、获取Web数\"></a>二、获取Web数</h4></li>\n<li><strong>URI和URL</strong><ul>\n<li>URL是URI的一个特例，URI是个纯粹的语法结构，包含用来点位Web资源的字符串和各种组成功哪部分，URL包含了用于定位Web资源的足够信息，其他无法定位任何数据的URI，称之为URN</li>\n<li>一个URI具有一下语法：<code>[scema:]schemaSpecficPart[#fragment]</code><blockquote>\n<p>I.包含schema:部分的URI成为绝对URI，否则为相对URI<br>II.绝对URI的schemaSpecficPart不是以<code>/</code>揩油，则称为不透明的，如:<code>mialto:pinnuli!hostname.com</code><br>III.所有绝对的透明URI和所有相对URI都是分层的，如：<code>http://hostname.com/index.html</code>，<code>../../java/net/Socket.html#Socket()</code><br>IV.一个分层URI的URI的schemaSpecficPart具有一下结构：[//authority][path][?query],基于服务器的URI，authority具有一下形式:[user-info@]host[:port]</p>\n</blockquote>\n</li>\n<li>java中URI类的作用<ul>\n<li>解析表示福并将它分解成各种不同组成成分</li>\n<li>标识符的相对化和解析相对标识符</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>使用URLCollection</p>\n<blockquote>\n<p>URLConnection类可以比URL类有更多的控制</p>\n</blockquote>\n<p>  必须严格按照以下步骤进行操作：<br>  1.调用URL类中的openConnection方法得到URLConnection对象：<code>URLConnection connection = url.openConnection();</code><br>  2.设置请求属性<br>  3.调用connect方法连接远程资源:connection.connect();<br>  4.建立连接后，可以查询头信息<br>  5.访问资源数据，使用getInputStream方法获取一个输入流</p>\n<blockquote>\n<p>PS:这里的getInputStream/getOutputStream与Socket类的又很大的不同，这里具有很多处理请求和响应消息头时的强大功能</p>\n</blockquote>\n</li>\n<li><p>提交表单<br>  1.提交数据之前，需要创建一个URLConnection对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http;??host/script\"</span>);</span><br><span class=\"line\">URLConnection connection = url.openConnection();</span><br></pre></td></tr></table></figure>\n<p>  2.调用setDoOutput方法建立一个输出的连接</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.setRequestMethod(<span class=\"string\">\"POST\"</span>);</span><br><span class=\"line\">connection.setDoOutput（<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>  3.调用getOutputStream方法获得一个输出流，想服务器发送数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputStreamWriter osw = <span class=\"keyword\">new</span> OutputStreamWriter(connection.getOutputStream(), <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">osw.write(name1 + <span class=\"string\">\"=\"</span> + URLEncoder.eccode(value1,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"&amp;);</span></span><br><span class=\"line\"><span class=\"string\">osw.write(name2 + \"</span>=<span class=\"string\">\" + URLEncoder.encode(value2,\"</span>UTF-<span class=\"number\">8</span><span class=\"string\">\"));</span></span><br></pre></td></tr></table></figure>\n<p>  4.关闭输出流</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osw.flush();</span><br><span class=\"line\">osw.close();</span><br></pre></td></tr></table></figure>\n<p>  5.调用getInputStream方法对服务器的响应</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(connection.getInputStream(), <span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">StringBuffer response = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">String temp;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((temp = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    response.append(temp);</span><br><span class=\"line\">    response.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>I.设置请求方法时，必须使用大写，如POST，使用post无法识别<br>  II.如果想要获取错误页面，可以将URLConnection转型为HTTPURLConnection类并调用getErrorStream方法<br>  <code>InputStream err = ((HTTPURLConnection) connection).getErrorStream();</code></p>\n</blockquote>\n</li>\n</ul>\n<pre><code>URL编码需遵循以下规则：\n&gt;I.保留字符A-Z、a-z、0-9 以及.-*_\nII.用`+`替换所有空格\nIII.将其他所有字符编码为UTF-8，并将每个字节都编码为%后面紧跟一个两位的十六进制数字\n比如发送&quot;New York, NY&quot;，可以使用New+York%2C+NY\n</code></pre><hr>\n<h4 id=\"二、基于TCP的SOcket通信\"><a href=\"#二、基于TCP的SOcket通信\" class=\"headerlink\" title=\"二、基于TCP的SOcket通信\"></a>二、基于TCP的SOcket通信</h4><p>1.创建ServerSocket和Socket<br>2.打开连接到Socket的输入/输出流<br>3.按照协议对Socket进行读/写操作<br>4.关闭输入/输出流，关闭Socket</p>\n<h5 id=\"服务端（多线程响应多个客户端）\"><a href=\"#服务端（多线程响应多个客户端）\" class=\"headerlink\" title=\"服务端（多线程响应多个客户端）\"></a>服务端（多线程响应多个客户端）</h5><pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个服务器端Socket，即ServerSocket，指定绑定的端口，并负责监听此端口</span></span><br><span class=\"line\">ServerSocket serverSocket=<span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8888</span>);</span><br><span class=\"line\">Socket socket=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"***服务器即将启动，等待客户端的连接***\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">    socket=serverSocket.accept();</span><br><span class=\"line\">    <span class=\"comment\">//创建一个新的线程</span></span><br><span class=\"line\">    ServerThread serverThread=<span class=\"keyword\">new</span> ServerThread(socket);</span><br><span class=\"line\">    <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">    serverThread.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>ServerThread类</p>\n</blockquote>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\tSocket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServerThread</span><span class=\"params\">(Socket socket)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.socket = socket;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//线程执行的操作，响应客户端的请求</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tInputStream is=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tInputStreamReader isr=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tBufferedReader br=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tOutputStream os=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPrintWriter pw=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取输入流，并读取客户端信息</span></span><br><span class=\"line\">\t\t\tis = socket.getInputStream();</span><br><span class=\"line\">\t\t\tisr = <span class=\"keyword\">new</span> InputStreamReader(is);</span><br><span class=\"line\">\t\t\tbr = <span class=\"keyword\">new</span> BufferedReader(isr);</span><br><span class=\"line\">\t\t\tString info=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((info=br.readLine())!=<span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//循环读取客户端的信息</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"我是服务器，客户端说：\"</span>+info);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tsocket.shutdownInput();<span class=\"comment\">//关闭输入流，半关闭</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取输出流，响应客户端的请求</span></span><br><span class=\"line\">\t\t\tos = socket.getOutputStream();</span><br><span class=\"line\">\t\t\tpw = <span class=\"keyword\">new</span> PrintWriter(os);</span><br><span class=\"line\">\t\t\tpw.write(<span class=\"string\">\"欢迎您！\"</span>);</span><br><span class=\"line\">\t\t\tpw.flush();<span class=\"comment\">//调用flush()方法将缓冲输出</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(pw!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tpw.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(os!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tos.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(br!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tbr.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isr!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tisr.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(is!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tis.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(socket!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tsocket.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>#####客户端</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.创建客户端Socket，指定服务器地址和端口</span></span><br><span class=\"line\">Socket socket=<span class=\"keyword\">new</span> Socket(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8888</span>);</span><br><span class=\"line\"><span class=\"comment\">//2.获取输出流，向服务器端发送信息</span></span><br><span class=\"line\">OutputStream os=socket.getOutputStream();<span class=\"comment\">//字节输出流</span></span><br><span class=\"line\">PrintWriter pw=<span class=\"keyword\">new</span> PrintWriter(os);<span class=\"comment\">//将输出流包装为打印流</span></span><br><span class=\"line\">pw.write(<span class=\"string\">\"用户名：alice;密码：789\"</span>);</span><br><span class=\"line\">pw.flush();</span><br><span class=\"line\">socket.shutdownOutput();<span class=\"comment\">//关闭输出流</span></span><br><span class=\"line\"><span class=\"comment\">//3.获取输入流，并读取服务器端的响应信息</span></span><br><span class=\"line\">InputStream is=socket.getInputStream();</span><br><span class=\"line\">BufferedReader br=<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(is));</span><br><span class=\"line\">String info=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>((info=br.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"我是客户端，服务器说：\"</span>+info);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4.关闭资源</span></span><br><span class=\"line\">br.close();</span><br><span class=\"line\">is.close();</span><br><span class=\"line\">pw.close();</span><br><span class=\"line\">os.close();</span><br><span class=\"line\">socket.close();</span><br></pre></td></tr></table></figure>\n</code></pre><hr>\n<h4 id=\"二、基于UDP的SOcket通信\"><a href=\"#二、基于UDP的SOcket通信\" class=\"headerlink\" title=\"二、基于UDP的SOcket通信\"></a>二、基于UDP的SOcket通信</h4><p>1.定义发送信息<br>2.创建DatagramPacket，包含将要发送的信息<br>3.创建DatagramSocket<br>4.发送数据</p>\n<h5 id=\"服务端：\"><a href=\"#服务端：\" class=\"headerlink\" title=\"服务端：\"></a>服务端：</h5><ul>\n<li><p>接收客户端发送的数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.创建服务器端DatagramSocket，指定端口</span></span><br><span class=\"line\">DatagramSocket socket=<span class=\"keyword\">new</span> DatagramSocket(<span class=\"number\">8800</span>);</span><br><span class=\"line\"><span class=\"comment\">//2.创建数据报，用于接收客户端发送的数据</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] data =<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];<span class=\"comment\">//创建字节数组，指定接收的数据包的大小</span></span><br><span class=\"line\">DatagramPacket packet=<span class=\"keyword\">new</span> DatagramPacket(data, data.length);</span><br><span class=\"line\"><span class=\"comment\">//3.接收客户端发送的数据</span></span><br><span class=\"line\">socket.receive(packet);<span class=\"comment\">//此方法在接收到数据报之前会一直阻塞</span></span><br><span class=\"line\"><span class=\"comment\">//4.读取数据</span></span><br><span class=\"line\">String info=<span class=\"keyword\">new</span> String(data, <span class=\"number\">0</span>, packet.getLength());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"我是服务器，客户端说：\"</span>+info);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>向客户端响应数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.定义客户端的地址、端口号、数据</span></span><br><span class=\"line\">InetAddress address=packet.getAddress();</span><br><span class=\"line\"><span class=\"keyword\">int</span> port=packet.getPort();</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] data2=<span class=\"string\">\"欢迎您!\"</span>.getBytes();</span><br><span class=\"line\"><span class=\"comment\">//2.创建数据报，包含响应的数据信息</span></span><br><span class=\"line\">DatagramPacket packet2=<span class=\"keyword\">new</span> DatagramPacket(data2, data2.length, address, port);</span><br><span class=\"line\"><span class=\"comment\">//3.响应客户端</span></span><br><span class=\"line\">socket.send(packet2);</span><br><span class=\"line\"><span class=\"comment\">//4.关闭资源</span></span><br><span class=\"line\">socket.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"客户端：\"><a href=\"#客户端：\" class=\"headerlink\" title=\"客户端：\"></a>客户端：</h5><ul>\n<li><p>向服务器端发送数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.定义服务器的地址、端口号、数据</span></span><br><span class=\"line\">InetAddress address=InetAddress.getByName(<span class=\"string\">\"localhost\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> port=<span class=\"number\">8800</span>;</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] data=<span class=\"string\">\"用户名：admin;密码：123\"</span>.getBytes();</span><br><span class=\"line\"><span class=\"comment\">//2.创建数据报，包含发送的数据信息</span></span><br><span class=\"line\">DatagramPacket packet=<span class=\"keyword\">new</span> DatagramPacket(data, data.length, address, port);</span><br><span class=\"line\"><span class=\"comment\">//3.创建DatagramSocket对象</span></span><br><span class=\"line\">DatagramSocket socket=<span class=\"keyword\">new</span> DatagramSocket();</span><br><span class=\"line\"><span class=\"comment\">//4.向服务器端发送数据报</span></span><br><span class=\"line\">socket.send(packet);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接收服务器端响应的数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.创建数据报，用于接收服务器端响应的数据</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] data2=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">DatagramPacket packet2=<span class=\"keyword\">new</span> DatagramPacket(data2, data2.length);</span><br><span class=\"line\"><span class=\"comment\">//2.接收服务器响应的数据</span></span><br><span class=\"line\">socket.receive(packet2);</span><br><span class=\"line\"><span class=\"comment\">//3.读取数据</span></span><br><span class=\"line\">String reply=<span class=\"keyword\">new</span> String(data2, <span class=\"number\">0</span>, packet2.getLength());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"我是客户端，服务器说：\"</span>+reply);</span><br><span class=\"line\"><span class=\"comment\">//4.关闭资源</span></span><br><span class=\"line\">socket.close();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当Socket关闭时，输入输出流也就关闭了</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>参阅<a href=\"https://www.imooc.com/learn/161\" target=\"_blank\" rel=\"noopener\">Java Socket应用—通信是这样练成的</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、Socket使用时应当注意的一些问题\"><a href=\"#一、Socket使用时应当注意的一些问题\" class=\"headerlink\" title=\"一、Socket使用时应当注意的一些问题\"></a>一、Socket使用时应当注意的一些问题</h4><p>-设置超时，从套接字读取信息时，在有数据可供访问之前，读操作会被阻塞，如果此时主机不可达，那么程序将会等待很长时间，并因为系统操作系统的限制最终导致超时</p>\n<blockquote>\n<p>调用setSoTimeout方法设置</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Socket s = <span class=\"keyword\">new</span> Socket(...);</span><br><span class=\"line\">s.setSoTimeout(<span class=\"number\">10000</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对构造器Socket(String host,int port)，可以先构建一个无连接的套接字，再使用超时</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Socket s = <span class=\"keyword\">new</span> Socket();</span><br><span class=\"line\">s.connect(<span class=\"keyword\">new</span> InetSocketAddress(host,port),timeout);</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可中断套接字，用SocketChannel类</li>\n<li>需要解析因特网地址时，可以用InetAddress类</li>\n<li>为多个客户端服务时，可以用多线程解决</li>\n<li>半关闭：套接字连接的一段UN可以终止其输出，同时仍可以接受来自另一端的数据，反过来也一样，调用Socket.shutdownInput/Socket.shutdownOutput<h4 id=\"二、获取Web数\"><a href=\"#二、获取Web数\" class=\"headerlink\" title=\"二、获取Web数\"></a>二、获取Web数</h4></li>\n<li><strong>URI和URL</strong><ul>\n<li>URL是URI的一个特例，URI是个纯粹的语法结构，包含用来点位Web资源的字符串和各种组成功哪部分，URL包含了用于定位Web资源的足够信息，其他无法定位任何数据的URI，称之为URN</li>\n<li>一个URI具有一下语法：<code>[scema:]schemaSpecficPart[#fragment]</code><blockquote>\n<p>I.包含schema:部分的URI成为绝对URI，否则为相对URI<br>II.绝对URI的schemaSpecficPart不是以<code>/</code>揩油，则称为不透明的，如:<code>mialto:pinnuli!hostname.com</code><br>III.所有绝对的透明URI和所有相对URI都是分层的，如：<code>http://hostname.com/index.html</code>，<code>../../java/net/Socket.html#Socket()</code><br>IV.一个分层URI的URI的schemaSpecficPart具有一下结构：[//authority][path][?query],基于服务器的URI，authority具有一下形式:[user-info@]host[:port]</p>\n</blockquote>\n</li>\n<li>java中URI类的作用<ul>\n<li>解析表示福并将它分解成各种不同组成成分</li>\n<li>标识符的相对化和解析相对标识符</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>使用URLCollection</p>\n<blockquote>\n<p>URLConnection类可以比URL类有更多的控制</p>\n</blockquote>\n<p>  必须严格按照以下步骤进行操作：<br>  1.调用URL类中的openConnection方法得到URLConnection对象：<code>URLConnection connection = url.openConnection();</code><br>  2.设置请求属性<br>  3.调用connect方法连接远程资源:connection.connect();<br>  4.建立连接后，可以查询头信息<br>  5.访问资源数据，使用getInputStream方法获取一个输入流</p>\n<blockquote>\n<p>PS:这里的getInputStream/getOutputStream与Socket类的又很大的不同，这里具有很多处理请求和响应消息头时的强大功能</p>\n</blockquote>\n</li>\n<li><p>提交表单<br>  1.提交数据之前，需要创建一个URLConnection对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http;??host/script\"</span>);</span><br><span class=\"line\">URLConnection connection = url.openConnection();</span><br></pre></td></tr></table></figure>\n<p>  2.调用setDoOutput方法建立一个输出的连接</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.setRequestMethod(<span class=\"string\">\"POST\"</span>);</span><br><span class=\"line\">connection.setDoOutput（<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>  3.调用getOutputStream方法获得一个输出流，想服务器发送数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputStreamWriter osw = <span class=\"keyword\">new</span> OutputStreamWriter(connection.getOutputStream(), <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">osw.write(name1 + <span class=\"string\">\"=\"</span> + URLEncoder.eccode(value1,<span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"&amp;);</span></span><br><span class=\"line\"><span class=\"string\">osw.write(name2 + \"</span>=<span class=\"string\">\" + URLEncoder.encode(value2,\"</span>UTF-<span class=\"number\">8</span><span class=\"string\">\"));</span></span><br></pre></td></tr></table></figure>\n<p>  4.关闭输出流</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osw.flush();</span><br><span class=\"line\">osw.close();</span><br></pre></td></tr></table></figure>\n<p>  5.调用getInputStream方法对服务器的响应</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(connection.getInputStream(), <span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">StringBuffer response = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">String temp;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((temp = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    response.append(temp);</span><br><span class=\"line\">    response.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>I.设置请求方法时，必须使用大写，如POST，使用post无法识别<br>  II.如果想要获取错误页面，可以将URLConnection转型为HTTPURLConnection类并调用getErrorStream方法<br>  <code>InputStream err = ((HTTPURLConnection) connection).getErrorStream();</code></p>\n</blockquote>\n</li>\n</ul>\n<pre><code>URL编码需遵循以下规则：\n&gt;I.保留字符A-Z、a-z、0-9 以及.-*_\nII.用`+`替换所有空格\nIII.将其他所有字符编码为UTF-8，并将每个字节都编码为%后面紧跟一个两位的十六进制数字\n比如发送&quot;New York, NY&quot;，可以使用New+York%2C+NY\n</code></pre><hr>\n<h4 id=\"二、基于TCP的SOcket通信\"><a href=\"#二、基于TCP的SOcket通信\" class=\"headerlink\" title=\"二、基于TCP的SOcket通信\"></a>二、基于TCP的SOcket通信</h4><p>1.创建ServerSocket和Socket<br>2.打开连接到Socket的输入/输出流<br>3.按照协议对Socket进行读/写操作<br>4.关闭输入/输出流，关闭Socket</p>\n<h5 id=\"服务端（多线程响应多个客户端）\"><a href=\"#服务端（多线程响应多个客户端）\" class=\"headerlink\" title=\"服务端（多线程响应多个客户端）\"></a>服务端（多线程响应多个客户端）</h5><pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个服务器端Socket，即ServerSocket，指定绑定的端口，并负责监听此端口</span></span><br><span class=\"line\">ServerSocket serverSocket=<span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8888</span>);</span><br><span class=\"line\">Socket socket=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"***服务器即将启动，等待客户端的连接***\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">    socket=serverSocket.accept();</span><br><span class=\"line\">    <span class=\"comment\">//创建一个新的线程</span></span><br><span class=\"line\">    ServerThread serverThread=<span class=\"keyword\">new</span> ServerThread(socket);</span><br><span class=\"line\">    <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">    serverThread.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>ServerThread类</p>\n</blockquote>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\tSocket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServerThread</span><span class=\"params\">(Socket socket)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.socket = socket;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//线程执行的操作，响应客户端的请求</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tInputStream is=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tInputStreamReader isr=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tBufferedReader br=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tOutputStream os=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPrintWriter pw=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取输入流，并读取客户端信息</span></span><br><span class=\"line\">\t\t\tis = socket.getInputStream();</span><br><span class=\"line\">\t\t\tisr = <span class=\"keyword\">new</span> InputStreamReader(is);</span><br><span class=\"line\">\t\t\tbr = <span class=\"keyword\">new</span> BufferedReader(isr);</span><br><span class=\"line\">\t\t\tString info=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>((info=br.readLine())!=<span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//循环读取客户端的信息</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"我是服务器，客户端说：\"</span>+info);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tsocket.shutdownInput();<span class=\"comment\">//关闭输入流，半关闭</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取输出流，响应客户端的请求</span></span><br><span class=\"line\">\t\t\tos = socket.getOutputStream();</span><br><span class=\"line\">\t\t\tpw = <span class=\"keyword\">new</span> PrintWriter(os);</span><br><span class=\"line\">\t\t\tpw.write(<span class=\"string\">\"欢迎您！\"</span>);</span><br><span class=\"line\">\t\t\tpw.flush();<span class=\"comment\">//调用flush()方法将缓冲输出</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(pw!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tpw.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(os!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tos.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(br!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tbr.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isr!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tisr.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(is!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tis.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(socket!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tsocket.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>#####客户端</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.创建客户端Socket，指定服务器地址和端口</span></span><br><span class=\"line\">Socket socket=<span class=\"keyword\">new</span> Socket(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8888</span>);</span><br><span class=\"line\"><span class=\"comment\">//2.获取输出流，向服务器端发送信息</span></span><br><span class=\"line\">OutputStream os=socket.getOutputStream();<span class=\"comment\">//字节输出流</span></span><br><span class=\"line\">PrintWriter pw=<span class=\"keyword\">new</span> PrintWriter(os);<span class=\"comment\">//将输出流包装为打印流</span></span><br><span class=\"line\">pw.write(<span class=\"string\">\"用户名：alice;密码：789\"</span>);</span><br><span class=\"line\">pw.flush();</span><br><span class=\"line\">socket.shutdownOutput();<span class=\"comment\">//关闭输出流</span></span><br><span class=\"line\"><span class=\"comment\">//3.获取输入流，并读取服务器端的响应信息</span></span><br><span class=\"line\">InputStream is=socket.getInputStream();</span><br><span class=\"line\">BufferedReader br=<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(is));</span><br><span class=\"line\">String info=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>((info=br.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"我是客户端，服务器说：\"</span>+info);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4.关闭资源</span></span><br><span class=\"line\">br.close();</span><br><span class=\"line\">is.close();</span><br><span class=\"line\">pw.close();</span><br><span class=\"line\">os.close();</span><br><span class=\"line\">socket.close();</span><br></pre></td></tr></table></figure>\n</code></pre><hr>\n<h4 id=\"二、基于UDP的SOcket通信\"><a href=\"#二、基于UDP的SOcket通信\" class=\"headerlink\" title=\"二、基于UDP的SOcket通信\"></a>二、基于UDP的SOcket通信</h4><p>1.定义发送信息<br>2.创建DatagramPacket，包含将要发送的信息<br>3.创建DatagramSocket<br>4.发送数据</p>\n<h5 id=\"服务端：\"><a href=\"#服务端：\" class=\"headerlink\" title=\"服务端：\"></a>服务端：</h5><ul>\n<li><p>接收客户端发送的数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.创建服务器端DatagramSocket，指定端口</span></span><br><span class=\"line\">DatagramSocket socket=<span class=\"keyword\">new</span> DatagramSocket(<span class=\"number\">8800</span>);</span><br><span class=\"line\"><span class=\"comment\">//2.创建数据报，用于接收客户端发送的数据</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] data =<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];<span class=\"comment\">//创建字节数组，指定接收的数据包的大小</span></span><br><span class=\"line\">DatagramPacket packet=<span class=\"keyword\">new</span> DatagramPacket(data, data.length);</span><br><span class=\"line\"><span class=\"comment\">//3.接收客户端发送的数据</span></span><br><span class=\"line\">socket.receive(packet);<span class=\"comment\">//此方法在接收到数据报之前会一直阻塞</span></span><br><span class=\"line\"><span class=\"comment\">//4.读取数据</span></span><br><span class=\"line\">String info=<span class=\"keyword\">new</span> String(data, <span class=\"number\">0</span>, packet.getLength());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"我是服务器，客户端说：\"</span>+info);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>向客户端响应数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.定义客户端的地址、端口号、数据</span></span><br><span class=\"line\">InetAddress address=packet.getAddress();</span><br><span class=\"line\"><span class=\"keyword\">int</span> port=packet.getPort();</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] data2=<span class=\"string\">\"欢迎您!\"</span>.getBytes();</span><br><span class=\"line\"><span class=\"comment\">//2.创建数据报，包含响应的数据信息</span></span><br><span class=\"line\">DatagramPacket packet2=<span class=\"keyword\">new</span> DatagramPacket(data2, data2.length, address, port);</span><br><span class=\"line\"><span class=\"comment\">//3.响应客户端</span></span><br><span class=\"line\">socket.send(packet2);</span><br><span class=\"line\"><span class=\"comment\">//4.关闭资源</span></span><br><span class=\"line\">socket.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"客户端：\"><a href=\"#客户端：\" class=\"headerlink\" title=\"客户端：\"></a>客户端：</h5><ul>\n<li><p>向服务器端发送数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.定义服务器的地址、端口号、数据</span></span><br><span class=\"line\">InetAddress address=InetAddress.getByName(<span class=\"string\">\"localhost\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> port=<span class=\"number\">8800</span>;</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] data=<span class=\"string\">\"用户名：admin;密码：123\"</span>.getBytes();</span><br><span class=\"line\"><span class=\"comment\">//2.创建数据报，包含发送的数据信息</span></span><br><span class=\"line\">DatagramPacket packet=<span class=\"keyword\">new</span> DatagramPacket(data, data.length, address, port);</span><br><span class=\"line\"><span class=\"comment\">//3.创建DatagramSocket对象</span></span><br><span class=\"line\">DatagramSocket socket=<span class=\"keyword\">new</span> DatagramSocket();</span><br><span class=\"line\"><span class=\"comment\">//4.向服务器端发送数据报</span></span><br><span class=\"line\">socket.send(packet);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接收服务器端响应的数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.创建数据报，用于接收服务器端响应的数据</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] data2=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">DatagramPacket packet2=<span class=\"keyword\">new</span> DatagramPacket(data2, data2.length);</span><br><span class=\"line\"><span class=\"comment\">//2.接收服务器响应的数据</span></span><br><span class=\"line\">socket.receive(packet2);</span><br><span class=\"line\"><span class=\"comment\">//3.读取数据</span></span><br><span class=\"line\">String reply=<span class=\"keyword\">new</span> String(data2, <span class=\"number\">0</span>, packet2.getLength());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"我是客户端，服务器说：\"</span>+reply);</span><br><span class=\"line\"><span class=\"comment\">//4.关闭资源</span></span><br><span class=\"line\">socket.close();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当Socket关闭时，输入输出流也就关闭了</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>参阅<a href=\"https://www.imooc.com/learn/161\" target=\"_blank\" rel=\"noopener\">Java Socket应用—通信是这样练成的</a></p>\n</blockquote>\n"},{"title":"java中的XML","date":"2018-07-20T03:00:21.000Z","_content":"#### HTML与XML的区别\n- HTML对大小写不敏感，XML大小写敏感\n- HTML结束标签可以省略，如`</p>`，XML不能\n- XML只有单个标签而没有结束标签的元素必须以`/`结束\n- XML属性值必须用引号括起来\n- HTML属性可以没有值，XML所有属性必须有值\n\n#### 解析XML文档\n现有以下xml文档books.xml\n```XML\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bookstore>\n\t<book id=\"1\">\n\t\t<name>冰与火之歌</name>\n\t\t<author>乔治马丁</author>\n\t\t<year>2014</year>\n\t\t<price>89</price>\n\t</book>\n\t<book id=\"2\">\n\t\t<name>安徒生童话</name>\n\t\t<year>2004</year>\n\t\t<price>77</price>\n\t\t<language>English</language>\n\t</book>\n</bookstore>\n```\n- DOM解析\n    1、创建一个DocumentBuilder的对象\n    ```java\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    ```\n    2、调用parser方法加载books.xml文件到当前项目下\n    ```java\n    Document document = db.parse(\"books.xml\");\n    ```\n    3、进行解析\n    ```java\n    //获取所有book节点的集合\n\tNodeList bookList = document.getElementsByTagName(\"book\");\n    //?????book??\n    for (int i = 0; i < bookList.getLength(); i++) {\n        //通过 item(i)方法 获取一个book节点，nodelist的索引值从0开始\n        Node book = bookList.item(i);\n\n        //获取book节点的所有属性集合\n        NamedNodeMap attrs = book.getAttributes();\n\n       //前提：已经知道book节点有且只能有1个id属性\n\t   //将book节点进行强制类型转换，转换成Element类型\n        Element book = (Element) bookList.item(i);\n\n        //通过getAttribute(\"id\")方法获取属性值\n        String attrValue = book.getAttribute(\"id\");\n        \n        //解析book节点的子节点\n        NodeList childNodes = book.getChildNodes();\n    }\n    ```\n    > 更多解析方法查看API\n\n- SAX解析\n    1、通过SAXParserFactory的静态newsInstance()方法获取SAXParserFactory实例\n    ```java\n    SAXParserFactory factory = SAXParserFactory.newInstance();\n    ```\n    2、通过SAXParserFactory实例的newSAXParser()方法返回SAXParser实例\n    ```java\n    SAXParser parser = factory.newSAXParser();\n    ```\n    3、创建一个类继承DefaultHandler，重写其中的一些方法进行处理，并创建这个类的实例handler\n    ```java\n    SAXParserHandler handler = new SAXParserHandler();\n\tparser.parse(\"books.xml\", handler);\n    ```\n    > handler类\n    ```java\n    //标识解析开始\n\t@Override\n\tpublic void startDocument() throws SAXException {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.startDocument();\n\t\tSystem.out.println(\"SAX解析开始\");\n\t}\n\n    //标识解析结束\n    @Override\n\tpublic void endDocument() throws SAXException {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.endDocument();\n\t\tSystem.out.println(\"SAX解析结束\");\n\t}\n\n    //解析xml元素\n    @Override\n\tpublic void startElement(String uri, String localName, String qName,\n\t\t\tAttributes attributes) throws SAXException {\n\t\t//调用DefaultHandler类的startElement方法\n\t\tsuper.startElement(uri, localName, qName, attributes);\n\t\tif (qName.equals(\"book\")) {\n\t\t\t//已知book元素下属性的名称，根据属性名称获取属性值\n\t\t\tString value = attributes.getValue(\"id\");\n\t\t\tSystem.out.println(\"book的属性值是：\" + value);\n\n\t\t}else if (!qName.equals(\"name\") && !qName.equals(\"bookstore\")) {\n\t\t\tSystem.out.print(\"节点名是：\" + qName + \"---\");\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void endElement(String uri, String localName, String qName)\n\t\t\tthrows SAXException {\n\t\t//调用DefaultHandler类的endElement方法\n\t\tsuper.endElement(uri, localName, qName);\n\t\t//判断是否针对一本书已经遍历结束\n\t\tif (qName.equals(\"book\")) {\n\t\t\tSystem.out.println(\"结束遍历某一本书的内容\");\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void characters(char[] ch, int start, int length)\n\t\t\tthrows SAXException {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.characters(ch, start, length);\n\t\tvalue = new String(ch, start, length);\n\t\tif (!value.trim().equals(\"\")) {\n\t\t\tSystem.out.println(\"节点值是：\" + value);\n\t\t}\n\t}\n    ```\n- JDOM??\n    1、创建一个SAXBuilder的对象\n    ```\n    SAXBuilder saxBuilder = new SAXBuilder();\n    ```\n    2、创建一个输入流，将xml文件加载到输入流中\n    ```\n    in = new FileInputStream(\"books.xml\");\n    ```\n    3、通过saxBuilder的build方法，将输入流加载到saxBuilder中\n    ```\n    Document document = saxBuilder.build(in);\n    ```\n    4、通过document对象获取xml文件的根节点\n    ```\n    Element rootElement = document.getRootElement();\n    ```\n    5、获取根节点下的子节点的List集合\n    ```\n    List<Element> bookList = rootElement.getChildren();\n    for (Element book : bookList) {\n        // 解析book的属性集合\n        List<Attribute> attrList = book.getAttributes();\n        //知道节点下属性名称时，获取节点值\n        book.getAttributeValue(\"id\");\n    \n        // 对book节点的子节点的节点名以及节点值的遍历\n        List<Element> bookChilds = book.getChildren();\n        for (Element child : bookChilds) {\n            System.out.println(\"????\" + child.getName() + \"----????\"\n                    + child.getValue());\n        }\n    }\n\n    ```\n    > 如果需要设置编码可以按照以下方式设置\n\n    ```java\n    InputStreamReader isr = new InputStreamReader(in, \"UTF-8\");\n\tDocument document = saxBuilder.build(isr);\n    ```\n- DOM4J解析\n    1、通过reader对象的read方法加载books.xml文件,获取docuemnt对象\n    ```java\n    SAXReader reader = new SAXReader();\n    Document document = reader.read(new File(\"src/res/books.xml\"));\n    ```\n    2、通过document对象获取根节点\n    ```java\n    Element bookStore = document.getRootElement();\n    ```\n    3、通过element对象的elementIterator方法获取迭代器\n    ```java\n    Iterator it = bookStore.elementIterator();\n    ```\n    4、遍历迭代器，获取根节点中的信息\n    ```java\n    while (it.hasNext()) {\n        Element book = (Element) it.next();\n        // 获取book的属性名以及 属性值\n        List<Attribute> bookAttrs = book.attributes();\n        for (Attribute attr : bookAttrs) {\n            System.out.println(\"????\" + attr.getName() + \"--????\"\n                    + attr.getValue());\n        }\n        //遍历子节点\n        Iterator itt = book.elementIterator();\n        while (itt.hasNext()) {\n            Element bookChild = (Element) itt.next();\n            System.out.println(\"????\" + bookChild.getName() + \"--????\" + bookChild.getStringValue());\n        }\n    }\n    ```\n- 四种解析方式的区别\n    - DOM:将文件全部加载到内存中，形成树结构，适用于小文件，需要频繁修改时\n        >优点：直观好理解，代码易编写；解析过程树结构保留在内存中，方便修改\n        缺点：当xml文件较大时，对内存消耗比较大，容易影响解析性能并造成内存溢出\n    - SAX:采用事件驱动模式，适用于只需要处理xml中的数据时，不需要频繁修改时\n        >优点：内存消耗小\n        缺点：不易编码；很难同时访问同一个xml中的多处不同数据\n    - JDOM：API大量使用了Collections类\n    - DOM4J：JDOM的一种智能分支，合并了许多超出基本xml文档表示的功能，性能优异，灵活性好，功能强大，十分易用\n----    \n#### 生成XML文档\n- DOM\n    1、创建DocumentBuilder对象\n    ```java\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    ```\n    2、添加节点\n    ```java\n    document.setXmlStandalone(true);\n    Element bookstore = document.createElement(\"bookStore\");\n    //向bookstore根节点中添加子节点book\n    Element book = document.createElement(\"book\");\n    Element name = document.createElement(\"name\");\n    name.setTextContent(\"???\");\n    \n    book.appendChild(name);\n    book.setAttribute(\"id\", \"1\");\n    //将book节点添加到bookstore根节点中\n    bookstore.appendChild(book);\n    //将bookstore节点（已经包含了book）添加到dom树中\n    document.appendChild(bookstore);\n    ```\n    3、生成xml文件\n    ```java\n    TransformerFactory tff = TransformerFactory.newInstance();\n    Transformer tf = tff.newTransformer();\n    //设置文件\n    tf.setOutputProperty(OutputKeys.INDENT, \"yes\");\n    tf.transform(new DOMSource(document),new StreamResult(new File(\"books1.xml\")));\n    ```\n- SAX\n    1、创建一个TransformerFactory类的对象\n    ```java\n    SAXTransformerFactory tff = (SAXTransformerFactory) SAXTransformerFactory.newsInstance();\n    ```\n    2、通过SAXTransformerFactory对象创建一个TransformerHandler对象\n    ```java\n\tTransformerHandler handler = tff.newTransformerHandler();\n    ```\n\t3、通过handler对象创建一个Transformer对象\n    ```java\n    Transformer tr = handler.getTransformer();\n    ```\n    4、通过Transformer对象对生成的xml文件进行设置\n    ```\n    // 设置xml的编码\n    tr.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n    // 设置xml的“是否换行”\n    tr.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\t5、创建一个Result对象\n    ```java\n    File f = new File(\"newbooks.xml\");\n    if (!f.exists()) {\n        f.createNewFile();\n    }\n    ```\n\t6、创建Result对象，并且使其与handler关联\n    ```java\n    Result result = new StreamResult(new FileOutputStream(f));\n    handler.setResult(result);\n    ```\n\t7、利用handler对象进行xml文件内容的编写O\n    ```java\n    // 打开document\n    handler.startDocument();\n    ```\n    8、添加节点属性和节点值\n    ```java\n    AttributesImpl attr = new AttributesImpl();\n\thandler.startElement(\"\", \"\", \"bookstore\", attr);\n    for (Book book : bookList) {\n        attr.clear();\n        attr.addAttribute(\"\", \"\", \"id\", \"\", book.getId());\n        handler.startElement(\"\", \"\", \"book\", attr);\n        // 创建name节点\n        if (book.getName() != null && !book.getName().trim().equals(\"\")) {\n            attr.clear();\n            handler.startElement(\"\", \"\", \"name\", attr);\n            handler.characters(book.getName().toCharArray(), 0, book\n                    .getName().length());\n            handler.endElement(\"\", \"\", \"name\");\n        }\n        handler.endElement(\"\", \"\", \"book\");\n    }\n    handler.endElement(\"\", \"\", \"bookstore\");\n    // 关闭document\n    handler.endDocument();\n    ```\n- JDOM\n    1.生成一个根节点\n    ```java\n    Element rss = new Element(\"rss\");\n    ```\n    2.为节点添加属性\n    ```java\n    rss.setAttribute(\"version\", \"2.0\");\n    ```\n    3.生成一个document对象\n    ```java\n    Document document = new Document(rss);\n    Element channel = new Element(\"channel\");\n    rss.addContent(channel);\n    Element title = new Element(\"title\");\n    title.setText(\"<![CDATA[上海移动互联网产业促进中心正式揭牌 ]]>\");\n    channel.addContent(title);\n    //设置文件编码和换行\n    Format format = Format.getCompactFormat();\n    format.setIndent(\"\");\n    format.setEncoding(\"GBK\");\n    ```\n    4.创建XMLOutputter的对象\n    ```java\n    XMLOutputter outputer = new XMLOutputter(format);\n    ```\n    5.利用outputer将document对象转换成xml文档\n    ```java\n    outputer.output(document, new FileOutputStream(new File(\"rssnews.xml\")));\n    ```\n\n- DOM4J\n    >使用DOM4J生成RSS文件\n\n    1.创建document对象，代表整个xml文档\n    ```java\n    Document document = DocumentHelper.createDocument();\n    ```\n    2.创建根节点rss\n    ```java\n    Element rss = document.addElement(\"rss\");\n    ```\n    3.向rss节点中添加version属性\n    ```java\n    rss.addAttribute(\"version\", \"2.0\");\n    ```\n    4.生成子节点及节点内容\n    ```java\n    Element channel = rss.addElement(\"channel\");\n    Element title = channel.addElement(\"title\");\n    title.setText(\"<![CDATA[上海移动互联网产业促进中心正式揭牌 ]]>\");\n    ```\n    5.设置生成xml的格式\n    ```java\n    OutputFormat format = OutputFormat.createPrettyPrint();\n    format.setEncoding(\"GBK\");\n    ```\n    6.生成xml文件\n    ```java\n    File file = new File(\"rssnews.xml\");\n    XMLWriter writer;\n    writer = new XMLWriter(new FileOutputStream(file), format);\n    //设置是否转义，默认值是true，代表转义\n    writer.setEscapeText(false);\n    writer.write(document);\n    writer.close();\n    ```\n\n----\n#### 验证XML文档\n> 需要指定文档结构时，可以提供一个文档类型定义（DTD）或XML Schema\n- 文档类型定义\n    - 将这些规则纳入XML文档\n        ```XML\n        <?xml version=\"1.0\"?>\n        <!DOCTYPE configuration[\n\n            <!ELEMENT configuration...>\n            ...\n        ]>\n        <configuration>\n        ...\n        </configuration>\n        ```\n        >这些规则被纳入到DOCTYPE声明中，代码块[...]用来限定其接线，比如configuration\n    - SYSTEM声明，将DTD存储在外面\n        ```XML\n        <!DOCTYPE configuration SYSTEM \"config.dtd\">\n        <!DOCTYPE configuration SYSTEM \"http://myserver.com/config.dtd\">\n        ```\n    - 标记PUBLIC标识符\n        ```java\n        class MyEntityResolver implements EntityResolver{\n            public InputSource resolveEntity(String publicId, String systemID){\n                if(publicID.equals(a knowx ID)){\n                    return new InputSource(DTD data):\n                }else{\n                    return null;\n                }\n            }\n        }\n        ```\n    >PS：具体的类型规则看文档，注意在设计DTD时应该要么只包含文本，要么包含其他元素，避免解析混合式（标签和文本的混合）内容时空\n- XML Schema\n    - 声明Schema文件\n    ```XML\n    <?xml version=\"1.0\"?>\n    <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    </project>\n    ```\n    - 使用xsd:表示XSL Schema定义的命名空间\n    <xsd:element name=\"name\" type=\"xsd:string\"/>\n    - ref属性引用Schema中位于别处的定义\n    <xsd:element ref=\"name\"/>\n    <xsd:element name=\"style\" type=StyleType\"/>\n        <xsd:restriction base=\"xsd:string\"/>\n            <xsd:enumeration value=\"PLAIN\"/>\n        </xsd:restriction>\n    </xsd:element>\n#### 使用XPath定位信息\n- 查找下列的username的值，,通过XPath表达式/configuration/database/username\n    ```\n    <configfuration>\n        <database>\n            <username id=\"test\">pinnuli</username>\n            <password>123456</password>\n        </database>\n    </configfuration>\n    ```\n- 用XPathFactory创建一个XPath对象，调用evaluate方法计算XPath表达式\n    ```\n    XPathFactory xpFactory = XPathFactory.newInstance();\n    path = xpfactory.newXPath();\n    String username = path.evaluate(/configuration/database/username\",doc);\n    ```\n>具体的语法看文档\n----\n#### XML的命名空间\n- 使用xmlns给定命名空间\n    ```XML\n    <element xmlns=\"namespaceURI1\">\n        <child xmlns=\"namespaceURI2\">\n            grandchildren\n        </child>\n    </element>\n    ```\n    >这里第一个子元素和孙元素都是第二个命名空间的一部分\n- 使用xmlns:prefix=\"namespaceURI\"定义命名空间和前缀\n    ``` \n    <xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n        <xsd:element name=\"pinnuli\" type=\"haha\"/>\n        ...\n    </xsd:schema>\n    ```\n    >在这里xsd:schema实际上指的是命名空间`http://www.w3.org/2001/XMLSchema`中的`schema`\n- 可以控制解析器对命名空间的处理，默认情况下DOM解析器并非“命名空间感知的”，可以调用DocumentBuilderFactory类的setNamespaceAware()打开命名空间处理特性\n    ```\n    factory.serNamespaceAware(true);\n    ```\n----\n","source":"_posts/Java中的XML.md","raw":"---\ntitle: java中的XML\ndate: 2018-07-20 11:00:21\ncategories: \"javase笔记\" \ntags:\n    - javase\n---\n#### HTML与XML的区别\n- HTML对大小写不敏感，XML大小写敏感\n- HTML结束标签可以省略，如`</p>`，XML不能\n- XML只有单个标签而没有结束标签的元素必须以`/`结束\n- XML属性值必须用引号括起来\n- HTML属性可以没有值，XML所有属性必须有值\n\n#### 解析XML文档\n现有以下xml文档books.xml\n```XML\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bookstore>\n\t<book id=\"1\">\n\t\t<name>冰与火之歌</name>\n\t\t<author>乔治马丁</author>\n\t\t<year>2014</year>\n\t\t<price>89</price>\n\t</book>\n\t<book id=\"2\">\n\t\t<name>安徒生童话</name>\n\t\t<year>2004</year>\n\t\t<price>77</price>\n\t\t<language>English</language>\n\t</book>\n</bookstore>\n```\n- DOM解析\n    1、创建一个DocumentBuilder的对象\n    ```java\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    ```\n    2、调用parser方法加载books.xml文件到当前项目下\n    ```java\n    Document document = db.parse(\"books.xml\");\n    ```\n    3、进行解析\n    ```java\n    //获取所有book节点的集合\n\tNodeList bookList = document.getElementsByTagName(\"book\");\n    //?????book??\n    for (int i = 0; i < bookList.getLength(); i++) {\n        //通过 item(i)方法 获取一个book节点，nodelist的索引值从0开始\n        Node book = bookList.item(i);\n\n        //获取book节点的所有属性集合\n        NamedNodeMap attrs = book.getAttributes();\n\n       //前提：已经知道book节点有且只能有1个id属性\n\t   //将book节点进行强制类型转换，转换成Element类型\n        Element book = (Element) bookList.item(i);\n\n        //通过getAttribute(\"id\")方法获取属性值\n        String attrValue = book.getAttribute(\"id\");\n        \n        //解析book节点的子节点\n        NodeList childNodes = book.getChildNodes();\n    }\n    ```\n    > 更多解析方法查看API\n\n- SAX解析\n    1、通过SAXParserFactory的静态newsInstance()方法获取SAXParserFactory实例\n    ```java\n    SAXParserFactory factory = SAXParserFactory.newInstance();\n    ```\n    2、通过SAXParserFactory实例的newSAXParser()方法返回SAXParser实例\n    ```java\n    SAXParser parser = factory.newSAXParser();\n    ```\n    3、创建一个类继承DefaultHandler，重写其中的一些方法进行处理，并创建这个类的实例handler\n    ```java\n    SAXParserHandler handler = new SAXParserHandler();\n\tparser.parse(\"books.xml\", handler);\n    ```\n    > handler类\n    ```java\n    //标识解析开始\n\t@Override\n\tpublic void startDocument() throws SAXException {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.startDocument();\n\t\tSystem.out.println(\"SAX解析开始\");\n\t}\n\n    //标识解析结束\n    @Override\n\tpublic void endDocument() throws SAXException {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.endDocument();\n\t\tSystem.out.println(\"SAX解析结束\");\n\t}\n\n    //解析xml元素\n    @Override\n\tpublic void startElement(String uri, String localName, String qName,\n\t\t\tAttributes attributes) throws SAXException {\n\t\t//调用DefaultHandler类的startElement方法\n\t\tsuper.startElement(uri, localName, qName, attributes);\n\t\tif (qName.equals(\"book\")) {\n\t\t\t//已知book元素下属性的名称，根据属性名称获取属性值\n\t\t\tString value = attributes.getValue(\"id\");\n\t\t\tSystem.out.println(\"book的属性值是：\" + value);\n\n\t\t}else if (!qName.equals(\"name\") && !qName.equals(\"bookstore\")) {\n\t\t\tSystem.out.print(\"节点名是：\" + qName + \"---\");\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void endElement(String uri, String localName, String qName)\n\t\t\tthrows SAXException {\n\t\t//调用DefaultHandler类的endElement方法\n\t\tsuper.endElement(uri, localName, qName);\n\t\t//判断是否针对一本书已经遍历结束\n\t\tif (qName.equals(\"book\")) {\n\t\t\tSystem.out.println(\"结束遍历某一本书的内容\");\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void characters(char[] ch, int start, int length)\n\t\t\tthrows SAXException {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.characters(ch, start, length);\n\t\tvalue = new String(ch, start, length);\n\t\tif (!value.trim().equals(\"\")) {\n\t\t\tSystem.out.println(\"节点值是：\" + value);\n\t\t}\n\t}\n    ```\n- JDOM??\n    1、创建一个SAXBuilder的对象\n    ```\n    SAXBuilder saxBuilder = new SAXBuilder();\n    ```\n    2、创建一个输入流，将xml文件加载到输入流中\n    ```\n    in = new FileInputStream(\"books.xml\");\n    ```\n    3、通过saxBuilder的build方法，将输入流加载到saxBuilder中\n    ```\n    Document document = saxBuilder.build(in);\n    ```\n    4、通过document对象获取xml文件的根节点\n    ```\n    Element rootElement = document.getRootElement();\n    ```\n    5、获取根节点下的子节点的List集合\n    ```\n    List<Element> bookList = rootElement.getChildren();\n    for (Element book : bookList) {\n        // 解析book的属性集合\n        List<Attribute> attrList = book.getAttributes();\n        //知道节点下属性名称时，获取节点值\n        book.getAttributeValue(\"id\");\n    \n        // 对book节点的子节点的节点名以及节点值的遍历\n        List<Element> bookChilds = book.getChildren();\n        for (Element child : bookChilds) {\n            System.out.println(\"????\" + child.getName() + \"----????\"\n                    + child.getValue());\n        }\n    }\n\n    ```\n    > 如果需要设置编码可以按照以下方式设置\n\n    ```java\n    InputStreamReader isr = new InputStreamReader(in, \"UTF-8\");\n\tDocument document = saxBuilder.build(isr);\n    ```\n- DOM4J解析\n    1、通过reader对象的read方法加载books.xml文件,获取docuemnt对象\n    ```java\n    SAXReader reader = new SAXReader();\n    Document document = reader.read(new File(\"src/res/books.xml\"));\n    ```\n    2、通过document对象获取根节点\n    ```java\n    Element bookStore = document.getRootElement();\n    ```\n    3、通过element对象的elementIterator方法获取迭代器\n    ```java\n    Iterator it = bookStore.elementIterator();\n    ```\n    4、遍历迭代器，获取根节点中的信息\n    ```java\n    while (it.hasNext()) {\n        Element book = (Element) it.next();\n        // 获取book的属性名以及 属性值\n        List<Attribute> bookAttrs = book.attributes();\n        for (Attribute attr : bookAttrs) {\n            System.out.println(\"????\" + attr.getName() + \"--????\"\n                    + attr.getValue());\n        }\n        //遍历子节点\n        Iterator itt = book.elementIterator();\n        while (itt.hasNext()) {\n            Element bookChild = (Element) itt.next();\n            System.out.println(\"????\" + bookChild.getName() + \"--????\" + bookChild.getStringValue());\n        }\n    }\n    ```\n- 四种解析方式的区别\n    - DOM:将文件全部加载到内存中，形成树结构，适用于小文件，需要频繁修改时\n        >优点：直观好理解，代码易编写；解析过程树结构保留在内存中，方便修改\n        缺点：当xml文件较大时，对内存消耗比较大，容易影响解析性能并造成内存溢出\n    - SAX:采用事件驱动模式，适用于只需要处理xml中的数据时，不需要频繁修改时\n        >优点：内存消耗小\n        缺点：不易编码；很难同时访问同一个xml中的多处不同数据\n    - JDOM：API大量使用了Collections类\n    - DOM4J：JDOM的一种智能分支，合并了许多超出基本xml文档表示的功能，性能优异，灵活性好，功能强大，十分易用\n----    \n#### 生成XML文档\n- DOM\n    1、创建DocumentBuilder对象\n    ```java\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    ```\n    2、添加节点\n    ```java\n    document.setXmlStandalone(true);\n    Element bookstore = document.createElement(\"bookStore\");\n    //向bookstore根节点中添加子节点book\n    Element book = document.createElement(\"book\");\n    Element name = document.createElement(\"name\");\n    name.setTextContent(\"???\");\n    \n    book.appendChild(name);\n    book.setAttribute(\"id\", \"1\");\n    //将book节点添加到bookstore根节点中\n    bookstore.appendChild(book);\n    //将bookstore节点（已经包含了book）添加到dom树中\n    document.appendChild(bookstore);\n    ```\n    3、生成xml文件\n    ```java\n    TransformerFactory tff = TransformerFactory.newInstance();\n    Transformer tf = tff.newTransformer();\n    //设置文件\n    tf.setOutputProperty(OutputKeys.INDENT, \"yes\");\n    tf.transform(new DOMSource(document),new StreamResult(new File(\"books1.xml\")));\n    ```\n- SAX\n    1、创建一个TransformerFactory类的对象\n    ```java\n    SAXTransformerFactory tff = (SAXTransformerFactory) SAXTransformerFactory.newsInstance();\n    ```\n    2、通过SAXTransformerFactory对象创建一个TransformerHandler对象\n    ```java\n\tTransformerHandler handler = tff.newTransformerHandler();\n    ```\n\t3、通过handler对象创建一个Transformer对象\n    ```java\n    Transformer tr = handler.getTransformer();\n    ```\n    4、通过Transformer对象对生成的xml文件进行设置\n    ```\n    // 设置xml的编码\n    tr.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n    // 设置xml的“是否换行”\n    tr.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\t5、创建一个Result对象\n    ```java\n    File f = new File(\"newbooks.xml\");\n    if (!f.exists()) {\n        f.createNewFile();\n    }\n    ```\n\t6、创建Result对象，并且使其与handler关联\n    ```java\n    Result result = new StreamResult(new FileOutputStream(f));\n    handler.setResult(result);\n    ```\n\t7、利用handler对象进行xml文件内容的编写O\n    ```java\n    // 打开document\n    handler.startDocument();\n    ```\n    8、添加节点属性和节点值\n    ```java\n    AttributesImpl attr = new AttributesImpl();\n\thandler.startElement(\"\", \"\", \"bookstore\", attr);\n    for (Book book : bookList) {\n        attr.clear();\n        attr.addAttribute(\"\", \"\", \"id\", \"\", book.getId());\n        handler.startElement(\"\", \"\", \"book\", attr);\n        // 创建name节点\n        if (book.getName() != null && !book.getName().trim().equals(\"\")) {\n            attr.clear();\n            handler.startElement(\"\", \"\", \"name\", attr);\n            handler.characters(book.getName().toCharArray(), 0, book\n                    .getName().length());\n            handler.endElement(\"\", \"\", \"name\");\n        }\n        handler.endElement(\"\", \"\", \"book\");\n    }\n    handler.endElement(\"\", \"\", \"bookstore\");\n    // 关闭document\n    handler.endDocument();\n    ```\n- JDOM\n    1.生成一个根节点\n    ```java\n    Element rss = new Element(\"rss\");\n    ```\n    2.为节点添加属性\n    ```java\n    rss.setAttribute(\"version\", \"2.0\");\n    ```\n    3.生成一个document对象\n    ```java\n    Document document = new Document(rss);\n    Element channel = new Element(\"channel\");\n    rss.addContent(channel);\n    Element title = new Element(\"title\");\n    title.setText(\"<![CDATA[上海移动互联网产业促进中心正式揭牌 ]]>\");\n    channel.addContent(title);\n    //设置文件编码和换行\n    Format format = Format.getCompactFormat();\n    format.setIndent(\"\");\n    format.setEncoding(\"GBK\");\n    ```\n    4.创建XMLOutputter的对象\n    ```java\n    XMLOutputter outputer = new XMLOutputter(format);\n    ```\n    5.利用outputer将document对象转换成xml文档\n    ```java\n    outputer.output(document, new FileOutputStream(new File(\"rssnews.xml\")));\n    ```\n\n- DOM4J\n    >使用DOM4J生成RSS文件\n\n    1.创建document对象，代表整个xml文档\n    ```java\n    Document document = DocumentHelper.createDocument();\n    ```\n    2.创建根节点rss\n    ```java\n    Element rss = document.addElement(\"rss\");\n    ```\n    3.向rss节点中添加version属性\n    ```java\n    rss.addAttribute(\"version\", \"2.0\");\n    ```\n    4.生成子节点及节点内容\n    ```java\n    Element channel = rss.addElement(\"channel\");\n    Element title = channel.addElement(\"title\");\n    title.setText(\"<![CDATA[上海移动互联网产业促进中心正式揭牌 ]]>\");\n    ```\n    5.设置生成xml的格式\n    ```java\n    OutputFormat format = OutputFormat.createPrettyPrint();\n    format.setEncoding(\"GBK\");\n    ```\n    6.生成xml文件\n    ```java\n    File file = new File(\"rssnews.xml\");\n    XMLWriter writer;\n    writer = new XMLWriter(new FileOutputStream(file), format);\n    //设置是否转义，默认值是true，代表转义\n    writer.setEscapeText(false);\n    writer.write(document);\n    writer.close();\n    ```\n\n----\n#### 验证XML文档\n> 需要指定文档结构时，可以提供一个文档类型定义（DTD）或XML Schema\n- 文档类型定义\n    - 将这些规则纳入XML文档\n        ```XML\n        <?xml version=\"1.0\"?>\n        <!DOCTYPE configuration[\n\n            <!ELEMENT configuration...>\n            ...\n        ]>\n        <configuration>\n        ...\n        </configuration>\n        ```\n        >这些规则被纳入到DOCTYPE声明中，代码块[...]用来限定其接线，比如configuration\n    - SYSTEM声明，将DTD存储在外面\n        ```XML\n        <!DOCTYPE configuration SYSTEM \"config.dtd\">\n        <!DOCTYPE configuration SYSTEM \"http://myserver.com/config.dtd\">\n        ```\n    - 标记PUBLIC标识符\n        ```java\n        class MyEntityResolver implements EntityResolver{\n            public InputSource resolveEntity(String publicId, String systemID){\n                if(publicID.equals(a knowx ID)){\n                    return new InputSource(DTD data):\n                }else{\n                    return null;\n                }\n            }\n        }\n        ```\n    >PS：具体的类型规则看文档，注意在设计DTD时应该要么只包含文本，要么包含其他元素，避免解析混合式（标签和文本的混合）内容时空\n- XML Schema\n    - 声明Schema文件\n    ```XML\n    <?xml version=\"1.0\"?>\n    <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    </project>\n    ```\n    - 使用xsd:表示XSL Schema定义的命名空间\n    <xsd:element name=\"name\" type=\"xsd:string\"/>\n    - ref属性引用Schema中位于别处的定义\n    <xsd:element ref=\"name\"/>\n    <xsd:element name=\"style\" type=StyleType\"/>\n        <xsd:restriction base=\"xsd:string\"/>\n            <xsd:enumeration value=\"PLAIN\"/>\n        </xsd:restriction>\n    </xsd:element>\n#### 使用XPath定位信息\n- 查找下列的username的值，,通过XPath表达式/configuration/database/username\n    ```\n    <configfuration>\n        <database>\n            <username id=\"test\">pinnuli</username>\n            <password>123456</password>\n        </database>\n    </configfuration>\n    ```\n- 用XPathFactory创建一个XPath对象，调用evaluate方法计算XPath表达式\n    ```\n    XPathFactory xpFactory = XPathFactory.newInstance();\n    path = xpfactory.newXPath();\n    String username = path.evaluate(/configuration/database/username\",doc);\n    ```\n>具体的语法看文档\n----\n#### XML的命名空间\n- 使用xmlns给定命名空间\n    ```XML\n    <element xmlns=\"namespaceURI1\">\n        <child xmlns=\"namespaceURI2\">\n            grandchildren\n        </child>\n    </element>\n    ```\n    >这里第一个子元素和孙元素都是第二个命名空间的一部分\n- 使用xmlns:prefix=\"namespaceURI\"定义命名空间和前缀\n    ``` \n    <xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n        <xsd:element name=\"pinnuli\" type=\"haha\"/>\n        ...\n    </xsd:schema>\n    ```\n    >在这里xsd:schema实际上指的是命名空间`http://www.w3.org/2001/XMLSchema`中的`schema`\n- 可以控制解析器对命名空间的处理，默认情况下DOM解析器并非“命名空间感知的”，可以调用DocumentBuilderFactory类的setNamespaceAware()打开命名空间处理特性\n    ```\n    factory.serNamespaceAware(true);\n    ```\n----\n","slug":"Java中的XML","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8ob00088lyjrz24e0si","content":"<h4 id=\"HTML与XML的区别\"><a href=\"#HTML与XML的区别\" class=\"headerlink\" title=\"HTML与XML的区别\"></a>HTML与XML的区别</h4><ul>\n<li>HTML对大小写不敏感，XML大小写敏感</li>\n<li>HTML结束标签可以省略，如<code>&lt;/p&gt;</code>，XML不能</li>\n<li>XML只有单个标签而没有结束标签的元素必须以<code>/</code>结束</li>\n<li>XML属性值必须用引号括起来</li>\n<li>HTML属性可以没有值，XML所有属性必须有值</li>\n</ul>\n<h4 id=\"解析XML文档\"><a href=\"#解析XML文档\" class=\"headerlink\" title=\"解析XML文档\"></a>解析XML文档</h4><p>现有以下xml文档books.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bookstore</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">id</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>冰与火之歌<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">author</span>&gt;</span>乔治马丁<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2014<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>89<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>安徒生童话<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2004<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>77<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">language</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">language</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>DOM解析<br>  1、创建一个DocumentBuilder的对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">DocumentBuilder db = dbf.newDocumentBuilder();</span><br></pre></td></tr></table></figure>\n<p>  2、调用parser方法加载books.xml文件到当前项目下</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document document = db.parse(<span class=\"string\">\"books.xml\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  3、进行解析</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//获取所有book节点的集合</span></span><br><span class=\"line\">NodeList bookList = document.getElementsByTagName(<span class=\"string\">\"book\"</span>);</span><br><span class=\"line\">   <span class=\"comment\">//?????book??</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bookList.getLength(); i++) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//通过 item(i)方法 获取一个book节点，nodelist的索引值从0开始</span></span><br><span class=\"line\">       Node book = bookList.item(i);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//获取book节点的所有属性集合</span></span><br><span class=\"line\">       NamedNodeMap attrs = book.getAttributes();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//前提：已经知道book节点有且只能有1个id属性</span></span><br><span class=\"line\">   <span class=\"comment\">//将book节点进行强制类型转换，转换成Element类型</span></span><br><span class=\"line\">       Element book = (Element) bookList.item(i);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//通过getAttribute(\"id\")方法获取属性值</span></span><br><span class=\"line\">       String attrValue = book.getAttribute(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//解析book节点的子节点</span></span><br><span class=\"line\">       NodeList childNodes = book.getChildNodes();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多解析方法查看API</p>\n</blockquote>\n</li>\n<li><p>SAX解析<br>  1、通过SAXParserFactory的静态newsInstance()方法获取SAXParserFactory实例</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXParserFactory factory = SAXParserFactory.newInstance();</span><br></pre></td></tr></table></figure>\n<p>  2、通过SAXParserFactory实例的newSAXParser()方法返回SAXParser实例</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXParser parser = factory.newSAXParser();</span><br></pre></td></tr></table></figure>\n<p>  3、创建一个类继承DefaultHandler，重写其中的一些方法进行处理，并创建这个类的实例handler</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   SAXParserHandler handler = <span class=\"keyword\">new</span> SAXParserHandler();</span><br><span class=\"line\">parser.parse(<span class=\"string\">\"books.xml\"</span>, handler);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>handler类</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//标识解析开始</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.startDocument();</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"SAX解析开始\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//标识解析结束</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">endDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.endDocument();</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"SAX解析结束\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//解析xml元素</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startElement</span><span class=\"params\">(String uri, String localName, String qName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tAttributes attributes)</span> <span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//调用DefaultHandler类的startElement方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.startElement(uri, localName, qName, attributes);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (qName.equals(<span class=\"string\">\"book\"</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//已知book元素下属性的名称，根据属性名称获取属性值</span></span><br><span class=\"line\">\t\tString value = attributes.getValue(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"book的属性值是：\"</span> + value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!qName.equals(<span class=\"string\">\"name\"</span>) &amp;&amp; !qName.equals(<span class=\"string\">\"bookstore\"</span>)) &#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"节点名是：\"</span> + qName + <span class=\"string\">\"---\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">endElement</span><span class=\"params\">(String uri, String localName, String qName)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//调用DefaultHandler类的endElement方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.endElement(uri, localName, qName);</span><br><span class=\"line\">\t<span class=\"comment\">//判断是否针对一本书已经遍历结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (qName.equals(<span class=\"string\">\"book\"</span>)) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"结束遍历某一本书的内容\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">characters</span><span class=\"params\">(<span class=\"keyword\">char</span>[] ch, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.characters(ch, start, length);</span><br><span class=\"line\">\tvalue = <span class=\"keyword\">new</span> String(ch, start, length);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!value.trim().equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"节点值是：\"</span> + value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>JDOM??<br>  1、创建一个SAXBuilder的对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXBuilder saxBuilder = new SAXBuilder();</span><br></pre></td></tr></table></figure>\n<p>  2、创建一个输入流，将xml文件加载到输入流中</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in = new FileInputStream(&quot;books.xml&quot;);</span><br></pre></td></tr></table></figure>\n<p>  3、通过saxBuilder的build方法，将输入流加载到saxBuilder中</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document document = saxBuilder.build(in);</span><br></pre></td></tr></table></figure>\n<p>  4、通过document对象获取xml文件的根节点</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element rootElement = document.getRootElement();</span><br></pre></td></tr></table></figure>\n<p>  5、获取根节点下的子节点的List集合</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Element&gt; bookList = rootElement.getChildren();</span><br><span class=\"line\">for (Element book : bookList) &#123;</span><br><span class=\"line\">    // 解析book的属性集合</span><br><span class=\"line\">    List&lt;Attribute&gt; attrList = book.getAttributes();</span><br><span class=\"line\">    //知道节点下属性名称时，获取节点值</span><br><span class=\"line\">    book.getAttributeValue(&quot;id&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对book节点的子节点的节点名以及节点值的遍历</span><br><span class=\"line\">    List&lt;Element&gt; bookChilds = book.getChildren();</span><br><span class=\"line\">    for (Element child : bookChilds) &#123;</span><br><span class=\"line\">        System.out.println(&quot;????&quot; + child.getName() + &quot;----????&quot;</span><br><span class=\"line\">                + child.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果需要设置编码可以按照以下方式设置</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   InputStreamReader isr = <span class=\"keyword\">new</span> InputStreamReader(in, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">Document document = saxBuilder.build(isr);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM4J解析<br>  1、通过reader对象的read方法加载books.xml文件,获取docuemnt对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXReader reader = <span class=\"keyword\">new</span> SAXReader();</span><br><span class=\"line\">Document document = reader.read(<span class=\"keyword\">new</span> File(<span class=\"string\">\"src/res/books.xml\"</span>));</span><br></pre></td></tr></table></figure>\n<p>  2、通过document对象获取根节点</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element bookStore = document.getRootElement();</span><br></pre></td></tr></table></figure>\n<p>  3、通过element对象的elementIterator方法获取迭代器</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator it = bookStore.elementIterator();</span><br></pre></td></tr></table></figure>\n<p>  4、遍历迭代器，获取根节点中的信息</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Element book = (Element) it.next();</span><br><span class=\"line\">    <span class=\"comment\">// 获取book的属性名以及 属性值</span></span><br><span class=\"line\">    List&lt;Attribute&gt; bookAttrs = book.attributes();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Attribute attr : bookAttrs) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"????\"</span> + attr.getName() + <span class=\"string\">\"--????\"</span></span><br><span class=\"line\">                + attr.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//遍历子节点</span></span><br><span class=\"line\">    Iterator itt = book.elementIterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (itt.hasNext()) &#123;</span><br><span class=\"line\">        Element bookChild = (Element) itt.next();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"????\"</span> + bookChild.getName() + <span class=\"string\">\"--????\"</span> + bookChild.getStringValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>四种解析方式的区别</p>\n<ul>\n<li>DOM:将文件全部加载到内存中，形成树结构，适用于小文件，需要频繁修改时<blockquote>\n<p>优点：直观好理解，代码易编写；解析过程树结构保留在内存中，方便修改<br>  缺点：当xml文件较大时，对内存消耗比较大，容易影响解析性能并造成内存溢出</p>\n</blockquote>\n</li>\n<li>SAX:采用事件驱动模式，适用于只需要处理xml中的数据时，不需要频繁修改时<blockquote>\n<p>优点：内存消耗小<br>  缺点：不易编码；很难同时访问同一个xml中的多处不同数据</p>\n</blockquote>\n</li>\n<li>JDOM：API大量使用了Collections类</li>\n<li>DOM4J：JDOM的一种智能分支，合并了许多超出基本xml文档表示的功能，性能优异，灵活性好，功能强大，十分易用</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"生成XML文档\"><a href=\"#生成XML文档\" class=\"headerlink\" title=\"生成XML文档\"></a>生成XML文档</h4><ul>\n<li><p>DOM<br>  1、创建DocumentBuilder对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">DocumentBuilder db = dbf.newDocumentBuilder();</span><br></pre></td></tr></table></figure>\n<p>  2、添加节点</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.setXmlStandalone(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">Element bookstore = document.createElement(<span class=\"string\">\"bookStore\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//向bookstore根节点中添加子节点book</span></span><br><span class=\"line\">Element book = document.createElement(<span class=\"string\">\"book\"</span>);</span><br><span class=\"line\">Element name = document.createElement(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">name.setTextContent(<span class=\"string\">\"???\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">book.appendChild(name);</span><br><span class=\"line\">book.setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//将book节点添加到bookstore根节点中</span></span><br><span class=\"line\">bookstore.appendChild(book);</span><br><span class=\"line\"><span class=\"comment\">//将bookstore节点（已经包含了book）添加到dom树中</span></span><br><span class=\"line\">document.appendChild(bookstore);</span><br></pre></td></tr></table></figure>\n<p>  3、生成xml文件</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TransformerFactory tff = TransformerFactory.newInstance();</span><br><span class=\"line\">Transformer tf = tff.newTransformer();</span><br><span class=\"line\"><span class=\"comment\">//设置文件</span></span><br><span class=\"line\">tf.setOutputProperty(OutputKeys.INDENT, <span class=\"string\">\"yes\"</span>);</span><br><span class=\"line\">tf.transform(<span class=\"keyword\">new</span> DOMSource(document),<span class=\"keyword\">new</span> StreamResult(<span class=\"keyword\">new</span> File(<span class=\"string\">\"books1.xml\"</span>)));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SAX<br>  1、创建一个TransformerFactory类的对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXTransformerFactory tff = (SAXTransformerFactory) SAXTransformerFactory.newsInstance();</span><br></pre></td></tr></table></figure>\n<p>  2、通过SAXTransformerFactory对象创建一个TransformerHandler对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TransformerHandler handler = tff.newTransformerHandler();</span><br></pre></td></tr></table></figure>\n<p>  3、通过handler对象创建一个Transformer对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transformer tr = handler.getTransformer();</span><br></pre></td></tr></table></figure>\n<p>  4、通过Transformer对象对生成的xml文件进行设置</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   // 设置xml的编码</span><br><span class=\"line\">   tr.setOutputProperty(OutputKeys.ENCODING, &quot;UTF-8&quot;);</span><br><span class=\"line\">   // 设置xml的“是否换行”</span><br><span class=\"line\">   tr.setOutputProperty(OutputKeys.INDENT, &quot;yes&quot;);</span><br><span class=\"line\">5、创建一个Result对象</span><br><span class=\"line\">   ```java</span><br><span class=\"line\">   File f = new File(&quot;newbooks.xml&quot;);</span><br><span class=\"line\">   if (!f.exists()) &#123;</span><br><span class=\"line\">       f.createNewFile();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>  6、创建Result对象，并且使其与handler关联</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result result = <span class=\"keyword\">new</span> StreamResult(<span class=\"keyword\">new</span> FileOutputStream(f));</span><br><span class=\"line\">handler.setResult(result);</span><br></pre></td></tr></table></figure>\n<p>  7、利用handler对象进行xml文件内容的编写O</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打开document</span></span><br><span class=\"line\">handler.startDocument();</span><br></pre></td></tr></table></figure>\n<p>  8、添加节点属性和节点值</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   AttributesImpl attr = <span class=\"keyword\">new</span> AttributesImpl();</span><br><span class=\"line\">handler.startElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bookstore\"</span>, attr);</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Book book : bookList) &#123;</span><br><span class=\"line\">       attr.clear();</span><br><span class=\"line\">       attr.addAttribute(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"id\"</span>, <span class=\"string\">\"\"</span>, book.getId());</span><br><span class=\"line\">       handler.startElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"book\"</span>, attr);</span><br><span class=\"line\">       <span class=\"comment\">// 创建name节点</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (book.getName() != <span class=\"keyword\">null</span> &amp;&amp; !book.getName().trim().equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">           attr.clear();</span><br><span class=\"line\">           handler.startElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"name\"</span>, attr);</span><br><span class=\"line\">           handler.characters(book.getName().toCharArray(), <span class=\"number\">0</span>, book</span><br><span class=\"line\">                   .getName().length());</span><br><span class=\"line\">           handler.endElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       handler.endElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"book\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   handler.endElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bookstore\"</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 关闭document</span></span><br><span class=\"line\">   handler.endDocument();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JDOM<br>  1.生成一个根节点</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element rss = <span class=\"keyword\">new</span> Element(<span class=\"string\">\"rss\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  2.为节点添加属性</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rss.setAttribute(<span class=\"string\">\"version\"</span>, <span class=\"string\">\"2.0\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  3.生成一个document对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document document = <span class=\"keyword\">new</span> Document(rss);</span><br><span class=\"line\">Element channel = <span class=\"keyword\">new</span> Element(<span class=\"string\">\"channel\"</span>);</span><br><span class=\"line\">rss.addContent(channel);</span><br><span class=\"line\">Element title = <span class=\"keyword\">new</span> Element(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">title.setText(<span class=\"string\">\"&lt;![CDATA[上海移动互联网产业促进中心正式揭牌 ]]&gt;\"</span>);</span><br><span class=\"line\">channel.addContent(title);</span><br><span class=\"line\"><span class=\"comment\">//设置文件编码和换行</span></span><br><span class=\"line\">Format format = Format.getCompactFormat();</span><br><span class=\"line\">format.setIndent(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">format.setEncoding(<span class=\"string\">\"GBK\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  4.创建XMLOutputter的对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLOutputter outputer = <span class=\"keyword\">new</span> XMLOutputter(format);</span><br></pre></td></tr></table></figure>\n<p>  5.利用outputer将document对象转换成xml文档</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputer.output(document, <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(<span class=\"string\">\"rssnews.xml\"</span>)));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM4J</p>\n<blockquote>\n<p>使用DOM4J生成RSS文件</p>\n</blockquote>\n<p>  1.创建document对象，代表整个xml文档</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document document = DocumentHelper.createDocument();</span><br></pre></td></tr></table></figure>\n<p>  2.创建根节点rss</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element rss = document.addElement(<span class=\"string\">\"rss\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  3.向rss节点中添加version属性</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rss.addAttribute(<span class=\"string\">\"version\"</span>, <span class=\"string\">\"2.0\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  4.生成子节点及节点内容</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element channel = rss.addElement(<span class=\"string\">\"channel\"</span>);</span><br><span class=\"line\">Element title = channel.addElement(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">title.setText(<span class=\"string\">\"&lt;![CDATA[上海移动互联网产业促进中心正式揭牌 ]]&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  5.设置生成xml的格式</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputFormat format = OutputFormat.createPrettyPrint();</span><br><span class=\"line\">format.setEncoding(<span class=\"string\">\"GBK\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  6.生成xml文件</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"rssnews.xml\"</span>);</span><br><span class=\"line\">XMLWriter writer;</span><br><span class=\"line\">writer = <span class=\"keyword\">new</span> XMLWriter(<span class=\"keyword\">new</span> FileOutputStream(file), format);</span><br><span class=\"line\"><span class=\"comment\">//设置是否转义，默认值是true，代表转义</span></span><br><span class=\"line\">writer.setEscapeText(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">writer.write(document);</span><br><span class=\"line\">writer.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"验证XML文档\"><a href=\"#验证XML文档\" class=\"headerlink\" title=\"验证XML文档\"></a>验证XML文档</h4><blockquote>\n<p>需要指定文档结构时，可以提供一个文档类型定义（DTD）或XML Schema</p>\n<ul>\n<li>文档类型定义<ul>\n<li>将这些规则纳入XML文档  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\"?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration[</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">    &lt;!ELEMENT configuration...&gt;</span></span><br><span class=\"line\"><span class=\"meta\">    ...</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>这些规则被纳入到DOCTYPE声明中，代码块[…]用来限定其接线，比如configuration</p>\n<pre><code>- SYSTEM声明，将DTD存储在外面\n    <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration SYSTEM \"config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration SYSTEM \"http://myserver.com/config.dtd\"&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<pre><code>- 标记PUBLIC标识符\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEntityResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">EntityResolver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> InputSource <span class=\"title\">resolveEntity</span><span class=\"params\">(String publicId, String systemID)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(publicID.equals(a knowx ID))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InputSource(DTD data):</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n&gt;PS：具体的类型规则看文档，注意在设计DTD时应该要么只包含文本，要么包含其他元素，避免解析混合式（标签和文本的混合）内容时空\n</code></pre><ul>\n<li><p>XML Schema</p>\n<ul>\n<li><p>声明Schema文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用xsd:表示XSL Schema定义的命名空间</p>\n<xsd:element name=\"name\" type=\"xsd:string\"></xsd:element></li>\n<li>ref属性引用Schema中位于别处的定义<br><xsd:element ref=\"name\"><br>&lt;xsd:element name=”style” type=StyleType”/&gt;<br>  <xsd:restriction base=\"xsd:string\"><pre><code>&lt;xsd:enumeration value=&quot;PLAIN&quot;/&gt;\n</code></pre>  </xsd:restriction><br></xsd:element><h4 id=\"使用XPath定位信息\"><a href=\"#使用XPath定位信息\" class=\"headerlink\" title=\"使用XPath定位信息\"></a>使用XPath定位信息</h4></li>\n</ul>\n</li>\n<li><p>查找下列的username的值，,通过XPath表达式/configuration/database/username</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configfuration&gt;</span><br><span class=\"line\">    &lt;database&gt;</span><br><span class=\"line\">        &lt;username id=&quot;test&quot;&gt;pinnuli&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;123456&lt;/password&gt;</span><br><span class=\"line\">    &lt;/database&gt;</span><br><span class=\"line\">&lt;/configfuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用XPathFactory创建一个XPath对象，调用evaluate方法计算XPath表达式</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XPathFactory xpFactory = XPathFactory.newInstance();</span><br><span class=\"line\">path = xpfactory.newXPath();</span><br><span class=\"line\">String username = path.evaluate(/configuration/database/username&quot;,doc);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"gt-具体的语法看文档\"><a href=\"#gt-具体的语法看文档\" class=\"headerlink\" title=\"&gt;具体的语法看文档\"></a>&gt;具体的语法看文档</h2><h4 id=\"XML的命名空间\"><a href=\"#XML的命名空间\" class=\"headerlink\" title=\"XML的命名空间\"></a>XML的命名空间</h4><ul>\n<li><p>使用xmlns给定命名空间</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">element</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"namespaceURI1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"namespaceURI2\"</span>&gt;</span></span><br><span class=\"line\">        grandchildren</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">element</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里第一个子元素和孙元素都是第二个命名空间的一部分</p>\n</blockquote>\n</li>\n<li><p>使用xmlns:prefix=”namespaceURI”定义命名空间和前缀</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;</span><br><span class=\"line\">    &lt;xsd:element name=&quot;pinnuli&quot; type=&quot;haha&quot;/&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/xsd:schema&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这里xsd:schema实际上指的是命名空间<code>http://www.w3.org/2001/XMLSchema</code>中的<code>schema</code></p>\n</blockquote>\n</li>\n<li>可以控制解析器对命名空间的处理，默认情况下DOM解析器并非“命名空间感知的”，可以调用DocumentBuilderFactory类的setNamespaceAware()打开命名空间处理特性  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">factory.serNamespaceAware(true);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"HTML与XML的区别\"><a href=\"#HTML与XML的区别\" class=\"headerlink\" title=\"HTML与XML的区别\"></a>HTML与XML的区别</h4><ul>\n<li>HTML对大小写不敏感，XML大小写敏感</li>\n<li>HTML结束标签可以省略，如<code>&lt;/p&gt;</code>，XML不能</li>\n<li>XML只有单个标签而没有结束标签的元素必须以<code>/</code>结束</li>\n<li>XML属性值必须用引号括起来</li>\n<li>HTML属性可以没有值，XML所有属性必须有值</li>\n</ul>\n<h4 id=\"解析XML文档\"><a href=\"#解析XML文档\" class=\"headerlink\" title=\"解析XML文档\"></a>解析XML文档</h4><p>现有以下xml文档books.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bookstore</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">id</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>冰与火之歌<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">author</span>&gt;</span>乔治马丁<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2014<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>89<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>安徒生童话<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2004<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>77<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">language</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">language</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>DOM解析<br>  1、创建一个DocumentBuilder的对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">DocumentBuilder db = dbf.newDocumentBuilder();</span><br></pre></td></tr></table></figure>\n<p>  2、调用parser方法加载books.xml文件到当前项目下</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document document = db.parse(<span class=\"string\">\"books.xml\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  3、进行解析</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//获取所有book节点的集合</span></span><br><span class=\"line\">NodeList bookList = document.getElementsByTagName(<span class=\"string\">\"book\"</span>);</span><br><span class=\"line\">   <span class=\"comment\">//?????book??</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bookList.getLength(); i++) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//通过 item(i)方法 获取一个book节点，nodelist的索引值从0开始</span></span><br><span class=\"line\">       Node book = bookList.item(i);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//获取book节点的所有属性集合</span></span><br><span class=\"line\">       NamedNodeMap attrs = book.getAttributes();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//前提：已经知道book节点有且只能有1个id属性</span></span><br><span class=\"line\">   <span class=\"comment\">//将book节点进行强制类型转换，转换成Element类型</span></span><br><span class=\"line\">       Element book = (Element) bookList.item(i);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//通过getAttribute(\"id\")方法获取属性值</span></span><br><span class=\"line\">       String attrValue = book.getAttribute(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//解析book节点的子节点</span></span><br><span class=\"line\">       NodeList childNodes = book.getChildNodes();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多解析方法查看API</p>\n</blockquote>\n</li>\n<li><p>SAX解析<br>  1、通过SAXParserFactory的静态newsInstance()方法获取SAXParserFactory实例</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXParserFactory factory = SAXParserFactory.newInstance();</span><br></pre></td></tr></table></figure>\n<p>  2、通过SAXParserFactory实例的newSAXParser()方法返回SAXParser实例</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXParser parser = factory.newSAXParser();</span><br></pre></td></tr></table></figure>\n<p>  3、创建一个类继承DefaultHandler，重写其中的一些方法进行处理，并创建这个类的实例handler</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   SAXParserHandler handler = <span class=\"keyword\">new</span> SAXParserHandler();</span><br><span class=\"line\">parser.parse(<span class=\"string\">\"books.xml\"</span>, handler);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>handler类</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//标识解析开始</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.startDocument();</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"SAX解析开始\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//标识解析结束</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">endDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.endDocument();</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"SAX解析结束\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//解析xml元素</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startElement</span><span class=\"params\">(String uri, String localName, String qName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tAttributes attributes)</span> <span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//调用DefaultHandler类的startElement方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.startElement(uri, localName, qName, attributes);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (qName.equals(<span class=\"string\">\"book\"</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//已知book元素下属性的名称，根据属性名称获取属性值</span></span><br><span class=\"line\">\t\tString value = attributes.getValue(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"book的属性值是：\"</span> + value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!qName.equals(<span class=\"string\">\"name\"</span>) &amp;&amp; !qName.equals(<span class=\"string\">\"bookstore\"</span>)) &#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"节点名是：\"</span> + qName + <span class=\"string\">\"---\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">endElement</span><span class=\"params\">(String uri, String localName, String qName)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//调用DefaultHandler类的endElement方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.endElement(uri, localName, qName);</span><br><span class=\"line\">\t<span class=\"comment\">//判断是否针对一本书已经遍历结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (qName.equals(<span class=\"string\">\"book\"</span>)) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"结束遍历某一本书的内容\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">characters</span><span class=\"params\">(<span class=\"keyword\">char</span>[] ch, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> SAXException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.characters(ch, start, length);</span><br><span class=\"line\">\tvalue = <span class=\"keyword\">new</span> String(ch, start, length);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!value.trim().equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"节点值是：\"</span> + value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>JDOM??<br>  1、创建一个SAXBuilder的对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXBuilder saxBuilder = new SAXBuilder();</span><br></pre></td></tr></table></figure>\n<p>  2、创建一个输入流，将xml文件加载到输入流中</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in = new FileInputStream(&quot;books.xml&quot;);</span><br></pre></td></tr></table></figure>\n<p>  3、通过saxBuilder的build方法，将输入流加载到saxBuilder中</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document document = saxBuilder.build(in);</span><br></pre></td></tr></table></figure>\n<p>  4、通过document对象获取xml文件的根节点</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element rootElement = document.getRootElement();</span><br></pre></td></tr></table></figure>\n<p>  5、获取根节点下的子节点的List集合</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Element&gt; bookList = rootElement.getChildren();</span><br><span class=\"line\">for (Element book : bookList) &#123;</span><br><span class=\"line\">    // 解析book的属性集合</span><br><span class=\"line\">    List&lt;Attribute&gt; attrList = book.getAttributes();</span><br><span class=\"line\">    //知道节点下属性名称时，获取节点值</span><br><span class=\"line\">    book.getAttributeValue(&quot;id&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对book节点的子节点的节点名以及节点值的遍历</span><br><span class=\"line\">    List&lt;Element&gt; bookChilds = book.getChildren();</span><br><span class=\"line\">    for (Element child : bookChilds) &#123;</span><br><span class=\"line\">        System.out.println(&quot;????&quot; + child.getName() + &quot;----????&quot;</span><br><span class=\"line\">                + child.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果需要设置编码可以按照以下方式设置</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   InputStreamReader isr = <span class=\"keyword\">new</span> InputStreamReader(in, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">Document document = saxBuilder.build(isr);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM4J解析<br>  1、通过reader对象的read方法加载books.xml文件,获取docuemnt对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXReader reader = <span class=\"keyword\">new</span> SAXReader();</span><br><span class=\"line\">Document document = reader.read(<span class=\"keyword\">new</span> File(<span class=\"string\">\"src/res/books.xml\"</span>));</span><br></pre></td></tr></table></figure>\n<p>  2、通过document对象获取根节点</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element bookStore = document.getRootElement();</span><br></pre></td></tr></table></figure>\n<p>  3、通过element对象的elementIterator方法获取迭代器</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator it = bookStore.elementIterator();</span><br></pre></td></tr></table></figure>\n<p>  4、遍历迭代器，获取根节点中的信息</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Element book = (Element) it.next();</span><br><span class=\"line\">    <span class=\"comment\">// 获取book的属性名以及 属性值</span></span><br><span class=\"line\">    List&lt;Attribute&gt; bookAttrs = book.attributes();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Attribute attr : bookAttrs) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"????\"</span> + attr.getName() + <span class=\"string\">\"--????\"</span></span><br><span class=\"line\">                + attr.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//遍历子节点</span></span><br><span class=\"line\">    Iterator itt = book.elementIterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (itt.hasNext()) &#123;</span><br><span class=\"line\">        Element bookChild = (Element) itt.next();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"????\"</span> + bookChild.getName() + <span class=\"string\">\"--????\"</span> + bookChild.getStringValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>四种解析方式的区别</p>\n<ul>\n<li>DOM:将文件全部加载到内存中，形成树结构，适用于小文件，需要频繁修改时<blockquote>\n<p>优点：直观好理解，代码易编写；解析过程树结构保留在内存中，方便修改<br>  缺点：当xml文件较大时，对内存消耗比较大，容易影响解析性能并造成内存溢出</p>\n</blockquote>\n</li>\n<li>SAX:采用事件驱动模式，适用于只需要处理xml中的数据时，不需要频繁修改时<blockquote>\n<p>优点：内存消耗小<br>  缺点：不易编码；很难同时访问同一个xml中的多处不同数据</p>\n</blockquote>\n</li>\n<li>JDOM：API大量使用了Collections类</li>\n<li>DOM4J：JDOM的一种智能分支，合并了许多超出基本xml文档表示的功能，性能优异，灵活性好，功能强大，十分易用</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"生成XML文档\"><a href=\"#生成XML文档\" class=\"headerlink\" title=\"生成XML文档\"></a>生成XML文档</h4><ul>\n<li><p>DOM<br>  1、创建DocumentBuilder对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">DocumentBuilder db = dbf.newDocumentBuilder();</span><br></pre></td></tr></table></figure>\n<p>  2、添加节点</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.setXmlStandalone(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">Element bookstore = document.createElement(<span class=\"string\">\"bookStore\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//向bookstore根节点中添加子节点book</span></span><br><span class=\"line\">Element book = document.createElement(<span class=\"string\">\"book\"</span>);</span><br><span class=\"line\">Element name = document.createElement(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">name.setTextContent(<span class=\"string\">\"???\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">book.appendChild(name);</span><br><span class=\"line\">book.setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//将book节点添加到bookstore根节点中</span></span><br><span class=\"line\">bookstore.appendChild(book);</span><br><span class=\"line\"><span class=\"comment\">//将bookstore节点（已经包含了book）添加到dom树中</span></span><br><span class=\"line\">document.appendChild(bookstore);</span><br></pre></td></tr></table></figure>\n<p>  3、生成xml文件</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TransformerFactory tff = TransformerFactory.newInstance();</span><br><span class=\"line\">Transformer tf = tff.newTransformer();</span><br><span class=\"line\"><span class=\"comment\">//设置文件</span></span><br><span class=\"line\">tf.setOutputProperty(OutputKeys.INDENT, <span class=\"string\">\"yes\"</span>);</span><br><span class=\"line\">tf.transform(<span class=\"keyword\">new</span> DOMSource(document),<span class=\"keyword\">new</span> StreamResult(<span class=\"keyword\">new</span> File(<span class=\"string\">\"books1.xml\"</span>)));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SAX<br>  1、创建一个TransformerFactory类的对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAXTransformerFactory tff = (SAXTransformerFactory) SAXTransformerFactory.newsInstance();</span><br></pre></td></tr></table></figure>\n<p>  2、通过SAXTransformerFactory对象创建一个TransformerHandler对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TransformerHandler handler = tff.newTransformerHandler();</span><br></pre></td></tr></table></figure>\n<p>  3、通过handler对象创建一个Transformer对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transformer tr = handler.getTransformer();</span><br></pre></td></tr></table></figure>\n<p>  4、通过Transformer对象对生成的xml文件进行设置</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   // 设置xml的编码</span><br><span class=\"line\">   tr.setOutputProperty(OutputKeys.ENCODING, &quot;UTF-8&quot;);</span><br><span class=\"line\">   // 设置xml的“是否换行”</span><br><span class=\"line\">   tr.setOutputProperty(OutputKeys.INDENT, &quot;yes&quot;);</span><br><span class=\"line\">5、创建一个Result对象</span><br><span class=\"line\">   ```java</span><br><span class=\"line\">   File f = new File(&quot;newbooks.xml&quot;);</span><br><span class=\"line\">   if (!f.exists()) &#123;</span><br><span class=\"line\">       f.createNewFile();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>  6、创建Result对象，并且使其与handler关联</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result result = <span class=\"keyword\">new</span> StreamResult(<span class=\"keyword\">new</span> FileOutputStream(f));</span><br><span class=\"line\">handler.setResult(result);</span><br></pre></td></tr></table></figure>\n<p>  7、利用handler对象进行xml文件内容的编写O</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打开document</span></span><br><span class=\"line\">handler.startDocument();</span><br></pre></td></tr></table></figure>\n<p>  8、添加节点属性和节点值</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   AttributesImpl attr = <span class=\"keyword\">new</span> AttributesImpl();</span><br><span class=\"line\">handler.startElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bookstore\"</span>, attr);</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Book book : bookList) &#123;</span><br><span class=\"line\">       attr.clear();</span><br><span class=\"line\">       attr.addAttribute(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"id\"</span>, <span class=\"string\">\"\"</span>, book.getId());</span><br><span class=\"line\">       handler.startElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"book\"</span>, attr);</span><br><span class=\"line\">       <span class=\"comment\">// 创建name节点</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (book.getName() != <span class=\"keyword\">null</span> &amp;&amp; !book.getName().trim().equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">           attr.clear();</span><br><span class=\"line\">           handler.startElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"name\"</span>, attr);</span><br><span class=\"line\">           handler.characters(book.getName().toCharArray(), <span class=\"number\">0</span>, book</span><br><span class=\"line\">                   .getName().length());</span><br><span class=\"line\">           handler.endElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       handler.endElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"book\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   handler.endElement(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"bookstore\"</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 关闭document</span></span><br><span class=\"line\">   handler.endDocument();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JDOM<br>  1.生成一个根节点</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element rss = <span class=\"keyword\">new</span> Element(<span class=\"string\">\"rss\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  2.为节点添加属性</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rss.setAttribute(<span class=\"string\">\"version\"</span>, <span class=\"string\">\"2.0\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  3.生成一个document对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document document = <span class=\"keyword\">new</span> Document(rss);</span><br><span class=\"line\">Element channel = <span class=\"keyword\">new</span> Element(<span class=\"string\">\"channel\"</span>);</span><br><span class=\"line\">rss.addContent(channel);</span><br><span class=\"line\">Element title = <span class=\"keyword\">new</span> Element(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">title.setText(<span class=\"string\">\"&lt;![CDATA[上海移动互联网产业促进中心正式揭牌 ]]&gt;\"</span>);</span><br><span class=\"line\">channel.addContent(title);</span><br><span class=\"line\"><span class=\"comment\">//设置文件编码和换行</span></span><br><span class=\"line\">Format format = Format.getCompactFormat();</span><br><span class=\"line\">format.setIndent(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">format.setEncoding(<span class=\"string\">\"GBK\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  4.创建XMLOutputter的对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLOutputter outputer = <span class=\"keyword\">new</span> XMLOutputter(format);</span><br></pre></td></tr></table></figure>\n<p>  5.利用outputer将document对象转换成xml文档</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputer.output(document, <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(<span class=\"string\">\"rssnews.xml\"</span>)));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DOM4J</p>\n<blockquote>\n<p>使用DOM4J生成RSS文件</p>\n</blockquote>\n<p>  1.创建document对象，代表整个xml文档</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document document = DocumentHelper.createDocument();</span><br></pre></td></tr></table></figure>\n<p>  2.创建根节点rss</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element rss = document.addElement(<span class=\"string\">\"rss\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  3.向rss节点中添加version属性</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rss.addAttribute(<span class=\"string\">\"version\"</span>, <span class=\"string\">\"2.0\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  4.生成子节点及节点内容</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element channel = rss.addElement(<span class=\"string\">\"channel\"</span>);</span><br><span class=\"line\">Element title = channel.addElement(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">title.setText(<span class=\"string\">\"&lt;![CDATA[上海移动互联网产业促进中心正式揭牌 ]]&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  5.设置生成xml的格式</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputFormat format = OutputFormat.createPrettyPrint();</span><br><span class=\"line\">format.setEncoding(<span class=\"string\">\"GBK\"</span>);</span><br></pre></td></tr></table></figure>\n<p>  6.生成xml文件</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"rssnews.xml\"</span>);</span><br><span class=\"line\">XMLWriter writer;</span><br><span class=\"line\">writer = <span class=\"keyword\">new</span> XMLWriter(<span class=\"keyword\">new</span> FileOutputStream(file), format);</span><br><span class=\"line\"><span class=\"comment\">//设置是否转义，默认值是true，代表转义</span></span><br><span class=\"line\">writer.setEscapeText(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">writer.write(document);</span><br><span class=\"line\">writer.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"验证XML文档\"><a href=\"#验证XML文档\" class=\"headerlink\" title=\"验证XML文档\"></a>验证XML文档</h4><blockquote>\n<p>需要指定文档结构时，可以提供一个文档类型定义（DTD）或XML Schema</p>\n<ul>\n<li>文档类型定义<ul>\n<li>将这些规则纳入XML文档  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\"?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration[</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">    &lt;!ELEMENT configuration...&gt;</span></span><br><span class=\"line\"><span class=\"meta\">    ...</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>这些规则被纳入到DOCTYPE声明中，代码块[…]用来限定其接线，比如configuration</p>\n<pre><code>- SYSTEM声明，将DTD存储在外面\n    <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration SYSTEM \"config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration SYSTEM \"http://myserver.com/config.dtd\"&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<pre><code>- 标记PUBLIC标识符\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEntityResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">EntityResolver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> InputSource <span class=\"title\">resolveEntity</span><span class=\"params\">(String publicId, String systemID)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(publicID.equals(a knowx ID))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InputSource(DTD data):</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n&gt;PS：具体的类型规则看文档，注意在设计DTD时应该要么只包含文本，要么包含其他元素，避免解析混合式（标签和文本的混合）内容时空\n</code></pre><ul>\n<li><p>XML Schema</p>\n<ul>\n<li><p>声明Schema文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用xsd:表示XSL Schema定义的命名空间</p>\n<xsd:element name=\"name\" type=\"xsd:string\"></xsd:element></li>\n<li>ref属性引用Schema中位于别处的定义<br><xsd:element ref=\"name\"><br>&lt;xsd:element name=”style” type=StyleType”/&gt;<br>  <xsd:restriction base=\"xsd:string\"><pre><code>&lt;xsd:enumeration value=&quot;PLAIN&quot;/&gt;\n</code></pre>  </xsd:restriction><br></xsd:element><h4 id=\"使用XPath定位信息\"><a href=\"#使用XPath定位信息\" class=\"headerlink\" title=\"使用XPath定位信息\"></a>使用XPath定位信息</h4></li>\n</ul>\n</li>\n<li><p>查找下列的username的值，,通过XPath表达式/configuration/database/username</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configfuration&gt;</span><br><span class=\"line\">    &lt;database&gt;</span><br><span class=\"line\">        &lt;username id=&quot;test&quot;&gt;pinnuli&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;123456&lt;/password&gt;</span><br><span class=\"line\">    &lt;/database&gt;</span><br><span class=\"line\">&lt;/configfuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用XPathFactory创建一个XPath对象，调用evaluate方法计算XPath表达式</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XPathFactory xpFactory = XPathFactory.newInstance();</span><br><span class=\"line\">path = xpfactory.newXPath();</span><br><span class=\"line\">String username = path.evaluate(/configuration/database/username&quot;,doc);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"gt-具体的语法看文档\"><a href=\"#gt-具体的语法看文档\" class=\"headerlink\" title=\"&gt;具体的语法看文档\"></a>&gt;具体的语法看文档</h2><h4 id=\"XML的命名空间\"><a href=\"#XML的命名空间\" class=\"headerlink\" title=\"XML的命名空间\"></a>XML的命名空间</h4><ul>\n<li><p>使用xmlns给定命名空间</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">element</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"namespaceURI1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"namespaceURI2\"</span>&gt;</span></span><br><span class=\"line\">        grandchildren</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">element</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里第一个子元素和孙元素都是第二个命名空间的一部分</p>\n</blockquote>\n</li>\n<li><p>使用xmlns:prefix=”namespaceURI”定义命名空间和前缀</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;</span><br><span class=\"line\">    &lt;xsd:element name=&quot;pinnuli&quot; type=&quot;haha&quot;/&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/xsd:schema&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这里xsd:schema实际上指的是命名空间<code>http://www.w3.org/2001/XMLSchema</code>中的<code>schema</code></p>\n</blockquote>\n</li>\n<li>可以控制解析器对命名空间的处理，默认情况下DOM解析器并非“命名空间感知的”，可以调用DocumentBuilderFactory类的setNamespaceAware()打开命名空间处理特性  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">factory.serNamespaceAware(true);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n"},{"title":"centos7 Let's Encrypt用Certbot获取Https证书 部署nginx","date":"2018-07-15T09:24:42.000Z","_content":"\n- 检查nginx下是否有`--with-http_stub_status_module` 和`--with-http_ssl_module`两个模块，安装之后再重新编译\n\t> nginx -V\n\n- 用http克隆github上的certbot\n\t>git clone https://github.com/certbot/certbot /opt/certbot-master\n\t\n- 安装所有依赖\n \t>/opt/certbot-master/letsencrypt-auto --help\n- 关闭nginx，检出80端口，443端口是否有开启\n\t>nginx -s stop\n\t                                    \n\t>firewall-cmd --query-port=80/tcp\n\n\t>firewall-cmd --query-port=443/tcp\n\t\n\t没有的话就开启\n\t>firewall-cmd --permanent --zone=public --add-port=80/tcp\n- 获取证书\n\t>/opt/certbot-master/letsencrypt-auto --nginx -d www.pinnuli.com \n- 配置nginx（也可选择自动配置)\n\t\n\t>     user nginx;\n\t>     worker_processes auto;\n\t>     error_log /var/log/nginx/error.log;\n\t>     pid /run/nginx.pid;\n\t> \n\t>     include /usr/share/nginx/modules/*.conf;\n\t> \n\t>     events {\n\t>         worker_connections 1024;\n\t>     }\n\t> \n\t>     http {\n\t>         log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" \n\t>                      '$status $body_bytes_sent \"$http_referer\" '\n\t>                       '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\t> \n\t>         access_log  /var/log/nginx/access.log  main;\n\t> \n\t>         sendfile            on;\n\t>         tcp_nopush          on;\n\t>         tcp_nodelay         on;\n\t>         keepalive_timeout   65;\n\t>         types_hash_max_size 2048;\n\t> \n\t>         include             /etc/nginx/mime.types;\n\t>         default_type        application/octet-stream;\n\t> \n\t>         include /etc/nginx/conf.d/*.conf;\n\t> \n\t> \t      server {\n\t>             listen       80 default_server;\n\t>             listen       [::]:80 default_server;\n\t>             server_name  _;\n\t>             root        /var/www/pinnuli.github.io;\n\t> \n\t>             include /etc/nginx/default.d/*.conf;\n\t>   \n\t>             location / {\n\t>             }\n\t> \n\t>             error_page 404 /404.html;\n\t>             location = /40x.html {\n\t>             }\n\t> \n\t>             error_page 500 502 503 504 /50x.html;\n\t>             location = /50x.html {\n\t>             }\n\t>         }\n\t> \t    server {\n\t>             server_name www.pinnuli.com; # managed by Certbot\n\t>             root        /var/www/pinnuli.github.io;\n\t>             include /etc/nginx/default.d/*.conf;\n\t>             location / {\n\t>        \t  }\n\t>             error_page 404 /404.html;\n\t>         \t  location = /40x.html {\n\t>             }\n\t>             error_page 500 502 503 504 /50x.html;\n\t>             location = /50x.html {\n\t>             }\n\t>     \t      listen [::]:443 ssl ipv6only=on; # managed by Certbot\n\t>     \t      listen 443 ssl; # managed by Certbot\n\t>     \t      ssl_certificate /etc/letsencrypt/live/www.pinnuli.com/fullchain.pem; # managed by Certbot\n\t>     \t      ssl_certificate_key /etc/letsencrypt/live/www.pinnuli.com/privkey.pem; # managed by Certbot\n\t>     \t      include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n\t>     \t      ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\t>     }\n\n- 设置自动更新（待更新）","source":"_posts/centos7-Let-s-Encrypt用Certbot获取Https证书-部署nginx.md","raw":"---\ntitle: centos7 Let's Encrypt用Certbot获取Https证书 部署nginx\ndate: 2018-07-15 17:24:42\ncategories: \"服务器\" \ntags:\n\t- centos\n\t- nginx\n---\n\n- 检查nginx下是否有`--with-http_stub_status_module` 和`--with-http_ssl_module`两个模块，安装之后再重新编译\n\t> nginx -V\n\n- 用http克隆github上的certbot\n\t>git clone https://github.com/certbot/certbot /opt/certbot-master\n\t\n- 安装所有依赖\n \t>/opt/certbot-master/letsencrypt-auto --help\n- 关闭nginx，检出80端口，443端口是否有开启\n\t>nginx -s stop\n\t                                    \n\t>firewall-cmd --query-port=80/tcp\n\n\t>firewall-cmd --query-port=443/tcp\n\t\n\t没有的话就开启\n\t>firewall-cmd --permanent --zone=public --add-port=80/tcp\n- 获取证书\n\t>/opt/certbot-master/letsencrypt-auto --nginx -d www.pinnuli.com \n- 配置nginx（也可选择自动配置)\n\t\n\t>     user nginx;\n\t>     worker_processes auto;\n\t>     error_log /var/log/nginx/error.log;\n\t>     pid /run/nginx.pid;\n\t> \n\t>     include /usr/share/nginx/modules/*.conf;\n\t> \n\t>     events {\n\t>         worker_connections 1024;\n\t>     }\n\t> \n\t>     http {\n\t>         log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" \n\t>                      '$status $body_bytes_sent \"$http_referer\" '\n\t>                       '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\t> \n\t>         access_log  /var/log/nginx/access.log  main;\n\t> \n\t>         sendfile            on;\n\t>         tcp_nopush          on;\n\t>         tcp_nodelay         on;\n\t>         keepalive_timeout   65;\n\t>         types_hash_max_size 2048;\n\t> \n\t>         include             /etc/nginx/mime.types;\n\t>         default_type        application/octet-stream;\n\t> \n\t>         include /etc/nginx/conf.d/*.conf;\n\t> \n\t> \t      server {\n\t>             listen       80 default_server;\n\t>             listen       [::]:80 default_server;\n\t>             server_name  _;\n\t>             root        /var/www/pinnuli.github.io;\n\t> \n\t>             include /etc/nginx/default.d/*.conf;\n\t>   \n\t>             location / {\n\t>             }\n\t> \n\t>             error_page 404 /404.html;\n\t>             location = /40x.html {\n\t>             }\n\t> \n\t>             error_page 500 502 503 504 /50x.html;\n\t>             location = /50x.html {\n\t>             }\n\t>         }\n\t> \t    server {\n\t>             server_name www.pinnuli.com; # managed by Certbot\n\t>             root        /var/www/pinnuli.github.io;\n\t>             include /etc/nginx/default.d/*.conf;\n\t>             location / {\n\t>        \t  }\n\t>             error_page 404 /404.html;\n\t>         \t  location = /40x.html {\n\t>             }\n\t>             error_page 500 502 503 504 /50x.html;\n\t>             location = /50x.html {\n\t>             }\n\t>     \t      listen [::]:443 ssl ipv6only=on; # managed by Certbot\n\t>     \t      listen 443 ssl; # managed by Certbot\n\t>     \t      ssl_certificate /etc/letsencrypt/live/www.pinnuli.com/fullchain.pem; # managed by Certbot\n\t>     \t      ssl_certificate_key /etc/letsencrypt/live/www.pinnuli.com/privkey.pem; # managed by Certbot\n\t>     \t      include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n\t>     \t      ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\t>     }\n\n- 设置自动更新（待更新）","slug":"centos7-Let-s-Encrypt用Certbot获取Https证书-部署nginx","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8oc00098lyjybx0yfq7","content":"<ul>\n<li><p>检查nginx下是否有<code>--with-http_stub_status_module</code> 和<code>--with-http_ssl_module</code>两个模块，安装之后再重新编译</p>\n<blockquote>\n<p>nginx -V</p>\n</blockquote>\n</li>\n<li><p>用http克隆github上的certbot</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/certbot/certbot\" target=\"_blank\" rel=\"noopener\">https://github.com/certbot/certbot</a> /opt/certbot-master</p>\n</blockquote>\n</li>\n<li><p>安装所有依赖</p>\n<blockquote>\n<p>/opt/certbot-master/letsencrypt-auto –help</p>\n</blockquote>\n</li>\n<li><p>关闭nginx，检出80端口，443端口是否有开启</p>\n<blockquote>\n<p>nginx -s stop</p>\n<p>firewall-cmd –query-port=80/tcp</p>\n<p>firewall-cmd –query-port=443/tcp</p>\n</blockquote>\n<p>  没有的话就开启</p>\n<blockquote>\n<p>firewall-cmd –permanent –zone=public –add-port=80/tcp</p>\n</blockquote>\n</li>\n<li>获取证书<blockquote>\n<p>/opt/certbot-master/letsencrypt-auto –nginx -d www.pinnuli.com </p>\n</blockquote>\n</li>\n<li><p>配置nginx（也可选择自动配置)</p>\n<blockquote>\n<pre><code>user nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; \n                 &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;\n                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    include /etc/nginx/conf.d/*.conf;\n\n      server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root        /var/www/pinnuli.github.io;\n\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n        location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n        }\n    }\n    server {\n        server_name www.pinnuli.com; # managed by Certbot\n        root        /var/www/pinnuli.github.io;\n        include /etc/nginx/default.d/*.conf;\n        location / {\n         }\n        error_page 404 /404.html;\n          location = /40x.html {\n        }\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n        }\n          listen [::]:443 ssl ipv6only=on; # managed by Certbot\n          listen 443 ssl; # managed by Certbot\n          ssl_certificate /etc/letsencrypt/live/www.pinnuli.com/fullchain.pem; # managed by Certbot\n          ssl_certificate_key /etc/letsencrypt/live/www.pinnuli.com/privkey.pem; # managed by Certbot\n          include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n          ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n}\n</code></pre></blockquote>\n</li>\n<li><p>设置自动更新（待更新）</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>检查nginx下是否有<code>--with-http_stub_status_module</code> 和<code>--with-http_ssl_module</code>两个模块，安装之后再重新编译</p>\n<blockquote>\n<p>nginx -V</p>\n</blockquote>\n</li>\n<li><p>用http克隆github上的certbot</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/certbot/certbot\" target=\"_blank\" rel=\"noopener\">https://github.com/certbot/certbot</a> /opt/certbot-master</p>\n</blockquote>\n</li>\n<li><p>安装所有依赖</p>\n<blockquote>\n<p>/opt/certbot-master/letsencrypt-auto –help</p>\n</blockquote>\n</li>\n<li><p>关闭nginx，检出80端口，443端口是否有开启</p>\n<blockquote>\n<p>nginx -s stop</p>\n<p>firewall-cmd –query-port=80/tcp</p>\n<p>firewall-cmd –query-port=443/tcp</p>\n</blockquote>\n<p>  没有的话就开启</p>\n<blockquote>\n<p>firewall-cmd –permanent –zone=public –add-port=80/tcp</p>\n</blockquote>\n</li>\n<li>获取证书<blockquote>\n<p>/opt/certbot-master/letsencrypt-auto –nginx -d www.pinnuli.com </p>\n</blockquote>\n</li>\n<li><p>配置nginx（也可选择自动配置)</p>\n<blockquote>\n<pre><code>user nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; \n                 &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;\n                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    include /etc/nginx/conf.d/*.conf;\n\n      server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root        /var/www/pinnuli.github.io;\n\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n        location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n        }\n    }\n    server {\n        server_name www.pinnuli.com; # managed by Certbot\n        root        /var/www/pinnuli.github.io;\n        include /etc/nginx/default.d/*.conf;\n        location / {\n         }\n        error_page 404 /404.html;\n          location = /40x.html {\n        }\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n        }\n          listen [::]:443 ssl ipv6only=on; # managed by Certbot\n          listen 443 ssl; # managed by Certbot\n          ssl_certificate /etc/letsencrypt/live/www.pinnuli.com/fullchain.pem; # managed by Certbot\n          ssl_certificate_key /etc/letsencrypt/live/www.pinnuli.com/privkey.pem; # managed by Certbot\n          include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n          ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n}\n</code></pre></blockquote>\n</li>\n<li><p>设置自动更新（待更新）</p>\n</li>\n</ul>\n"},{"title":"git分支管理常用命令","date":"2018-03-11T07:26:34.000Z","_content":"\n创建分支：\n\n\n\tgit branch branch_name\n\n\n切换分支：\n\n\tgit checkout branch_name\n创建并切换分支\n\t\n\tgit checkout -b branch_name\n\n\n创建远程分支到本地：\n\n\tgit checkout -b branch_name origin/branch_name\t\n\n\n查看当前分支：\n\n\n\tgit branch\n\n获取所有分支：\n\n\tgit fetch\n\n合并某分支到当前分支：\n\n\tgit merge branch_name\n禁用Fast forward（快速合并）， 普通模式合并：\n\n\tgit merge --no-ff -m \"merge with no-ff\" branch_name\n\n(这里会在合并的时候自动生成一个新的commit)\n\n删除分支：\n\n\tgit branch -d branch_name\n\n强制删除分支（用于为合并就删除时）：\n\n\tgit branch -D branch_name\n\n\n查看分支合并图：\n\n\tgit log --graph\n\n保存分支工作现场：\n\n\tgit stash\n\n查看保存列表：\n\n\tgit stash list\n\n\n恢复保存状态：\n\n\tgit stash apply\n\tgit stash apply stash@{x}\n\n删除保存状态：\n\n\tgit stash drop \n\tgit stash drop stash@{x}\n\n恢复并删除保存状态：\n\n\tgit stash pop\n\n推送分支到远程仓库：\n\n\tgit push origin branch_name\n\n建立本地分支与远程分支的关联：\n\t\n\tgit branch --set-upstream branch-name origin/branch-name\n\n\n","source":"_posts/git分支管理.md","raw":"---\ntitle: git分支管理常用命令\ndate: 2018-03-11 15:26:34\ncategories: \"git\" \ntags:\n\t- git\n---\n\n创建分支：\n\n\n\tgit branch branch_name\n\n\n切换分支：\n\n\tgit checkout branch_name\n创建并切换分支\n\t\n\tgit checkout -b branch_name\n\n\n创建远程分支到本地：\n\n\tgit checkout -b branch_name origin/branch_name\t\n\n\n查看当前分支：\n\n\n\tgit branch\n\n获取所有分支：\n\n\tgit fetch\n\n合并某分支到当前分支：\n\n\tgit merge branch_name\n禁用Fast forward（快速合并）， 普通模式合并：\n\n\tgit merge --no-ff -m \"merge with no-ff\" branch_name\n\n(这里会在合并的时候自动生成一个新的commit)\n\n删除分支：\n\n\tgit branch -d branch_name\n\n强制删除分支（用于为合并就删除时）：\n\n\tgit branch -D branch_name\n\n\n查看分支合并图：\n\n\tgit log --graph\n\n保存分支工作现场：\n\n\tgit stash\n\n查看保存列表：\n\n\tgit stash list\n\n\n恢复保存状态：\n\n\tgit stash apply\n\tgit stash apply stash@{x}\n\n删除保存状态：\n\n\tgit stash drop \n\tgit stash drop stash@{x}\n\n恢复并删除保存状态：\n\n\tgit stash pop\n\n推送分支到远程仓库：\n\n\tgit push origin branch_name\n\n建立本地分支与远程分支的关联：\n\t\n\tgit branch --set-upstream branch-name origin/branch-name\n\n\n","slug":"git分支管理","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8oe000d8lyj9pmqsydg","content":"<p>创建分支：</p>\n<pre><code>git branch branch_name\n</code></pre><p>切换分支：</p>\n<pre><code>git checkout branch_name\n</code></pre><p>创建并切换分支</p>\n<pre><code>git checkout -b branch_name\n</code></pre><p>创建远程分支到本地：</p>\n<pre><code>git checkout -b branch_name origin/branch_name    \n</code></pre><p>查看当前分支：</p>\n<pre><code>git branch\n</code></pre><p>获取所有分支：</p>\n<pre><code>git fetch\n</code></pre><p>合并某分支到当前分支：</p>\n<pre><code>git merge branch_name\n</code></pre><p>禁用Fast forward（快速合并）， 普通模式合并：</p>\n<pre><code>git merge --no-ff -m &quot;merge with no-ff&quot; branch_name\n</code></pre><p>(这里会在合并的时候自动生成一个新的commit)</p>\n<p>删除分支：</p>\n<pre><code>git branch -d branch_name\n</code></pre><p>强制删除分支（用于为合并就删除时）：</p>\n<pre><code>git branch -D branch_name\n</code></pre><p>查看分支合并图：</p>\n<pre><code>git log --graph\n</code></pre><p>保存分支工作现场：</p>\n<pre><code>git stash\n</code></pre><p>查看保存列表：</p>\n<pre><code>git stash list\n</code></pre><p>恢复保存状态：</p>\n<pre><code>git stash apply\ngit stash apply stash@{x}\n</code></pre><p>删除保存状态：</p>\n<pre><code>git stash drop \ngit stash drop stash@{x}\n</code></pre><p>恢复并删除保存状态：</p>\n<pre><code>git stash pop\n</code></pre><p>推送分支到远程仓库：</p>\n<pre><code>git push origin branch_name\n</code></pre><p>建立本地分支与远程分支的关联：</p>\n<pre><code>git branch --set-upstream branch-name origin/branch-name\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>创建分支：</p>\n<pre><code>git branch branch_name\n</code></pre><p>切换分支：</p>\n<pre><code>git checkout branch_name\n</code></pre><p>创建并切换分支</p>\n<pre><code>git checkout -b branch_name\n</code></pre><p>创建远程分支到本地：</p>\n<pre><code>git checkout -b branch_name origin/branch_name    \n</code></pre><p>查看当前分支：</p>\n<pre><code>git branch\n</code></pre><p>获取所有分支：</p>\n<pre><code>git fetch\n</code></pre><p>合并某分支到当前分支：</p>\n<pre><code>git merge branch_name\n</code></pre><p>禁用Fast forward（快速合并）， 普通模式合并：</p>\n<pre><code>git merge --no-ff -m &quot;merge with no-ff&quot; branch_name\n</code></pre><p>(这里会在合并的时候自动生成一个新的commit)</p>\n<p>删除分支：</p>\n<pre><code>git branch -d branch_name\n</code></pre><p>强制删除分支（用于为合并就删除时）：</p>\n<pre><code>git branch -D branch_name\n</code></pre><p>查看分支合并图：</p>\n<pre><code>git log --graph\n</code></pre><p>保存分支工作现场：</p>\n<pre><code>git stash\n</code></pre><p>查看保存列表：</p>\n<pre><code>git stash list\n</code></pre><p>恢复保存状态：</p>\n<pre><code>git stash apply\ngit stash apply stash@{x}\n</code></pre><p>删除保存状态：</p>\n<pre><code>git stash drop \ngit stash drop stash@{x}\n</code></pre><p>恢复并删除保存状态：</p>\n<pre><code>git stash pop\n</code></pre><p>推送分支到远程仓库：</p>\n<pre><code>git push origin branch_name\n</code></pre><p>建立本地分支与远程分支的关联：</p>\n<pre><code>git branch --set-upstream branch-name origin/branch-name\n</code></pre>"},{"title":"git多账号配置，同时使用多个代码托管平台","date":"2018-04-09T13:01:52.000Z","_content":"\n我们在使用git管理代码的时候，经常需要放到不同的托管网站，如github，osc等，那么不同的网站账号不一样，就需要生成不同密钥，配置对应的不同网站，接下来我们写写如何处理。\n\nps:这里是在centos7.2下操作，不过其他操作系统依然适用，这里举的例子，一个是github，一个是osc。\n\n### 1 生成密钥\n这里可以设置密钥文件名和路径，/root/.ssh 是路径（一般路径选择默认），id_rsa_github是密钥文件名, 文件命名后按两次回车，即密码为空\n\n``` bash\n\tssh-keygen -T rsa -C \"example@qq.com\" \n```\n生成github的密钥![git_multi_account_ssh_github](/images/git_multiaccount_ssh_github.jpg)\n\n生成osc的密钥![git_multi_account_ssh_osc](/images/git_multiaccount_ssh_osc.jpg)\n\n\n\n查看一下.ssh文件夹，发现有id_rsa_github, id_rsa_github.pub（放到github）,id_rsa_osc, id_rsa_osc.pub（放到osc)\n\n``` bash\n\tls -a /root/.ssh \n\t\n```\n\n![git_multi_account_ssh_file](/images/git_multiaccount_ssh_file.png)\n\n### 2 接下来配置多账号\n\n在.ssh文件夹下面新建一个命名为config的文件，编辑如下内容\n\n``` bash\n\n\t#github\n        Host github.com    \n        HostName github.com\n        IdentityFile ~/.ssh/id_rsa_github\n        User pinnuli\n\n\t#osc\n        Host gitee.com\n        HostName gitee.com\n        IdentityFile ~/.ssh/id_rsa_osc\n        User pinnuli\n\n```\n\n![git_multiaccount_config](/images/git_multiaccount_config.png)\n\n\n### 3 把对应的公钥放到github和osc上面\n\n![git_multiaccount_pub_github](/images/git_multiaccount_pub_github.png)\n\n![git_multiaccount_pub_osc](/images/git_multiaccount_pub_osc.png)\n\n### 4 测试是否成功\n\n\n``` bash\n\tssh -T git@github.com\n\n```\n![git_multiaccount_connect_github](/images/git_multiaccount_connect_github.png)\n\n``` bash\n\tssh -T git@gitee.com\n\n\t\n```\n\n![git_multiaccount_connect_osc](/images/git_multiaccount_connect_osc.png)\n\n\n至此，git多账号配置完毕，需要更多账号也是一样的道理\n","source":"_posts/git多账号配置，同时使用多个代码托管平台.md","raw":"---\ntitle: git多账号配置，同时使用多个代码托管平台\ndate: 2018-04-09 21:01:52\ncategories: \"git\" \ntags:\t\n        - git\n---\n\n我们在使用git管理代码的时候，经常需要放到不同的托管网站，如github，osc等，那么不同的网站账号不一样，就需要生成不同密钥，配置对应的不同网站，接下来我们写写如何处理。\n\nps:这里是在centos7.2下操作，不过其他操作系统依然适用，这里举的例子，一个是github，一个是osc。\n\n### 1 生成密钥\n这里可以设置密钥文件名和路径，/root/.ssh 是路径（一般路径选择默认），id_rsa_github是密钥文件名, 文件命名后按两次回车，即密码为空\n\n``` bash\n\tssh-keygen -T rsa -C \"example@qq.com\" \n```\n生成github的密钥![git_multi_account_ssh_github](/images/git_multiaccount_ssh_github.jpg)\n\n生成osc的密钥![git_multi_account_ssh_osc](/images/git_multiaccount_ssh_osc.jpg)\n\n\n\n查看一下.ssh文件夹，发现有id_rsa_github, id_rsa_github.pub（放到github）,id_rsa_osc, id_rsa_osc.pub（放到osc)\n\n``` bash\n\tls -a /root/.ssh \n\t\n```\n\n![git_multi_account_ssh_file](/images/git_multiaccount_ssh_file.png)\n\n### 2 接下来配置多账号\n\n在.ssh文件夹下面新建一个命名为config的文件，编辑如下内容\n\n``` bash\n\n\t#github\n        Host github.com    \n        HostName github.com\n        IdentityFile ~/.ssh/id_rsa_github\n        User pinnuli\n\n\t#osc\n        Host gitee.com\n        HostName gitee.com\n        IdentityFile ~/.ssh/id_rsa_osc\n        User pinnuli\n\n```\n\n![git_multiaccount_config](/images/git_multiaccount_config.png)\n\n\n### 3 把对应的公钥放到github和osc上面\n\n![git_multiaccount_pub_github](/images/git_multiaccount_pub_github.png)\n\n![git_multiaccount_pub_osc](/images/git_multiaccount_pub_osc.png)\n\n### 4 测试是否成功\n\n\n``` bash\n\tssh -T git@github.com\n\n```\n![git_multiaccount_connect_github](/images/git_multiaccount_connect_github.png)\n\n``` bash\n\tssh -T git@gitee.com\n\n\t\n```\n\n![git_multiaccount_connect_osc](/images/git_multiaccount_connect_osc.png)\n\n\n至此，git多账号配置完毕，需要更多账号也是一样的道理\n","slug":"git多账号配置，同时使用多个代码托管平台","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8of000e8lyjr3uqkb72","content":"<p>我们在使用git管理代码的时候，经常需要放到不同的托管网站，如github，osc等，那么不同的网站账号不一样，就需要生成不同密钥，配置对应的不同网站，接下来我们写写如何处理。</p>\n<p>ps:这里是在centos7.2下操作，不过其他操作系统依然适用，这里举的例子，一个是github，一个是osc。</p>\n<h3 id=\"1-生成密钥\"><a href=\"#1-生成密钥\" class=\"headerlink\" title=\"1 生成密钥\"></a>1 生成密钥</h3><p>这里可以设置密钥文件名和路径，/root/.ssh 是路径（一般路径选择默认），id_rsa_github是密钥文件名, 文件命名后按两次回车，即密码为空</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -T rsa -C <span class=\"string\">\"example@qq.com\"</span></span><br></pre></td></tr></table></figure>\n<p>生成github的密钥<img src=\"/images/git_multiaccount_ssh_github.jpg\" alt=\"git_multi_account_ssh_github\"></p>\n<p>生成osc的密钥<img src=\"/images/git_multiaccount_ssh_osc.jpg\" alt=\"git_multi_account_ssh_osc\"></p>\n<p>查看一下.ssh文件夹，发现有id_rsa_github, id_rsa_github.pub（放到github）,id_rsa_osc, id_rsa_osc.pub（放到osc)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a /root/.ssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/git_multiaccount_ssh_file.png\" alt=\"git_multi_account_ssh_file\"></p>\n<h3 id=\"2-接下来配置多账号\"><a href=\"#2-接下来配置多账号\" class=\"headerlink\" title=\"2 接下来配置多账号\"></a>2 接下来配置多账号</h3><p>在.ssh文件夹下面新建一个命名为config的文件，编辑如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#github</span></span><br><span class=\"line\">       Host github.com    </span><br><span class=\"line\">       HostName github.com</span><br><span class=\"line\">       IdentityFile ~/.ssh/id_rsa_github</span><br><span class=\"line\">       User pinnuli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#osc</span></span><br><span class=\"line\">       Host gitee.com</span><br><span class=\"line\">       HostName gitee.com</span><br><span class=\"line\">       IdentityFile ~/.ssh/id_rsa_osc</span><br><span class=\"line\">       User pinnuli</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/git_multiaccount_config.png\" alt=\"git_multiaccount_config\"></p>\n<h3 id=\"3-把对应的公钥放到github和osc上面\"><a href=\"#3-把对应的公钥放到github和osc上面\" class=\"headerlink\" title=\"3 把对应的公钥放到github和osc上面\"></a>3 把对应的公钥放到github和osc上面</h3><p><img src=\"/images/git_multiaccount_pub_github.png\" alt=\"git_multiaccount_pub_github\"></p>\n<p><img src=\"/images/git_multiaccount_pub_osc.png\" alt=\"git_multiaccount_pub_osc\"></p>\n<h3 id=\"4-测试是否成功\"><a href=\"#4-测试是否成功\" class=\"headerlink\" title=\"4 测试是否成功\"></a>4 测试是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/git_multiaccount_connect_github.png\" alt=\"git_multiaccount_connect_github\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/git_multiaccount_connect_osc.png\" alt=\"git_multiaccount_connect_osc\"></p>\n<p>至此，git多账号配置完毕，需要更多账号也是一样的道理</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们在使用git管理代码的时候，经常需要放到不同的托管网站，如github，osc等，那么不同的网站账号不一样，就需要生成不同密钥，配置对应的不同网站，接下来我们写写如何处理。</p>\n<p>ps:这里是在centos7.2下操作，不过其他操作系统依然适用，这里举的例子，一个是github，一个是osc。</p>\n<h3 id=\"1-生成密钥\"><a href=\"#1-生成密钥\" class=\"headerlink\" title=\"1 生成密钥\"></a>1 生成密钥</h3><p>这里可以设置密钥文件名和路径，/root/.ssh 是路径（一般路径选择默认），id_rsa_github是密钥文件名, 文件命名后按两次回车，即密码为空</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -T rsa -C <span class=\"string\">\"example@qq.com\"</span></span><br></pre></td></tr></table></figure>\n<p>生成github的密钥<img src=\"/images/git_multiaccount_ssh_github.jpg\" alt=\"git_multi_account_ssh_github\"></p>\n<p>生成osc的密钥<img src=\"/images/git_multiaccount_ssh_osc.jpg\" alt=\"git_multi_account_ssh_osc\"></p>\n<p>查看一下.ssh文件夹，发现有id_rsa_github, id_rsa_github.pub（放到github）,id_rsa_osc, id_rsa_osc.pub（放到osc)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a /root/.ssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/git_multiaccount_ssh_file.png\" alt=\"git_multi_account_ssh_file\"></p>\n<h3 id=\"2-接下来配置多账号\"><a href=\"#2-接下来配置多账号\" class=\"headerlink\" title=\"2 接下来配置多账号\"></a>2 接下来配置多账号</h3><p>在.ssh文件夹下面新建一个命名为config的文件，编辑如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#github</span></span><br><span class=\"line\">       Host github.com    </span><br><span class=\"line\">       HostName github.com</span><br><span class=\"line\">       IdentityFile ~/.ssh/id_rsa_github</span><br><span class=\"line\">       User pinnuli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#osc</span></span><br><span class=\"line\">       Host gitee.com</span><br><span class=\"line\">       HostName gitee.com</span><br><span class=\"line\">       IdentityFile ~/.ssh/id_rsa_osc</span><br><span class=\"line\">       User pinnuli</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/git_multiaccount_config.png\" alt=\"git_multiaccount_config\"></p>\n<h3 id=\"3-把对应的公钥放到github和osc上面\"><a href=\"#3-把对应的公钥放到github和osc上面\" class=\"headerlink\" title=\"3 把对应的公钥放到github和osc上面\"></a>3 把对应的公钥放到github和osc上面</h3><p><img src=\"/images/git_multiaccount_pub_github.png\" alt=\"git_multiaccount_pub_github\"></p>\n<p><img src=\"/images/git_multiaccount_pub_osc.png\" alt=\"git_multiaccount_pub_osc\"></p>\n<h3 id=\"4-测试是否成功\"><a href=\"#4-测试是否成功\" class=\"headerlink\" title=\"4 测试是否成功\"></a>4 测试是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/git_multiaccount_connect_github.png\" alt=\"git_multiaccount_connect_github\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/git_multiaccount_connect_osc.png\" alt=\"git_multiaccount_connect_osc\"></p>\n<p>至此，git多账号配置完毕，需要更多账号也是一样的道理</p>\n"},{"title":"java io流与文件","date":"2018-07-18T22:27:55.000Z","_content":"#### 一、流 ####\n- 读写字节\n\t- `InputStream.read和OutpueStream.write，`\n- 组合流过滤器\n\n\t - 某些流（如`FileInputStream`或者`FileOutputStream`）只能支持在字节级别上的读写，，没有读入数据类型的方法，而其他的流（DataInputStream）这些类就之只能读入数值类型，无法从文件中获取数据，因而对二者进行组合。如：\t\n\t\t``` \n\t\tFileInputStream fin = new FileInputStream(\"test.txt\");\n\t\tDataInputStream din = new DataInputStream(fin);\n\t\tdouble s = din.readDouble();\n\t\t```\n\t- 需要使用缓冲，可以使用一下构造器：\n\t\t```\n\t\tDataInputStream din = new DataInputStream(\n\t\t\tnew BUfferInputStream(\n\t\t\t\tnew FileInputStream(test.txt\")));\n\t\t```\n\t- 需要浏览下一个字节以确定是否是想要的值时，可以：\n\t\t```\n\t\tPushbackInputStream pbin = new PushbackInputStream(\n\t\t\tnew BUfferInputStream(\n\t\t\t\tnew FileInputStream(test.txt\")));\n\t\t//预读写一个字节\n\t\tint b = pbin.read();\n\t\t//不是所期望时将其推回流中\n\t\tif(b != '<') pbin.unead(b);\n\t\t```\n----\n#### 二、文本输入与输出\n- 输出：`PrintWrite`\n\t- `PrintWrite out = new PrintWrite(\"test.txt\");`等同于`PrintWrite out = new PrintWrite(new FileWrite(\"test.txt\"));`\n- 输入：`Scanner`\n- 文本格式存储对象\n\t- 用自己的格式依次存储各个字段，以特定字符分隔，如：\n\tPINUULI|201625010417|1997|guangdong\n#### 三、读写二进制数据\n- 读：实现`DataInput`接口，如`DataInputStream，readInt，readBoolean`等方法\n- 写：实现`DataOutpu`t接口，如`DataOutputStream，writeInt，writeBoolean`等方法\n- 随机访问文件：`RandomAccessFile`\n可以在文件中的任何位置查找或者写入数据：\n```\nRandomAccessFile in = new RandomAccessFile(\"test.txt\",\"r\");\nRandomAccessFile inOut = new RandomAccessFile(\"test.txt\",\"rw\");\n```\n#### 四、ZIP文件\n> 每个zip文档都有一个头，包含注入给个文件名字和使用的压缩方法等信息。\n- 读：`ZipInputStream`\n\t- 用`getNextEntry`方法返回文档中这些项（文件）的`ZipEntry`对象\n\t-` ZipInputStream`的`read`方法被修改为碰到当前项的结尾时返回-1，而不是整个zip文件的结尾，读完一个项之后，用`closeEntry`读入下一项\n\t- 在读入单个zip项后，不要关闭zip输入流，否则就不能再读入后续的项\n\t- 通读zip文件：\n\t``` \n\tZipInputStream zin = new ZipInputStream(new FileInputStream(\"test.zip\"));\n\tZipEntry entry;\n\tScanner in = new Scanner(zin);\n\twhile((entry = zin.getNextEntry()) != null){\n\t\twhile(in.hasNextLine()){\n\t\t\tSystem.out.println(in.nextLine());\n\t\t}\n\t\tzin.closeEntry();\n\t}\n\t```\n\n- 写：`ZipOutputStream`\n\t- 对于想要放入到zip文件中的每一个项，都应该创建一个`ZipEntry`对象，并将文件名传递给ZipEntry的构造器\n\t- 调用`ZipOutputStream`的`putNextEntry`方法开始写出新文件，并将数据发送到zip流中\n\t- 完成时调用`closeEntry`方法\n\t- 如：\n\t```\n\tFileOutputStream fout = new FilePutputStream(\"test.zip\");\n\tZipOutputStream zout = new ZipOutputStream(fout);\n\n\t// 写一个文件\n\tZipEntry ze = new ZipEntry(\"filename\");\n\tzout.putNextENtry(ze);\n\tsend data to zout;\n\tzout.closeEntry();\n\n\tzout.close();\n\t```\n\n#### 五、对象流与序列化\n- 序列化:`ObjectOutputStream.writeObject()`,\n- 反序列化：`ObjectInputream.readObject()`，\n- 都需要实现`Serializable`接口\n- 只有读写对象时才能用writeObject/readObject方法，对于基本类型，使用writeInt/readInt等\n- 序列化算法：\n\t- 对于遇到的每个对象都关联一个序列号\n\t- 对于每个对象，第一次遇到时，保存其对象数据到流中\n\t- 如果某个对象之前已经被保存过，那么只写出“与之前保存过的序列号为x的对象相同”，在反序列化时整个过程相反\n\t- 对于流中的对象，在第一次遇到其序列号时，构建它并使用流中的数据初始化，然后记录这个序列号与新对象之间的关联\n\t- 当遇到“与之前保存过的序列号为x的对象相同”标记时，获取与这个序列号相关联的对象引用，即相同对象的重复出现被存储为对这个对象的序列号的引用\n- 修改默认的序列化机制\n\t>一些数据域是不可序列化，或者没必要序列化的，比如只对本地方法有意义的窗口句柄的整数值，重新加载或者传送到其他机器上都没有用，那么就可以将他们标记成是transient，这些域在序列化时就会被跳过。\n\t可以把一些域存储为你想要的格式，想要为默认的读写行文添加验证时。\n\n\t- 当你只是想跳过一些域，或者想将这些域保存为你想要的格式，而大部分域依然按照默认的格式保存时，可以仍然实现`Serializable`接口，将那些数据域标记成transient，读写时调用默认的读写方法之后，再做自己想要的处理，如：\n\t\t\n\t\t```\n\t\tpublic class LabeledPoint implements Serializable{\n\t\t\tprivate String label;\n\n\t\t\t//对于类LabeledPoint，point不能序列化，那么标志成transient，序列化时就会被跳过,之后存储点的坐标\n\t\t\tprivate transient Point2D.Double point;\n\t\t\t···\n\t\t\t//重写读写方法\n\t\t\tprivate void writeObject(ObjectOutputStream out) throws Exception{\n\t\t\t\tout.defaultWriteObjecy();\n\t\t\t\tout.writeDouble(point.getX());\n\t\t\t\tout.writeDouble(point.getY());\n\t\t\t}\n\n\t\t\tprivate void readObject(ObjectInputStream in) throws IOException{\n\t\t\t\tin.defaultReadObject();\n\t\t\t\tdouble x = in.readDouble();\n\t\t\t\tdouble y = in.readDouble();\n\t\t\t\tpoint = new Point2D.DOuble(x,y);\n\t\t\t}\n\t\t}\n\t\t```\n\t\t\n\t- 当你只需要保存一部分域时，使用transient关键字就有点麻烦，那么可以通过实现`Externalizable`接口，指定要保存的域\n\t\t```\n\t\tpublic class Student implements Externalizable{\n\t\t\tprivate String name;\n\t\t\tprivate String stuId;\n\t\t\tprivate int age;\n\t\t\t···\n\t\t\t//重写读写方法\n\t\t\tprivate void writeExternal(ObjectOutput out) throws IOException{\n\t\t\t\tout.writeUTF(name);\n\t\t\t\tout.writeInt(age);\n\t\t\t}\n\n\t\t\tprivate void readExternal(ObjectInput in) throws IOException{\n\t\t\t\tname = in.readUTF():\n\t\t\t\tage = in.readInt();\n\t\t\t}\n\t\t}\n\t\t```\n\t> PS:readObjecty和writeObject方法时私有的，只有被序列化机制调用，在流中只记录该对象所属的类，而readExternal/writeExternal方法时公共的，而且对包括超类数据在内的整个对象的存储和回复负责。\n----\n#### 六、操作文件\n- Path\n\t- 静态的Paths.get方法接收一个或多个字符串，并将它们用默认文件系统的路径分隔符（类Unix文件系统是/，Windows是\\）连接起来，返回一个Path对象，详情见API。如：\n\t\t``` \n\t\tPath absolutye = Paths.get(\"/home\".\"cay\");\n\t\tPath relative = Paths.get(\"myprog\",\"conf\",\"user.properties\");\n\t\t```\n- 读写文件：Files类可以使得普通文件操作变得快捷\n\t- 读取文件所有内容：`byte[] bytes = Files.readAllBytes(path);`,之后可以将其当做字符串`String content = new String(bytes,charset);`\n\t- 向指定文件追加内容：`Files.write(path,content.getBytes(charset),StandardOpenOption.APPEND);`\n\t- 将一个行集合\n","source":"_posts/java-io流与文件.md","raw":"---\ntitle: java io流与文件\ndate: 2018-07-19 06:27:55\ncategories: \"javase笔记\" \ntags:\n\t- javase\n---\n#### 一、流 ####\n- 读写字节\n\t- `InputStream.read和OutpueStream.write，`\n- 组合流过滤器\n\n\t - 某些流（如`FileInputStream`或者`FileOutputStream`）只能支持在字节级别上的读写，，没有读入数据类型的方法，而其他的流（DataInputStream）这些类就之只能读入数值类型，无法从文件中获取数据，因而对二者进行组合。如：\t\n\t\t``` \n\t\tFileInputStream fin = new FileInputStream(\"test.txt\");\n\t\tDataInputStream din = new DataInputStream(fin);\n\t\tdouble s = din.readDouble();\n\t\t```\n\t- 需要使用缓冲，可以使用一下构造器：\n\t\t```\n\t\tDataInputStream din = new DataInputStream(\n\t\t\tnew BUfferInputStream(\n\t\t\t\tnew FileInputStream(test.txt\")));\n\t\t```\n\t- 需要浏览下一个字节以确定是否是想要的值时，可以：\n\t\t```\n\t\tPushbackInputStream pbin = new PushbackInputStream(\n\t\t\tnew BUfferInputStream(\n\t\t\t\tnew FileInputStream(test.txt\")));\n\t\t//预读写一个字节\n\t\tint b = pbin.read();\n\t\t//不是所期望时将其推回流中\n\t\tif(b != '<') pbin.unead(b);\n\t\t```\n----\n#### 二、文本输入与输出\n- 输出：`PrintWrite`\n\t- `PrintWrite out = new PrintWrite(\"test.txt\");`等同于`PrintWrite out = new PrintWrite(new FileWrite(\"test.txt\"));`\n- 输入：`Scanner`\n- 文本格式存储对象\n\t- 用自己的格式依次存储各个字段，以特定字符分隔，如：\n\tPINUULI|201625010417|1997|guangdong\n#### 三、读写二进制数据\n- 读：实现`DataInput`接口，如`DataInputStream，readInt，readBoolean`等方法\n- 写：实现`DataOutpu`t接口，如`DataOutputStream，writeInt，writeBoolean`等方法\n- 随机访问文件：`RandomAccessFile`\n可以在文件中的任何位置查找或者写入数据：\n```\nRandomAccessFile in = new RandomAccessFile(\"test.txt\",\"r\");\nRandomAccessFile inOut = new RandomAccessFile(\"test.txt\",\"rw\");\n```\n#### 四、ZIP文件\n> 每个zip文档都有一个头，包含注入给个文件名字和使用的压缩方法等信息。\n- 读：`ZipInputStream`\n\t- 用`getNextEntry`方法返回文档中这些项（文件）的`ZipEntry`对象\n\t-` ZipInputStream`的`read`方法被修改为碰到当前项的结尾时返回-1，而不是整个zip文件的结尾，读完一个项之后，用`closeEntry`读入下一项\n\t- 在读入单个zip项后，不要关闭zip输入流，否则就不能再读入后续的项\n\t- 通读zip文件：\n\t``` \n\tZipInputStream zin = new ZipInputStream(new FileInputStream(\"test.zip\"));\n\tZipEntry entry;\n\tScanner in = new Scanner(zin);\n\twhile((entry = zin.getNextEntry()) != null){\n\t\twhile(in.hasNextLine()){\n\t\t\tSystem.out.println(in.nextLine());\n\t\t}\n\t\tzin.closeEntry();\n\t}\n\t```\n\n- 写：`ZipOutputStream`\n\t- 对于想要放入到zip文件中的每一个项，都应该创建一个`ZipEntry`对象，并将文件名传递给ZipEntry的构造器\n\t- 调用`ZipOutputStream`的`putNextEntry`方法开始写出新文件，并将数据发送到zip流中\n\t- 完成时调用`closeEntry`方法\n\t- 如：\n\t```\n\tFileOutputStream fout = new FilePutputStream(\"test.zip\");\n\tZipOutputStream zout = new ZipOutputStream(fout);\n\n\t// 写一个文件\n\tZipEntry ze = new ZipEntry(\"filename\");\n\tzout.putNextENtry(ze);\n\tsend data to zout;\n\tzout.closeEntry();\n\n\tzout.close();\n\t```\n\n#### 五、对象流与序列化\n- 序列化:`ObjectOutputStream.writeObject()`,\n- 反序列化：`ObjectInputream.readObject()`，\n- 都需要实现`Serializable`接口\n- 只有读写对象时才能用writeObject/readObject方法，对于基本类型，使用writeInt/readInt等\n- 序列化算法：\n\t- 对于遇到的每个对象都关联一个序列号\n\t- 对于每个对象，第一次遇到时，保存其对象数据到流中\n\t- 如果某个对象之前已经被保存过，那么只写出“与之前保存过的序列号为x的对象相同”，在反序列化时整个过程相反\n\t- 对于流中的对象，在第一次遇到其序列号时，构建它并使用流中的数据初始化，然后记录这个序列号与新对象之间的关联\n\t- 当遇到“与之前保存过的序列号为x的对象相同”标记时，获取与这个序列号相关联的对象引用，即相同对象的重复出现被存储为对这个对象的序列号的引用\n- 修改默认的序列化机制\n\t>一些数据域是不可序列化，或者没必要序列化的，比如只对本地方法有意义的窗口句柄的整数值，重新加载或者传送到其他机器上都没有用，那么就可以将他们标记成是transient，这些域在序列化时就会被跳过。\n\t可以把一些域存储为你想要的格式，想要为默认的读写行文添加验证时。\n\n\t- 当你只是想跳过一些域，或者想将这些域保存为你想要的格式，而大部分域依然按照默认的格式保存时，可以仍然实现`Serializable`接口，将那些数据域标记成transient，读写时调用默认的读写方法之后，再做自己想要的处理，如：\n\t\t\n\t\t```\n\t\tpublic class LabeledPoint implements Serializable{\n\t\t\tprivate String label;\n\n\t\t\t//对于类LabeledPoint，point不能序列化，那么标志成transient，序列化时就会被跳过,之后存储点的坐标\n\t\t\tprivate transient Point2D.Double point;\n\t\t\t···\n\t\t\t//重写读写方法\n\t\t\tprivate void writeObject(ObjectOutputStream out) throws Exception{\n\t\t\t\tout.defaultWriteObjecy();\n\t\t\t\tout.writeDouble(point.getX());\n\t\t\t\tout.writeDouble(point.getY());\n\t\t\t}\n\n\t\t\tprivate void readObject(ObjectInputStream in) throws IOException{\n\t\t\t\tin.defaultReadObject();\n\t\t\t\tdouble x = in.readDouble();\n\t\t\t\tdouble y = in.readDouble();\n\t\t\t\tpoint = new Point2D.DOuble(x,y);\n\t\t\t}\n\t\t}\n\t\t```\n\t\t\n\t- 当你只需要保存一部分域时，使用transient关键字就有点麻烦，那么可以通过实现`Externalizable`接口，指定要保存的域\n\t\t```\n\t\tpublic class Student implements Externalizable{\n\t\t\tprivate String name;\n\t\t\tprivate String stuId;\n\t\t\tprivate int age;\n\t\t\t···\n\t\t\t//重写读写方法\n\t\t\tprivate void writeExternal(ObjectOutput out) throws IOException{\n\t\t\t\tout.writeUTF(name);\n\t\t\t\tout.writeInt(age);\n\t\t\t}\n\n\t\t\tprivate void readExternal(ObjectInput in) throws IOException{\n\t\t\t\tname = in.readUTF():\n\t\t\t\tage = in.readInt();\n\t\t\t}\n\t\t}\n\t\t```\n\t> PS:readObjecty和writeObject方法时私有的，只有被序列化机制调用，在流中只记录该对象所属的类，而readExternal/writeExternal方法时公共的，而且对包括超类数据在内的整个对象的存储和回复负责。\n----\n#### 六、操作文件\n- Path\n\t- 静态的Paths.get方法接收一个或多个字符串，并将它们用默认文件系统的路径分隔符（类Unix文件系统是/，Windows是\\）连接起来，返回一个Path对象，详情见API。如：\n\t\t``` \n\t\tPath absolutye = Paths.get(\"/home\".\"cay\");\n\t\tPath relative = Paths.get(\"myprog\",\"conf\",\"user.properties\");\n\t\t```\n- 读写文件：Files类可以使得普通文件操作变得快捷\n\t- 读取文件所有内容：`byte[] bytes = Files.readAllBytes(path);`,之后可以将其当做字符串`String content = new String(bytes,charset);`\n\t- 向指定文件追加内容：`Files.write(path,content.getBytes(charset),StandardOpenOption.APPEND);`\n\t- 将一个行集合\n","slug":"java-io流与文件","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8oi000i8lyjnokto1u4","content":"<h4 id=\"一、流\"><a href=\"#一、流\" class=\"headerlink\" title=\"一、流\"></a>一、流</h4><ul>\n<li>读写字节<ul>\n<li><code>InputStream.read和OutpueStream.write，</code></li>\n</ul>\n</li>\n<li><p>组合流过滤器</p>\n<ul>\n<li><p>某些流（如<code>FileInputStream</code>或者<code>FileOutputStream</code>）只能支持在字节级别上的读写，，没有读入数据类型的方法，而其他的流（DataInputStream）这些类就之只能读入数值类型，无法从文件中获取数据，因而对二者进行组合。如：    </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileInputStream fin = new FileInputStream(&quot;test.txt&quot;);</span><br><span class=\"line\">DataInputStream din = new DataInputStream(fin);</span><br><span class=\"line\">double s = din.readDouble();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>需要使用缓冲，可以使用一下构造器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataInputStream din = new DataInputStream(</span><br><span class=\"line\">\tnew BUfferInputStream(</span><br><span class=\"line\">\t\tnew FileInputStream(test.txt&quot;)));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要浏览下一个字节以确定是否是想要的值时，可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PushbackInputStream pbin = new PushbackInputStream(</span><br><span class=\"line\">\tnew BUfferInputStream(</span><br><span class=\"line\">\t\tnew FileInputStream(test.txt&quot;)));</span><br><span class=\"line\">//预读写一个字节</span><br><span class=\"line\">int b = pbin.read();</span><br><span class=\"line\">//不是所期望时将其推回流中</span><br><span class=\"line\">if(b != &apos;&lt;&apos;) pbin.unead(b);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"二、文本输入与输出\"><a href=\"#二、文本输入与输出\" class=\"headerlink\" title=\"二、文本输入与输出\"></a>二、文本输入与输出</h4><ul>\n<li>输出：<code>PrintWrite</code><ul>\n<li><code>PrintWrite out = new PrintWrite(&quot;test.txt&quot;);</code>等同于<code>PrintWrite out = new PrintWrite(new FileWrite(&quot;test.txt&quot;));</code></li>\n</ul>\n</li>\n<li>输入：<code>Scanner</code></li>\n<li>文本格式存储对象<ul>\n<li>用自己的格式依次存储各个字段，以特定字符分隔，如：<br>PINUULI|201625010417|1997|guangdong<h4 id=\"三、读写二进制数据\"><a href=\"#三、读写二进制数据\" class=\"headerlink\" title=\"三、读写二进制数据\"></a>三、读写二进制数据</h4></li>\n</ul>\n</li>\n<li>读：实现<code>DataInput</code>接口，如<code>DataInputStream，readInt，readBoolean</code>等方法</li>\n<li>写：实现<code>DataOutpu</code>t接口，如<code>DataOutputStream，writeInt，writeBoolean</code>等方法</li>\n<li>随机访问文件：<code>RandomAccessFile</code><br>可以在文件中的任何位置查找或者写入数据：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile in = new RandomAccessFile(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class=\"line\">RandomAccessFile inOut = new RandomAccessFile(&quot;test.txt&quot;,&quot;rw&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"四、ZIP文件\"><a href=\"#四、ZIP文件\" class=\"headerlink\" title=\"四、ZIP文件\"></a>四、ZIP文件</h4><blockquote>\n<p>每个zip文档都有一个头，包含注入给个文件名字和使用的压缩方法等信息。</p>\n<ul>\n<li>读：<code>ZipInputStream</code><ul>\n<li>用<code>getNextEntry</code>方法返回文档中这些项（文件）的<code>ZipEntry</code>对象<br>-<code>ZipInputStream</code>的<code>read</code>方法被修改为碰到当前项的结尾时返回-1，而不是整个zip文件的结尾，读完一个项之后，用<code>closeEntry</code>读入下一项</li>\n<li>在读入单个zip项后，不要关闭zip输入流，否则就不能再读入后续的项</li>\n<li>通读zip文件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZipInputStream zin = new ZipInputStream(new FileInputStream(&quot;test.zip&quot;));</span><br><span class=\"line\">ZipEntry entry;</span><br><span class=\"line\">Scanner in = new Scanner(zin);</span><br><span class=\"line\">while((entry = zin.getNextEntry()) != null)&#123;</span><br><span class=\"line\">\twhile(in.hasNextLine())&#123;</span><br><span class=\"line\">\t\tSystem.out.println(in.nextLine());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tzin.closeEntry();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>写：<code>ZipOutputStream</code><ul>\n<li>对于想要放入到zip文件中的每一个项，都应该创建一个<code>ZipEntry</code>对象，并将文件名传递给ZipEntry的构造器</li>\n<li>调用<code>ZipOutputStream</code>的<code>putNextEntry</code>方法开始写出新文件，并将数据发送到zip流中</li>\n<li>完成时调用<code>closeEntry</code>方法</li>\n<li>如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileOutputStream fout = new FilePutputStream(&quot;test.zip&quot;);</span><br><span class=\"line\">ZipOutputStream zout = new ZipOutputStream(fout);</span><br><span class=\"line\"></span><br><span class=\"line\">// 写一个文件</span><br><span class=\"line\">ZipEntry ze = new ZipEntry(&quot;filename&quot;);</span><br><span class=\"line\">zout.putNextENtry(ze);</span><br><span class=\"line\">send data to zout;</span><br><span class=\"line\">zout.closeEntry();</span><br><span class=\"line\"></span><br><span class=\"line\">zout.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"五、对象流与序列化\"><a href=\"#五、对象流与序列化\" class=\"headerlink\" title=\"五、对象流与序列化\"></a>五、对象流与序列化</h4><ul>\n<li>序列化:<code>ObjectOutputStream.writeObject()</code>,</li>\n<li>反序列化：<code>ObjectInputream.readObject()</code>，</li>\n<li>都需要实现<code>Serializable</code>接口</li>\n<li>只有读写对象时才能用writeObject/readObject方法，对于基本类型，使用writeInt/readInt等</li>\n<li>序列化算法：<ul>\n<li>对于遇到的每个对象都关联一个序列号</li>\n<li>对于每个对象，第一次遇到时，保存其对象数据到流中</li>\n<li>如果某个对象之前已经被保存过，那么只写出“与之前保存过的序列号为x的对象相同”，在反序列化时整个过程相反</li>\n<li>对于流中的对象，在第一次遇到其序列号时，构建它并使用流中的数据初始化，然后记录这个序列号与新对象之间的关联</li>\n<li>当遇到“与之前保存过的序列号为x的对象相同”标记时，获取与这个序列号相关联的对象引用，即相同对象的重复出现被存储为对这个对象的序列号的引用</li>\n</ul>\n</li>\n<li><p>修改默认的序列化机制</p>\n<blockquote>\n<p>一些数据域是不可序列化，或者没必要序列化的，比如只对本地方法有意义的窗口句柄的整数值，重新加载或者传送到其他机器上都没有用，那么就可以将他们标记成是transient，这些域在序列化时就会被跳过。<br>  可以把一些域存储为你想要的格式，想要为默认的读写行文添加验证时。</p>\n</blockquote>\n<ul>\n<li><p>当你只是想跳过一些域，或者想将这些域保存为你想要的格式，而大部分域依然按照默认的格式保存时，可以仍然实现<code>Serializable</code>接口，将那些数据域标记成transient，读写时调用默认的读写方法之后，再做自己想要的处理，如：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LabeledPoint implements Serializable&#123;</span><br><span class=\"line\">\tprivate String label;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//对于类LabeledPoint，point不能序列化，那么标志成transient，序列化时就会被跳过,之后存储点的坐标</span><br><span class=\"line\">\tprivate transient Point2D.Double point;</span><br><span class=\"line\">\t···</span><br><span class=\"line\">\t//重写读写方法</span><br><span class=\"line\">\tprivate void writeObject(ObjectOutputStream out) throws Exception&#123;</span><br><span class=\"line\">\t\tout.defaultWriteObjecy();</span><br><span class=\"line\">\t\tout.writeDouble(point.getX());</span><br><span class=\"line\">\t\tout.writeDouble(point.getY());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void readObject(ObjectInputStream in) throws IOException&#123;</span><br><span class=\"line\">\t\tin.defaultReadObject();</span><br><span class=\"line\">\t\tdouble x = in.readDouble();</span><br><span class=\"line\">\t\tdouble y = in.readDouble();</span><br><span class=\"line\">\t\tpoint = new Point2D.DOuble(x,y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 当你只需要保存一部分域时，使用transient关键字就有点麻烦，那么可以通过实现`Externalizable`接口，指定要保存的域\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student implements Externalizable&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate String stuId;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\t···</span><br><span class=\"line\">\t//重写读写方法</span><br><span class=\"line\">\tprivate void writeExternal(ObjectOutput out) throws IOException&#123;</span><br><span class=\"line\">\t\tout.writeUTF(name);</span><br><span class=\"line\">\t\tout.writeInt(age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void readExternal(ObjectInput in) throws IOException&#123;</span><br><span class=\"line\">\t\tname = in.readUTF():</span><br><span class=\"line\">\t\tage = in.readInt();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n&gt; PS:readObjecty和writeObject方法时私有的，只有被序列化机制调用，在流中只记录该对象所属的类，而readExternal/writeExternal方法时公共的，而且对包括超类数据在内的整个对象的存储和回复负责。\n</code></pre><hr>\n<h4 id=\"六、操作文件\"><a href=\"#六、操作文件\" class=\"headerlink\" title=\"六、操作文件\"></a>六、操作文件</h4><ul>\n<li><p>Path</p>\n<ul>\n<li>静态的Paths.get方法接收一个或多个字符串，并将它们用默认文件系统的路径分隔符（类Unix文件系统是/，Windows是\\）连接起来，返回一个Path对象，详情见API。如：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Path absolutye = Paths.get(&quot;/home&quot;.&quot;cay&quot;);</span><br><span class=\"line\">Path relative = Paths.get(&quot;myprog&quot;,&quot;conf&quot;,&quot;user.properties&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>读写文件：Files类可以使得普通文件操作变得快捷</p>\n<ul>\n<li>读取文件所有内容：<code>byte[] bytes = Files.readAllBytes(path);</code>,之后可以将其当做字符串<code>String content = new String(bytes,charset);</code></li>\n<li>向指定文件追加内容：<code>Files.write(path,content.getBytes(charset),StandardOpenOption.APPEND);</code></li>\n<li>将一个行集合</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、流\"><a href=\"#一、流\" class=\"headerlink\" title=\"一、流\"></a>一、流</h4><ul>\n<li>读写字节<ul>\n<li><code>InputStream.read和OutpueStream.write，</code></li>\n</ul>\n</li>\n<li><p>组合流过滤器</p>\n<ul>\n<li><p>某些流（如<code>FileInputStream</code>或者<code>FileOutputStream</code>）只能支持在字节级别上的读写，，没有读入数据类型的方法，而其他的流（DataInputStream）这些类就之只能读入数值类型，无法从文件中获取数据，因而对二者进行组合。如：    </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileInputStream fin = new FileInputStream(&quot;test.txt&quot;);</span><br><span class=\"line\">DataInputStream din = new DataInputStream(fin);</span><br><span class=\"line\">double s = din.readDouble();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>需要使用缓冲，可以使用一下构造器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataInputStream din = new DataInputStream(</span><br><span class=\"line\">\tnew BUfferInputStream(</span><br><span class=\"line\">\t\tnew FileInputStream(test.txt&quot;)));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要浏览下一个字节以确定是否是想要的值时，可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PushbackInputStream pbin = new PushbackInputStream(</span><br><span class=\"line\">\tnew BUfferInputStream(</span><br><span class=\"line\">\t\tnew FileInputStream(test.txt&quot;)));</span><br><span class=\"line\">//预读写一个字节</span><br><span class=\"line\">int b = pbin.read();</span><br><span class=\"line\">//不是所期望时将其推回流中</span><br><span class=\"line\">if(b != &apos;&lt;&apos;) pbin.unead(b);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"二、文本输入与输出\"><a href=\"#二、文本输入与输出\" class=\"headerlink\" title=\"二、文本输入与输出\"></a>二、文本输入与输出</h4><ul>\n<li>输出：<code>PrintWrite</code><ul>\n<li><code>PrintWrite out = new PrintWrite(&quot;test.txt&quot;);</code>等同于<code>PrintWrite out = new PrintWrite(new FileWrite(&quot;test.txt&quot;));</code></li>\n</ul>\n</li>\n<li>输入：<code>Scanner</code></li>\n<li>文本格式存储对象<ul>\n<li>用自己的格式依次存储各个字段，以特定字符分隔，如：<br>PINUULI|201625010417|1997|guangdong<h4 id=\"三、读写二进制数据\"><a href=\"#三、读写二进制数据\" class=\"headerlink\" title=\"三、读写二进制数据\"></a>三、读写二进制数据</h4></li>\n</ul>\n</li>\n<li>读：实现<code>DataInput</code>接口，如<code>DataInputStream，readInt，readBoolean</code>等方法</li>\n<li>写：实现<code>DataOutpu</code>t接口，如<code>DataOutputStream，writeInt，writeBoolean</code>等方法</li>\n<li>随机访问文件：<code>RandomAccessFile</code><br>可以在文件中的任何位置查找或者写入数据：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile in = new RandomAccessFile(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class=\"line\">RandomAccessFile inOut = new RandomAccessFile(&quot;test.txt&quot;,&quot;rw&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"四、ZIP文件\"><a href=\"#四、ZIP文件\" class=\"headerlink\" title=\"四、ZIP文件\"></a>四、ZIP文件</h4><blockquote>\n<p>每个zip文档都有一个头，包含注入给个文件名字和使用的压缩方法等信息。</p>\n<ul>\n<li>读：<code>ZipInputStream</code><ul>\n<li>用<code>getNextEntry</code>方法返回文档中这些项（文件）的<code>ZipEntry</code>对象<br>-<code>ZipInputStream</code>的<code>read</code>方法被修改为碰到当前项的结尾时返回-1，而不是整个zip文件的结尾，读完一个项之后，用<code>closeEntry</code>读入下一项</li>\n<li>在读入单个zip项后，不要关闭zip输入流，否则就不能再读入后续的项</li>\n<li>通读zip文件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZipInputStream zin = new ZipInputStream(new FileInputStream(&quot;test.zip&quot;));</span><br><span class=\"line\">ZipEntry entry;</span><br><span class=\"line\">Scanner in = new Scanner(zin);</span><br><span class=\"line\">while((entry = zin.getNextEntry()) != null)&#123;</span><br><span class=\"line\">\twhile(in.hasNextLine())&#123;</span><br><span class=\"line\">\t\tSystem.out.println(in.nextLine());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tzin.closeEntry();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>写：<code>ZipOutputStream</code><ul>\n<li>对于想要放入到zip文件中的每一个项，都应该创建一个<code>ZipEntry</code>对象，并将文件名传递给ZipEntry的构造器</li>\n<li>调用<code>ZipOutputStream</code>的<code>putNextEntry</code>方法开始写出新文件，并将数据发送到zip流中</li>\n<li>完成时调用<code>closeEntry</code>方法</li>\n<li>如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileOutputStream fout = new FilePutputStream(&quot;test.zip&quot;);</span><br><span class=\"line\">ZipOutputStream zout = new ZipOutputStream(fout);</span><br><span class=\"line\"></span><br><span class=\"line\">// 写一个文件</span><br><span class=\"line\">ZipEntry ze = new ZipEntry(&quot;filename&quot;);</span><br><span class=\"line\">zout.putNextENtry(ze);</span><br><span class=\"line\">send data to zout;</span><br><span class=\"line\">zout.closeEntry();</span><br><span class=\"line\"></span><br><span class=\"line\">zout.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"五、对象流与序列化\"><a href=\"#五、对象流与序列化\" class=\"headerlink\" title=\"五、对象流与序列化\"></a>五、对象流与序列化</h4><ul>\n<li>序列化:<code>ObjectOutputStream.writeObject()</code>,</li>\n<li>反序列化：<code>ObjectInputream.readObject()</code>，</li>\n<li>都需要实现<code>Serializable</code>接口</li>\n<li>只有读写对象时才能用writeObject/readObject方法，对于基本类型，使用writeInt/readInt等</li>\n<li>序列化算法：<ul>\n<li>对于遇到的每个对象都关联一个序列号</li>\n<li>对于每个对象，第一次遇到时，保存其对象数据到流中</li>\n<li>如果某个对象之前已经被保存过，那么只写出“与之前保存过的序列号为x的对象相同”，在反序列化时整个过程相反</li>\n<li>对于流中的对象，在第一次遇到其序列号时，构建它并使用流中的数据初始化，然后记录这个序列号与新对象之间的关联</li>\n<li>当遇到“与之前保存过的序列号为x的对象相同”标记时，获取与这个序列号相关联的对象引用，即相同对象的重复出现被存储为对这个对象的序列号的引用</li>\n</ul>\n</li>\n<li><p>修改默认的序列化机制</p>\n<blockquote>\n<p>一些数据域是不可序列化，或者没必要序列化的，比如只对本地方法有意义的窗口句柄的整数值，重新加载或者传送到其他机器上都没有用，那么就可以将他们标记成是transient，这些域在序列化时就会被跳过。<br>  可以把一些域存储为你想要的格式，想要为默认的读写行文添加验证时。</p>\n</blockquote>\n<ul>\n<li><p>当你只是想跳过一些域，或者想将这些域保存为你想要的格式，而大部分域依然按照默认的格式保存时，可以仍然实现<code>Serializable</code>接口，将那些数据域标记成transient，读写时调用默认的读写方法之后，再做自己想要的处理，如：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LabeledPoint implements Serializable&#123;</span><br><span class=\"line\">\tprivate String label;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//对于类LabeledPoint，point不能序列化，那么标志成transient，序列化时就会被跳过,之后存储点的坐标</span><br><span class=\"line\">\tprivate transient Point2D.Double point;</span><br><span class=\"line\">\t···</span><br><span class=\"line\">\t//重写读写方法</span><br><span class=\"line\">\tprivate void writeObject(ObjectOutputStream out) throws Exception&#123;</span><br><span class=\"line\">\t\tout.defaultWriteObjecy();</span><br><span class=\"line\">\t\tout.writeDouble(point.getX());</span><br><span class=\"line\">\t\tout.writeDouble(point.getY());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void readObject(ObjectInputStream in) throws IOException&#123;</span><br><span class=\"line\">\t\tin.defaultReadObject();</span><br><span class=\"line\">\t\tdouble x = in.readDouble();</span><br><span class=\"line\">\t\tdouble y = in.readDouble();</span><br><span class=\"line\">\t\tpoint = new Point2D.DOuble(x,y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 当你只需要保存一部分域时，使用transient关键字就有点麻烦，那么可以通过实现`Externalizable`接口，指定要保存的域\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student implements Externalizable&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate String stuId;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\t···</span><br><span class=\"line\">\t//重写读写方法</span><br><span class=\"line\">\tprivate void writeExternal(ObjectOutput out) throws IOException&#123;</span><br><span class=\"line\">\t\tout.writeUTF(name);</span><br><span class=\"line\">\t\tout.writeInt(age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void readExternal(ObjectInput in) throws IOException&#123;</span><br><span class=\"line\">\t\tname = in.readUTF():</span><br><span class=\"line\">\t\tage = in.readInt();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n&gt; PS:readObjecty和writeObject方法时私有的，只有被序列化机制调用，在流中只记录该对象所属的类，而readExternal/writeExternal方法时公共的，而且对包括超类数据在内的整个对象的存储和回复负责。\n</code></pre><hr>\n<h4 id=\"六、操作文件\"><a href=\"#六、操作文件\" class=\"headerlink\" title=\"六、操作文件\"></a>六、操作文件</h4><ul>\n<li><p>Path</p>\n<ul>\n<li>静态的Paths.get方法接收一个或多个字符串，并将它们用默认文件系统的路径分隔符（类Unix文件系统是/，Windows是\\）连接起来，返回一个Path对象，详情见API。如：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Path absolutye = Paths.get(&quot;/home&quot;.&quot;cay&quot;);</span><br><span class=\"line\">Path relative = Paths.get(&quot;myprog&quot;,&quot;conf&quot;,&quot;user.properties&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>读写文件：Files类可以使得普通文件操作变得快捷</p>\n<ul>\n<li>读取文件所有内容：<code>byte[] bytes = Files.readAllBytes(path);</code>,之后可以将其当做字符串<code>String content = new String(bytes,charset);</code></li>\n<li>向指定文件追加内容：<code>Files.write(path,content.getBytes(charset),StandardOpenOption.APPEND);</code></li>\n<li>将一个行集合</li>\n</ul>\n</li>\n</ul>\n"},{"title":"java 多线程","date":"2018-03-16T12:31:44.000Z","_content":"\n##### 一、实现多线程\n- 继承Thread\n- 实现Runnable接口\n\t > 因为java是单继承，当一个类已经继承了一个父类时要实现多线程就只能实现Runnable\n-  推荐使用实现Runnable接口，好处：\n\t-  适合多个相同程序代码的线程去处理统一资源\n\t-  可以避免由于java的单继承带来的局限\n\t-  代码能够被多个线程共享，代码与数据是独立的\n\n- 线程休眠\n\t>sleep\n- 线程中断\n\t> 中断线程：`interrupt()`\n\t>  \n\t> 检查线程是否中断：\n\t> `isInterrupted()`:实例方法，不会改变线程的中断状态\n\t> `interrupted()`:静态方法，会清除线程的中断状态\n\t> \n\t>  \n##### 二、线程同步\n\n##### 三、线程间通信\n##### 四、线程的正确停止\n\n##### 五、线程属性\n- 优先级\n\t- 默认情况下，线程继承它的父线程的优先级\n\t- 通过serPriority方法设置，范围为Thread.PRIORITY(1)-Thread.MAX_PRIORITY(10)\n- 守护线程\n\t- 当进程中只有后台线程运行时，进程就会结束\n\t- 唯一用途是给其他线程提供服务，如计时器滴答信号\n\t- 应该永远不去访问固有资源，如文件、数据库等，因为他随时可以能中断\n- 未捕获异常处理器\n\t-  线程执行完run方法即可正常退出，如果发生了没有捕获的异常则会异常退出。大多数情况下，由于异常导致的线程退出都不是我们想要的。因此需要尽可能地捕获可以处理的异常\n\t-  可以用setUncaughtExceptionHandler为线程安装一个处理器，或者用Thread的静态方法setDefaultUncaughtException安装默认处理器\n\t-  如果，没有安装默认处理器，也没有独立为线程安装处理器，则此时处理器为该线程的ThreadGroup对象\n\n#####  hah\n\n","source":"_posts/java-multithead-note.md","raw":"---\ntitle: java 多线程\ndate: 2018-03-16 20:31:44\ncategories: \"javase笔记\" \ntags: \n\t- javase\n---\n\n##### 一、实现多线程\n- 继承Thread\n- 实现Runnable接口\n\t > 因为java是单继承，当一个类已经继承了一个父类时要实现多线程就只能实现Runnable\n-  推荐使用实现Runnable接口，好处：\n\t-  适合多个相同程序代码的线程去处理统一资源\n\t-  可以避免由于java的单继承带来的局限\n\t-  代码能够被多个线程共享，代码与数据是独立的\n\n- 线程休眠\n\t>sleep\n- 线程中断\n\t> 中断线程：`interrupt()`\n\t>  \n\t> 检查线程是否中断：\n\t> `isInterrupted()`:实例方法，不会改变线程的中断状态\n\t> `interrupted()`:静态方法，会清除线程的中断状态\n\t> \n\t>  \n##### 二、线程同步\n\n##### 三、线程间通信\n##### 四、线程的正确停止\n\n##### 五、线程属性\n- 优先级\n\t- 默认情况下，线程继承它的父线程的优先级\n\t- 通过serPriority方法设置，范围为Thread.PRIORITY(1)-Thread.MAX_PRIORITY(10)\n- 守护线程\n\t- 当进程中只有后台线程运行时，进程就会结束\n\t- 唯一用途是给其他线程提供服务，如计时器滴答信号\n\t- 应该永远不去访问固有资源，如文件、数据库等，因为他随时可以能中断\n- 未捕获异常处理器\n\t-  线程执行完run方法即可正常退出，如果发生了没有捕获的异常则会异常退出。大多数情况下，由于异常导致的线程退出都不是我们想要的。因此需要尽可能地捕获可以处理的异常\n\t-  可以用setUncaughtExceptionHandler为线程安装一个处理器，或者用Thread的静态方法setDefaultUncaughtException安装默认处理器\n\t-  如果，没有安装默认处理器，也没有独立为线程安装处理器，则此时处理器为该线程的ThreadGroup对象\n\n#####  hah\n\n","slug":"java-multithead-note","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8oj000j8lyjk9wrqsa6","content":"<h5 id=\"一、实现多线程\"><a href=\"#一、实现多线程\" class=\"headerlink\" title=\"一、实现多线程\"></a>一、实现多线程</h5><ul>\n<li>继承Thread</li>\n<li>实现Runnable接口<blockquote>\n<p>因为java是单继承，当一个类已经继承了一个父类时要实现多线程就只能实现Runnable</p>\n</blockquote>\n</li>\n<li><p>推荐使用实现Runnable接口，好处：</p>\n<ul>\n<li>适合多个相同程序代码的线程去处理统一资源</li>\n<li>可以避免由于java的单继承带来的局限</li>\n<li>代码能够被多个线程共享，代码与数据是独立的</li>\n</ul>\n</li>\n<li><p>线程休眠</p>\n<blockquote>\n<p>sleep</p>\n</blockquote>\n</li>\n<li>线程中断<blockquote>\n<p>中断线程：<code>interrupt()</code></p>\n<p>检查线程是否中断：<br><code>isInterrupted()</code>:实例方法，不会改变线程的中断状态<br><code>interrupted()</code>:静态方法，会清除线程的中断状态</p>\n<h5 id=\"二、线程同步\"><a href=\"#二、线程同步\" class=\"headerlink\" title=\"二、线程同步\"></a>二、线程同步</h5></blockquote>\n</li>\n</ul>\n<h5 id=\"三、线程间通信\"><a href=\"#三、线程间通信\" class=\"headerlink\" title=\"三、线程间通信\"></a>三、线程间通信</h5><h5 id=\"四、线程的正确停止\"><a href=\"#四、线程的正确停止\" class=\"headerlink\" title=\"四、线程的正确停止\"></a>四、线程的正确停止</h5><h5 id=\"五、线程属性\"><a href=\"#五、线程属性\" class=\"headerlink\" title=\"五、线程属性\"></a>五、线程属性</h5><ul>\n<li>优先级<ul>\n<li>默认情况下，线程继承它的父线程的优先级</li>\n<li>通过serPriority方法设置，范围为Thread.PRIORITY(1)-Thread.MAX_PRIORITY(10)</li>\n</ul>\n</li>\n<li>守护线程<ul>\n<li>当进程中只有后台线程运行时，进程就会结束</li>\n<li>唯一用途是给其他线程提供服务，如计时器滴答信号</li>\n<li>应该永远不去访问固有资源，如文件、数据库等，因为他随时可以能中断</li>\n</ul>\n</li>\n<li>未捕获异常处理器<ul>\n<li>线程执行完run方法即可正常退出，如果发生了没有捕获的异常则会异常退出。大多数情况下，由于异常导致的线程退出都不是我们想要的。因此需要尽可能地捕获可以处理的异常</li>\n<li>可以用setUncaughtExceptionHandler为线程安装一个处理器，或者用Thread的静态方法setDefaultUncaughtException安装默认处理器</li>\n<li>如果，没有安装默认处理器，也没有独立为线程安装处理器，则此时处理器为该线程的ThreadGroup对象</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"hah\"><a href=\"#hah\" class=\"headerlink\" title=\"hah\"></a>hah</h5>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"一、实现多线程\"><a href=\"#一、实现多线程\" class=\"headerlink\" title=\"一、实现多线程\"></a>一、实现多线程</h5><ul>\n<li>继承Thread</li>\n<li>实现Runnable接口<blockquote>\n<p>因为java是单继承，当一个类已经继承了一个父类时要实现多线程就只能实现Runnable</p>\n</blockquote>\n</li>\n<li><p>推荐使用实现Runnable接口，好处：</p>\n<ul>\n<li>适合多个相同程序代码的线程去处理统一资源</li>\n<li>可以避免由于java的单继承带来的局限</li>\n<li>代码能够被多个线程共享，代码与数据是独立的</li>\n</ul>\n</li>\n<li><p>线程休眠</p>\n<blockquote>\n<p>sleep</p>\n</blockquote>\n</li>\n<li>线程中断<blockquote>\n<p>中断线程：<code>interrupt()</code></p>\n<p>检查线程是否中断：<br><code>isInterrupted()</code>:实例方法，不会改变线程的中断状态<br><code>interrupted()</code>:静态方法，会清除线程的中断状态</p>\n<h5 id=\"二、线程同步\"><a href=\"#二、线程同步\" class=\"headerlink\" title=\"二、线程同步\"></a>二、线程同步</h5></blockquote>\n</li>\n</ul>\n<h5 id=\"三、线程间通信\"><a href=\"#三、线程间通信\" class=\"headerlink\" title=\"三、线程间通信\"></a>三、线程间通信</h5><h5 id=\"四、线程的正确停止\"><a href=\"#四、线程的正确停止\" class=\"headerlink\" title=\"四、线程的正确停止\"></a>四、线程的正确停止</h5><h5 id=\"五、线程属性\"><a href=\"#五、线程属性\" class=\"headerlink\" title=\"五、线程属性\"></a>五、线程属性</h5><ul>\n<li>优先级<ul>\n<li>默认情况下，线程继承它的父线程的优先级</li>\n<li>通过serPriority方法设置，范围为Thread.PRIORITY(1)-Thread.MAX_PRIORITY(10)</li>\n</ul>\n</li>\n<li>守护线程<ul>\n<li>当进程中只有后台线程运行时，进程就会结束</li>\n<li>唯一用途是给其他线程提供服务，如计时器滴答信号</li>\n<li>应该永远不去访问固有资源，如文件、数据库等，因为他随时可以能中断</li>\n</ul>\n</li>\n<li>未捕获异常处理器<ul>\n<li>线程执行完run方法即可正常退出，如果发生了没有捕获的异常则会异常退出。大多数情况下，由于异常导致的线程退出都不是我们想要的。因此需要尽可能地捕获可以处理的异常</li>\n<li>可以用setUncaughtExceptionHandler为线程安装一个处理器，或者用Thread的静态方法setDefaultUncaughtException安装默认处理器</li>\n<li>如果，没有安装默认处理器，也没有独立为线程安装处理器，则此时处理器为该线程的ThreadGroup对象</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"hah\"><a href=\"#hah\" class=\"headerlink\" title=\"hah\"></a>hah</h5>"},{"title":"java反射","date":"2018-07-22T05:30:00.000Z","_content":"#### Class类的使用\n1.类是对象，任何一个类都是java.lang.class类的实例对象，这个类，这个实例对象可以有三种表达方式，比如Student类：\n- 任何一个类都有一个隐含的静态成员变量class\n    ```java\n    Class c1 = Student.class;\n    ```\n- 通过getClass方法获得\n    ```java\n    Class c2 = Student.getClass();\n    ```\n- forName\n    ```java\n    Class c3 = Class.forName(\"com.Student\");\n    ```\n    > c1,c2,c3表示了Student类的类类型（class type),可以通过类的类类型创建该类的对象实例---->通过c1 or c2 or c3创建Student的实例对象\n    ```java\n    Student stu = c1.newInstance();\n    ```\n#### 动态加载类\n- 静态加载类：编译时加载的类，通过new创建对象是静态加载类\n- 动态加载类：运行时加载的类，编译时不用管类是否存在或者是否错误等问题\n\n#### 获取方法信息和成员变量，构造函数信息\n- 方法信息\n    - 所有的public的函数，包括父类继承而来的\n    ```java\n    Method[] ms = c.getMethods();\n    ```\n    - 所有该类自己声明的方法，不问访问权限\n     ```java\n    Method[] ms = c.getDeclaredMethods();\n    ```\n    - 返回值类型的类类型\n    ```java\n    Class returnType = ms[i].getReturnType();\n    ```\n    - 参数列表的类型的类类型\n    ```java\n    Class[] paramTypes = ms[i].getParameterTypes();\n    ```\n    - 方法的名称\n    ```java\n    String methodName = ms[i].getName();\n    ```\n- 成员变量\n    - 所有的public的成员变量的信息\n    ```java\n    Field[] fs = c.getFields();\n    ```\n    - 该类自己声明的成员变量的信息\n    ```java\n    Field[] fs = c.getDeclaredFields();\n    ```\n    - 成员变量的类型的类类型\n    ```java\n    Class fieldType = field.getType();\n    ```\n    - 成员变量的名称\n    ```java\n    String fieldName = field.getName();\n    ```\n- 构造函数\n    - 所有的public构造函数\n    ```java\n    Constructor[] cs = c.getConstructors();\n    ```\n    - 所有的构造函数\n    ```java\n    Constructor[] cs = c.getDeclaredConstructors();\n    ```\n    - 构造函数的参数列表，得到的是参数列表的类类型\n    ```java\n    Class fieldType = field.getType();\n    ``` \n> 更多方法看API文档\n#### 方法反射的基本操作 \n现有A类如下：\n```java\nclass A{\n\tpublic void print(){\n\t\tSystem.out.println(\"helloworld\");\n\t}\n\tpublic void print(int a,int b){\n\t\tSystem.out.println(a+b);\n\t}\n\tpublic void print(String a,String b){\n\t\tSystem.out.println(a.toUpperCase()+\",\"+b.toLowerCase());\n\t}\n}\n```\n\n1.要获取一个方法就是获取类的信息，获取类的信息首先要获取类的类类型\n```java\nA a1 = new A();\nClass c = a1.getClass();\n```\n2.通过名称和参数列表来获取方法\n```java\nMethod m = c.getMethod(\"print\", int.class,int.class);\n```\n3.方法的反射操作\n```java\nObject o = m.invoke(a1, 10,20);\n```\n> 这个操作的效果等同于`a1.print(10,20)`\n\n> 通过方法的反射，我们可以绕过编译","source":"_posts/java反射.md","raw":"---\ntitle: java反射\ndate: 2018-07-22 13:30:00\ncategories: \"javase笔记\" \ntags:\n    - javase\n---\n#### Class类的使用\n1.类是对象，任何一个类都是java.lang.class类的实例对象，这个类，这个实例对象可以有三种表达方式，比如Student类：\n- 任何一个类都有一个隐含的静态成员变量class\n    ```java\n    Class c1 = Student.class;\n    ```\n- 通过getClass方法获得\n    ```java\n    Class c2 = Student.getClass();\n    ```\n- forName\n    ```java\n    Class c3 = Class.forName(\"com.Student\");\n    ```\n    > c1,c2,c3表示了Student类的类类型（class type),可以通过类的类类型创建该类的对象实例---->通过c1 or c2 or c3创建Student的实例对象\n    ```java\n    Student stu = c1.newInstance();\n    ```\n#### 动态加载类\n- 静态加载类：编译时加载的类，通过new创建对象是静态加载类\n- 动态加载类：运行时加载的类，编译时不用管类是否存在或者是否错误等问题\n\n#### 获取方法信息和成员变量，构造函数信息\n- 方法信息\n    - 所有的public的函数，包括父类继承而来的\n    ```java\n    Method[] ms = c.getMethods();\n    ```\n    - 所有该类自己声明的方法，不问访问权限\n     ```java\n    Method[] ms = c.getDeclaredMethods();\n    ```\n    - 返回值类型的类类型\n    ```java\n    Class returnType = ms[i].getReturnType();\n    ```\n    - 参数列表的类型的类类型\n    ```java\n    Class[] paramTypes = ms[i].getParameterTypes();\n    ```\n    - 方法的名称\n    ```java\n    String methodName = ms[i].getName();\n    ```\n- 成员变量\n    - 所有的public的成员变量的信息\n    ```java\n    Field[] fs = c.getFields();\n    ```\n    - 该类自己声明的成员变量的信息\n    ```java\n    Field[] fs = c.getDeclaredFields();\n    ```\n    - 成员变量的类型的类类型\n    ```java\n    Class fieldType = field.getType();\n    ```\n    - 成员变量的名称\n    ```java\n    String fieldName = field.getName();\n    ```\n- 构造函数\n    - 所有的public构造函数\n    ```java\n    Constructor[] cs = c.getConstructors();\n    ```\n    - 所有的构造函数\n    ```java\n    Constructor[] cs = c.getDeclaredConstructors();\n    ```\n    - 构造函数的参数列表，得到的是参数列表的类类型\n    ```java\n    Class fieldType = field.getType();\n    ``` \n> 更多方法看API文档\n#### 方法反射的基本操作 \n现有A类如下：\n```java\nclass A{\n\tpublic void print(){\n\t\tSystem.out.println(\"helloworld\");\n\t}\n\tpublic void print(int a,int b){\n\t\tSystem.out.println(a+b);\n\t}\n\tpublic void print(String a,String b){\n\t\tSystem.out.println(a.toUpperCase()+\",\"+b.toLowerCase());\n\t}\n}\n```\n\n1.要获取一个方法就是获取类的信息，获取类的信息首先要获取类的类类型\n```java\nA a1 = new A();\nClass c = a1.getClass();\n```\n2.通过名称和参数列表来获取方法\n```java\nMethod m = c.getMethod(\"print\", int.class,int.class);\n```\n3.方法的反射操作\n```java\nObject o = m.invoke(a1, 10,20);\n```\n> 这个操作的效果等同于`a1.print(10,20)`\n\n> 通过方法的反射，我们可以绕过编译","slug":"java反射","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8om000n8lyj5aqkoo85","content":"<h4 id=\"Class类的使用\"><a href=\"#Class类的使用\" class=\"headerlink\" title=\"Class类的使用\"></a>Class类的使用</h4><p>1.类是对象，任何一个类都是java.lang.class类的实例对象，这个类，这个实例对象可以有三种表达方式，比如Student类：</p>\n<ul>\n<li><p>任何一个类都有一个隐含的静态成员变量class</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c1 = Student.class;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过getClass方法获得</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c2 = Student.getClass();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>forName</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c3 = Class.forName(<span class=\"string\">\"com.Student\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>c1,c2,c3表示了Student类的类类型（class type),可以通过类的类类型创建该类的对象实例—-&gt;通过c1 or c2 or c3创建Student的实例对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student stu = c1.newInstance();</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"动态加载类\"><a href=\"#动态加载类\" class=\"headerlink\" title=\"动态加载类\"></a>动态加载类</h4><ul>\n<li>静态加载类：编译时加载的类，通过new创建对象是静态加载类</li>\n<li>动态加载类：运行时加载的类，编译时不用管类是否存在或者是否错误等问题</li>\n</ul>\n<h4 id=\"获取方法信息和成员变量，构造函数信息\"><a href=\"#获取方法信息和成员变量，构造函数信息\" class=\"headerlink\" title=\"获取方法信息和成员变量，构造函数信息\"></a>获取方法信息和成员变量，构造函数信息</h4><ul>\n<li><p>方法信息</p>\n<ul>\n<li><p>所有的public的函数，包括父类继承而来的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] ms = c.getMethods();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有该类自己声明的方法，不问访问权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] ms = c.getDeclaredMethods();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回值类型的类类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class returnType = ms[i].getReturnType();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数列表的类型的类类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class[] paramTypes = ms[i].getParameterTypes();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法的名称</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String methodName = ms[i].getName();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>成员变量</p>\n<ul>\n<li><p>所有的public的成员变量的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field[] fs = c.getFields();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>该类自己声明的成员变量的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field[] fs = c.getDeclaredFields();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>成员变量的类型的类类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class fieldType = field.getType();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>成员变量的名称</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String fieldName = field.getName();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>构造函数</p>\n<ul>\n<li><p>所有的public构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor[] cs = c.getConstructors();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有的构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor[] cs = c.getDeclaredConstructors();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数的参数列表，得到的是参数列表的类类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    Class fieldType = field.getType();</span><br><span class=\"line\">    ``` </span><br><span class=\"line\">&gt; 更多方法看API文档</span><br><span class=\"line\">#### 方法反射的基本操作 </span><br><span class=\"line\">现有A类如下：</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"helloworld\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(a+b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String a,String b)</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(a.toUpperCase()+<span class=\"string\">\",\"</span>+b.toLowerCase());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>1.要获取一个方法就是获取类的信息，获取类的信息首先要获取类的类类型<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a1 = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">Class c = a1.getClass();</span><br></pre></td></tr></table></figure></p>\n<p>2.通过名称和参数列表来获取方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method m = c.getMethod(<span class=\"string\">\"print\"</span>, <span class=\"keyword\">int</span>.class,<span class=\"keyword\">int</span>.class);</span><br></pre></td></tr></table></figure></p>\n<p>3.方法的反射操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object o = m.invoke(a1, <span class=\"number\">10</span>,<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这个操作的效果等同于<code>a1.print(10,20)</code></p>\n<p>通过方法的反射，我们可以绕过编译</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Class类的使用\"><a href=\"#Class类的使用\" class=\"headerlink\" title=\"Class类的使用\"></a>Class类的使用</h4><p>1.类是对象，任何一个类都是java.lang.class类的实例对象，这个类，这个实例对象可以有三种表达方式，比如Student类：</p>\n<ul>\n<li><p>任何一个类都有一个隐含的静态成员变量class</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c1 = Student.class;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过getClass方法获得</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c2 = Student.getClass();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>forName</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c3 = Class.forName(<span class=\"string\">\"com.Student\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>c1,c2,c3表示了Student类的类类型（class type),可以通过类的类类型创建该类的对象实例—-&gt;通过c1 or c2 or c3创建Student的实例对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student stu = c1.newInstance();</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"动态加载类\"><a href=\"#动态加载类\" class=\"headerlink\" title=\"动态加载类\"></a>动态加载类</h4><ul>\n<li>静态加载类：编译时加载的类，通过new创建对象是静态加载类</li>\n<li>动态加载类：运行时加载的类，编译时不用管类是否存在或者是否错误等问题</li>\n</ul>\n<h4 id=\"获取方法信息和成员变量，构造函数信息\"><a href=\"#获取方法信息和成员变量，构造函数信息\" class=\"headerlink\" title=\"获取方法信息和成员变量，构造函数信息\"></a>获取方法信息和成员变量，构造函数信息</h4><ul>\n<li><p>方法信息</p>\n<ul>\n<li><p>所有的public的函数，包括父类继承而来的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] ms = c.getMethods();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有该类自己声明的方法，不问访问权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] ms = c.getDeclaredMethods();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回值类型的类类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class returnType = ms[i].getReturnType();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数列表的类型的类类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class[] paramTypes = ms[i].getParameterTypes();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法的名称</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String methodName = ms[i].getName();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>成员变量</p>\n<ul>\n<li><p>所有的public的成员变量的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field[] fs = c.getFields();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>该类自己声明的成员变量的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field[] fs = c.getDeclaredFields();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>成员变量的类型的类类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class fieldType = field.getType();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>成员变量的名称</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String fieldName = field.getName();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>构造函数</p>\n<ul>\n<li><p>所有的public构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor[] cs = c.getConstructors();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有的构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor[] cs = c.getDeclaredConstructors();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数的参数列表，得到的是参数列表的类类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    Class fieldType = field.getType();</span><br><span class=\"line\">    ``` </span><br><span class=\"line\">&gt; 更多方法看API文档</span><br><span class=\"line\">#### 方法反射的基本操作 </span><br><span class=\"line\">现有A类如下：</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"helloworld\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(a+b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String a,String b)</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(a.toUpperCase()+<span class=\"string\">\",\"</span>+b.toLowerCase());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>1.要获取一个方法就是获取类的信息，获取类的信息首先要获取类的类类型<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a1 = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">Class c = a1.getClass();</span><br></pre></td></tr></table></figure></p>\n<p>2.通过名称和参数列表来获取方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method m = c.getMethod(<span class=\"string\">\"print\"</span>, <span class=\"keyword\">int</span>.class,<span class=\"keyword\">int</span>.class);</span><br></pre></td></tr></table></figure></p>\n<p>3.方法的反射操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object o = m.invoke(a1, <span class=\"number\">10</span>,<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这个操作的效果等同于<code>a1.print(10,20)</code></p>\n<p>通过方法的反射，我们可以绕过编译</p>\n</blockquote>\n"},{"title":"java异常学习笔记","date":"2018-07-10T07:12:11.000Z","_content":"java异常结构\n![structure_of_java_exception](https://i.imgur.com/dAXpn87.png)\n\n声明受查异常\n- 子类覆盖超类的方法时，子类方法中可以抛出更特定的异常或者不抛出异常，但不能抛出更通用的异常。 \n- 如果超类方法中没有抛出异常，则子类也不能抛出异常。\n\n- 如果方法中声明会抛出一个异常，而这个类是某个特定类的实例时，则方法有可能抛出这个类的异常或这个类的任意子类的异常。\n\n捕捉多个异常时，只有异常类型彼此之间不存在子类关系时才可以合并，并且异常变量隐含为final类型，不可为其赋值。\n\n### \n- 定义简单泛型类\n- 定义泛型方法\n- 类型变量的限定\n- 类型擦除\n- 定义泛型时所需要注意的一些点\n\t- 不能用基本类型实例化类型参数\n\n擦除后，泛型类含有Object类型的域，补鞥呢存储基本类型\n\n\t- 运行时类型查询只适用于原始类型\n\n\t- 不能创建参数化类型的数组\n\t- 避免Varargs警告\n\t- \n\n","source":"_posts/java异常学习笔记.md","raw":"---\ntitle: java异常学习笔记\ndate: 2018-07-10 15:12:11\ncategories: \"javase笔记\" \ntags:\n\t- javase\n---\njava异常结构\n![structure_of_java_exception](https://i.imgur.com/dAXpn87.png)\n\n声明受查异常\n- 子类覆盖超类的方法时，子类方法中可以抛出更特定的异常或者不抛出异常，但不能抛出更通用的异常。 \n- 如果超类方法中没有抛出异常，则子类也不能抛出异常。\n\n- 如果方法中声明会抛出一个异常，而这个类是某个特定类的实例时，则方法有可能抛出这个类的异常或这个类的任意子类的异常。\n\n捕捉多个异常时，只有异常类型彼此之间不存在子类关系时才可以合并，并且异常变量隐含为final类型，不可为其赋值。\n\n### \n- 定义简单泛型类\n- 定义泛型方法\n- 类型变量的限定\n- 类型擦除\n- 定义泛型时所需要注意的一些点\n\t- 不能用基本类型实例化类型参数\n\n擦除后，泛型类含有Object类型的域，补鞥呢存储基本类型\n\n\t- 运行时类型查询只适用于原始类型\n\n\t- 不能创建参数化类型的数组\n\t- 避免Varargs警告\n\t- \n\n","slug":"java异常学习笔记","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8oo000p8lyj5ddu5ufx","content":"<p>java异常结构<br><img src=\"https://i.imgur.com/dAXpn87.png\" alt=\"structure_of_java_exception\"></p>\n<p>声明受查异常</p>\n<ul>\n<li>子类覆盖超类的方法时，子类方法中可以抛出更特定的异常或者不抛出异常，但不能抛出更通用的异常。 </li>\n<li><p>如果超类方法中没有抛出异常，则子类也不能抛出异常。</p>\n</li>\n<li><p>如果方法中声明会抛出一个异常，而这个类是某个特定类的实例时，则方法有可能抛出这个类的异常或这个类的任意子类的异常。</p>\n</li>\n</ul>\n<p>捕捉多个异常时，只有异常类型彼此之间不存在子类关系时才可以合并，并且异常变量隐含为final类型，不可为其赋值。</p>\n<p>### </p>\n<ul>\n<li>定义简单泛型类</li>\n<li>定义泛型方法</li>\n<li>类型变量的限定</li>\n<li>类型擦除</li>\n<li>定义泛型时所需要注意的一些点<ul>\n<li>不能用基本类型实例化类型参数</li>\n</ul>\n</li>\n</ul>\n<p>擦除后，泛型类含有Object类型的域，补鞥呢存储基本类型</p>\n<pre><code>- 运行时类型查询只适用于原始类型\n\n- 不能创建参数化类型的数组\n- 避免Varargs警告\n- \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>java异常结构<br><img src=\"https://i.imgur.com/dAXpn87.png\" alt=\"structure_of_java_exception\"></p>\n<p>声明受查异常</p>\n<ul>\n<li>子类覆盖超类的方法时，子类方法中可以抛出更特定的异常或者不抛出异常，但不能抛出更通用的异常。 </li>\n<li><p>如果超类方法中没有抛出异常，则子类也不能抛出异常。</p>\n</li>\n<li><p>如果方法中声明会抛出一个异常，而这个类是某个特定类的实例时，则方法有可能抛出这个类的异常或这个类的任意子类的异常。</p>\n</li>\n</ul>\n<p>捕捉多个异常时，只有异常类型彼此之间不存在子类关系时才可以合并，并且异常变量隐含为final类型，不可为其赋值。</p>\n<p>### </p>\n<ul>\n<li>定义简单泛型类</li>\n<li>定义泛型方法</li>\n<li>类型变量的限定</li>\n<li>类型擦除</li>\n<li>定义泛型时所需要注意的一些点<ul>\n<li>不能用基本类型实例化类型参数</li>\n</ul>\n</li>\n</ul>\n<p>擦除后，泛型类含有Object类型的域，补鞥呢存储基本类型</p>\n<pre><code>- 运行时类型查询只适用于原始类型\n\n- 不能创建参数化类型的数组\n- 避免Varargs警告\n- \n</code></pre>"},{"title":"IntelliJ IDEA 使用技巧","date":"2018-04-30T02:18:35.000Z","_content":"一、跳转快捷键\n\n窗口切换：Ctrl + alt + [ / ]\n文件切换：alt + -> / <-\n关闭文件：ctrl + f4\n最近修改文件： ctrl + tab + E\n最近浏览文件： ctrl + E\n回到上次编辑的地方 last edit location: ctrl + shift + backspace \n回到上次浏览的地方 back/forward: ctrl + alt + ->/<- \n利用书签跳转：\nbookmarks:f11\nbookmarks mnemonic: ctrl + f11\nshow bookmarks: shift + f11\n书签跳转：Ctrl + 1（n）\n\n收藏（类或方法）：shift + alt + F\nemacsIDEAs 跳转：shift + j(这个是自己设的)  然后按要找单词的首字母，如p，然后选择\n编辑区和文件去的跳转，从编辑区到文件区：alt + 1(n)\n\t\t\t\t   从文件去到编辑区：esc\n\n二、精准搜索\n\t搜索类：ctrl + alt + N(Ctrl + N 已被vim占用）\n\t搜索文件： ctrl + shift + N \n\t搜索符号（方法和属性）：ctrl + shift + alt + N\n\t搜索字符串： ctrl + shift + F\n\t\t\tMatch case :区分大小写\n\t\t\tWords：搜索的字符串是一个单词\n\t\t\tRegex：按照正则表达式搜索\n\t\t\tFile mask:指定文件类型\n\t\t\tIn Project：在项目下搜搜\n\t\t\tModule：在当前模块下搜索\n\t\t\tDirectory：在指定目录下搜索\n\t\t\tScope：在指定范围下搜索\n\t\t\t\n\n\n\n \n\n","source":"_posts/IntelliJ-IDEA-使用技巧.md","raw":"---\ntitle: IntelliJ IDEA 使用技巧\ndate: 2018-04-30 10:18:35\ncategories: \"编辑器\" \ntags:\n\t- IDEA\n---\n一、跳转快捷键\n\n窗口切换：Ctrl + alt + [ / ]\n文件切换：alt + -> / <-\n关闭文件：ctrl + f4\n最近修改文件： ctrl + tab + E\n最近浏览文件： ctrl + E\n回到上次编辑的地方 last edit location: ctrl + shift + backspace \n回到上次浏览的地方 back/forward: ctrl + alt + ->/<- \n利用书签跳转：\nbookmarks:f11\nbookmarks mnemonic: ctrl + f11\nshow bookmarks: shift + f11\n书签跳转：Ctrl + 1（n）\n\n收藏（类或方法）：shift + alt + F\nemacsIDEAs 跳转：shift + j(这个是自己设的)  然后按要找单词的首字母，如p，然后选择\n编辑区和文件去的跳转，从编辑区到文件区：alt + 1(n)\n\t\t\t\t   从文件去到编辑区：esc\n\n二、精准搜索\n\t搜索类：ctrl + alt + N(Ctrl + N 已被vim占用）\n\t搜索文件： ctrl + shift + N \n\t搜索符号（方法和属性）：ctrl + shift + alt + N\n\t搜索字符串： ctrl + shift + F\n\t\t\tMatch case :区分大小写\n\t\t\tWords：搜索的字符串是一个单词\n\t\t\tRegex：按照正则表达式搜索\n\t\t\tFile mask:指定文件类型\n\t\t\tIn Project：在项目下搜搜\n\t\t\tModule：在当前模块下搜索\n\t\t\tDirectory：在指定目录下搜索\n\t\t\tScope：在指定范围下搜索\n\t\t\t\n\n\n\n \n\n","slug":"IntelliJ-IDEA-使用技巧","published":1,"updated":"2018-07-23T10:30:32.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8op000u8lyjqcaz2jhf","content":"<p>一、跳转快捷键</p>\n<p>窗口切换：Ctrl + alt + [ / ]<br>文件切换：alt + -&gt; / &lt;-<br>关闭文件：ctrl + f4<br>最近修改文件： ctrl + tab + E<br>最近浏览文件： ctrl + E<br>回到上次编辑的地方 last edit location: ctrl + shift + backspace<br>回到上次浏览的地方 back/forward: ctrl + alt + -&gt;/&lt;-<br>利用书签跳转：<br>bookmarks:f11<br>bookmarks mnemonic: ctrl + f11<br>show bookmarks: shift + f11<br>书签跳转：Ctrl + 1（n）</p>\n<p>收藏（类或方法）：shift + alt + F<br>emacsIDEAs 跳转：shift + j(这个是自己设的)  然后按要找单词的首字母，如p，然后选择<br>编辑区和文件去的跳转，从编辑区到文件区：alt + 1(n)<br>                   从文件去到编辑区：esc</p>\n<p>二、精准搜索<br>    搜索类：ctrl + alt + N(Ctrl + N 已被vim占用）<br>    搜索文件： ctrl + shift + N<br>    搜索符号（方法和属性）：ctrl + shift + alt + N<br>    搜索字符串： ctrl + shift + F<br>            Match case :区分大小写<br>            Words：搜索的字符串是一个单词<br>            Regex：按照正则表达式搜索<br>            File mask:指定文件类型<br>            In Project：在项目下搜搜<br>            Module：在当前模块下搜索<br>            Directory：在指定目录下搜索<br>            Scope：在指定范围下搜索</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一、跳转快捷键</p>\n<p>窗口切换：Ctrl + alt + [ / ]<br>文件切换：alt + -&gt; / &lt;-<br>关闭文件：ctrl + f4<br>最近修改文件： ctrl + tab + E<br>最近浏览文件： ctrl + E<br>回到上次编辑的地方 last edit location: ctrl + shift + backspace<br>回到上次浏览的地方 back/forward: ctrl + alt + -&gt;/&lt;-<br>利用书签跳转：<br>bookmarks:f11<br>bookmarks mnemonic: ctrl + f11<br>show bookmarks: shift + f11<br>书签跳转：Ctrl + 1（n）</p>\n<p>收藏（类或方法）：shift + alt + F<br>emacsIDEAs 跳转：shift + j(这个是自己设的)  然后按要找单词的首字母，如p，然后选择<br>编辑区和文件去的跳转，从编辑区到文件区：alt + 1(n)<br>                   从文件去到编辑区：esc</p>\n<p>二、精准搜索<br>    搜索类：ctrl + alt + N(Ctrl + N 已被vim占用）<br>    搜索文件： ctrl + shift + N<br>    搜索符号（方法和属性）：ctrl + shift + alt + N<br>    搜索字符串： ctrl + shift + F<br>            Match case :区分大小写<br>            Words：搜索的字符串是一个单词<br>            Regex：按照正则表达式搜索<br>            File mask:指定文件类型<br>            In Project：在项目下搜搜<br>            Module：在当前模块下搜索<br>            Directory：在指定目录下搜索<br>            Scope：在指定范围下搜索</p>\n"},{"title":"java注解","date":"2018-07-23T04:39:36.000Z","_content":"#### 一、注解分类\n**源码注解（SOURCE）**：注解只在源码中存在，编译成.class文件就不存在\n**编译时注解（CLASS）**：注解在源码和.class文件都存在\n**运行时注解（RUNTIME）**：在运行阶段还起作用，甚至会影响运行逻辑的注解\n**元注解**：注解的注解\n\n\n#### 二、自定义注解\n**定义：**\n```java\n//元注解\n@Target({ElementType.METHOD,ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\n@Documented\n\n//定义注解和成员变量\npublic @interface Description{\n    String desc();\n    String author();\n    int age() default 20;\n}\n```\n- `@Target({ElementType.METHOD,ElementType.TYPE})`\n\n> 作用域,可以包括`CONSTRUCTOR`(构造方法)、`FIELD`(字段)、`LOCAL_VARIABLE`(局部变量)、`METHOD`(方法)、`PACKAGE`(包)、`PARAMETER`(参数)、`TYPE`(类和接口)声明中，这里作用域为方法、类和接口\n\n- `@Retention(RetentionPolicy.RUNTIME)`\n\n> 生命周期，可以设置为Source，CLASS，RUNTIME,这里生命周期是运行时\n\n- `@Inherited`\n\n> 标识性注解，允许子类继承，只适用于类的继承，对接口的继承无效，而且只会继承类级别的注解，不会继承超类的方法和成员变量的注解\n\n- `@Documented`\n\n> 生成javadoc包含注解信息\n\n- `@interface`\n\n>1.使用关键字`@interface`定义注解，\n>2.成员以无参无异常方式声明，可以用default指定一个默认值\n>3.成员类型是受限的，合法的类型包括基本类型，String，Class，Annotation，Enumeration\n>4.如果注解只有一个成员，则成员名必须为value()，在使用时可以忽略成员名和赋值号,即`Description(\"test\")`\n>5.注解可以没有成员名，叫标识注解\n\n**使用：**\n@<注解名>(<成员名1>=<成员值1>,<成员名2>=<成员值2>,...)\n```java\nDescription(desc=\"I am pinnuli\",author=\"pinnuli\",age=20)\npublic String test(){\n    return \"test\";\n}\n```\n\n#### 三、解析注解\n> 通过反射获取类、函数或成员上的运行时追截信息，从而实现动态控制程序运行的逻辑\n\n1.使用类加载器加载类\n```java\nClass c = Class.forname(\"com.test.Student\");\n```\n2.找到类上的注解,拿到注解实例\n```java\nif(c.isAnnotationPresent(Description.class)){\n    Description d = (Description)c.getAnnotation(Description.class);\n}\n```\n3.找到方法上的注解\n- 方法一\n\n```java\nMethod[] ms = c.getMethods();\nfor(Method m:ms){\n    if(m.isAnnotationPresent(Description.class)){\n        Description d = (Description)m.getAnnotation(Description.class);\n    }\n}\n```\n- 方法二\n\n```java\nMethod[] ms = c.getMethods();\nfor(Method m:ms){\n    for(Annotation a:as){\n        if(a instanceof Description){\n            Description d = (Description)a;\n        }\n    }\n}\n```\n","source":"_posts/java注解.md","raw":"---\ntitle: java注解\ndate: 2018-07-23 12:39:36\ncategories: \"javase笔记\" \ntags:\n    - javase\n---\n#### 一、注解分类\n**源码注解（SOURCE）**：注解只在源码中存在，编译成.class文件就不存在\n**编译时注解（CLASS）**：注解在源码和.class文件都存在\n**运行时注解（RUNTIME）**：在运行阶段还起作用，甚至会影响运行逻辑的注解\n**元注解**：注解的注解\n\n\n#### 二、自定义注解\n**定义：**\n```java\n//元注解\n@Target({ElementType.METHOD,ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\n@Documented\n\n//定义注解和成员变量\npublic @interface Description{\n    String desc();\n    String author();\n    int age() default 20;\n}\n```\n- `@Target({ElementType.METHOD,ElementType.TYPE})`\n\n> 作用域,可以包括`CONSTRUCTOR`(构造方法)、`FIELD`(字段)、`LOCAL_VARIABLE`(局部变量)、`METHOD`(方法)、`PACKAGE`(包)、`PARAMETER`(参数)、`TYPE`(类和接口)声明中，这里作用域为方法、类和接口\n\n- `@Retention(RetentionPolicy.RUNTIME)`\n\n> 生命周期，可以设置为Source，CLASS，RUNTIME,这里生命周期是运行时\n\n- `@Inherited`\n\n> 标识性注解，允许子类继承，只适用于类的继承，对接口的继承无效，而且只会继承类级别的注解，不会继承超类的方法和成员变量的注解\n\n- `@Documented`\n\n> 生成javadoc包含注解信息\n\n- `@interface`\n\n>1.使用关键字`@interface`定义注解，\n>2.成员以无参无异常方式声明，可以用default指定一个默认值\n>3.成员类型是受限的，合法的类型包括基本类型，String，Class，Annotation，Enumeration\n>4.如果注解只有一个成员，则成员名必须为value()，在使用时可以忽略成员名和赋值号,即`Description(\"test\")`\n>5.注解可以没有成员名，叫标识注解\n\n**使用：**\n@<注解名>(<成员名1>=<成员值1>,<成员名2>=<成员值2>,...)\n```java\nDescription(desc=\"I am pinnuli\",author=\"pinnuli\",age=20)\npublic String test(){\n    return \"test\";\n}\n```\n\n#### 三、解析注解\n> 通过反射获取类、函数或成员上的运行时追截信息，从而实现动态控制程序运行的逻辑\n\n1.使用类加载器加载类\n```java\nClass c = Class.forname(\"com.test.Student\");\n```\n2.找到类上的注解,拿到注解实例\n```java\nif(c.isAnnotationPresent(Description.class)){\n    Description d = (Description)c.getAnnotation(Description.class);\n}\n```\n3.找到方法上的注解\n- 方法一\n\n```java\nMethod[] ms = c.getMethods();\nfor(Method m:ms){\n    if(m.isAnnotationPresent(Description.class)){\n        Description d = (Description)m.getAnnotation(Description.class);\n    }\n}\n```\n- 方法二\n\n```java\nMethod[] ms = c.getMethods();\nfor(Method m:ms){\n    for(Annotation a:as){\n        if(a instanceof Description){\n            Description d = (Description)a;\n        }\n    }\n}\n```\n","slug":"java注解","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8or000x8lyj0dag0hh8","content":"<h4 id=\"一、注解分类\"><a href=\"#一、注解分类\" class=\"headerlink\" title=\"一、注解分类\"></a>一、注解分类</h4><p><strong>源码注解（SOURCE）</strong>：注解只在源码中存在，编译成.class文件就不存在<br><strong>编译时注解（CLASS）</strong>：注解在源码和.class文件都存在<br><strong>运行时注解（RUNTIME）</strong>：在运行阶段还起作用，甚至会影响运行逻辑的注解<br><strong>元注解</strong>：注解的注解</p>\n<h4 id=\"二、自定义注解\"><a href=\"#二、自定义注解\" class=\"headerlink\" title=\"二、自定义注解\"></a>二、自定义注解</h4><p><strong>定义：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//元注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义注解和成员变量</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Description&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">desc</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">author</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">age</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 20</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>@Target({ElementType.METHOD,ElementType.TYPE})</code></li>\n</ul>\n<blockquote>\n<p>作用域,可以包括<code>CONSTRUCTOR</code>(构造方法)、<code>FIELD</code>(字段)、<code>LOCAL_VARIABLE</code>(局部变量)、<code>METHOD</code>(方法)、<code>PACKAGE</code>(包)、<code>PARAMETER</code>(参数)、<code>TYPE</code>(类和接口)声明中，这里作用域为方法、类和接口</p>\n</blockquote>\n<ul>\n<li><code>@Retention(RetentionPolicy.RUNTIME)</code></li>\n</ul>\n<blockquote>\n<p>生命周期，可以设置为Source，CLASS，RUNTIME,这里生命周期是运行时</p>\n</blockquote>\n<ul>\n<li><code>@Inherited</code></li>\n</ul>\n<blockquote>\n<p>标识性注解，允许子类继承，只适用于类的继承，对接口的继承无效，而且只会继承类级别的注解，不会继承超类的方法和成员变量的注解</p>\n</blockquote>\n<ul>\n<li><code>@Documented</code></li>\n</ul>\n<blockquote>\n<p>生成javadoc包含注解信息</p>\n</blockquote>\n<ul>\n<li><code>@interface</code></li>\n</ul>\n<blockquote>\n<p>1.使用关键字<code>@interface</code>定义注解，<br>2.成员以无参无异常方式声明，可以用default指定一个默认值<br>3.成员类型是受限的，合法的类型包括基本类型，String，Class，Annotation，Enumeration<br>4.如果注解只有一个成员，则成员名必须为value()，在使用时可以忽略成员名和赋值号,即<code>Description(&quot;test&quot;)</code><br>5.注解可以没有成员名，叫标识注解</p>\n</blockquote>\n<p><strong>使用：</strong><br>@&lt;注解名&gt;(&lt;成员名1&gt;=&lt;成员值1&gt;,&lt;成员名2&gt;=&lt;成员值2&gt;,…)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Description(desc=<span class=\"string\">\"I am pinnuli\"</span>,author=<span class=\"string\">\"pinnuli\"</span>,age=<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三、解析注解\"><a href=\"#三、解析注解\" class=\"headerlink\" title=\"三、解析注解\"></a>三、解析注解</h4><blockquote>\n<p>通过反射获取类、函数或成员上的运行时追截信息，从而实现动态控制程序运行的逻辑</p>\n</blockquote>\n<p>1.使用类加载器加载类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c = Class.forname(<span class=\"string\">\"com.test.Student\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>2.找到类上的注解,拿到注解实例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(c.isAnnotationPresent(Description.class))&#123;</span><br><span class=\"line\">    Description d = (Description)c.getAnnotation(Description.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.找到方法上的注解</p>\n<ul>\n<li>方法一</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] ms = c.getMethods();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Method m:ms)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m.isAnnotationPresent(Description.class))&#123;</span><br><span class=\"line\">        Description d = (Description)m.getAnnotation(Description.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法二</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] ms = c.getMethods();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Method m:ms)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Annotation a:as)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a <span class=\"keyword\">instanceof</span> Description)&#123;</span><br><span class=\"line\">            Description d = (Description)a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、注解分类\"><a href=\"#一、注解分类\" class=\"headerlink\" title=\"一、注解分类\"></a>一、注解分类</h4><p><strong>源码注解（SOURCE）</strong>：注解只在源码中存在，编译成.class文件就不存在<br><strong>编译时注解（CLASS）</strong>：注解在源码和.class文件都存在<br><strong>运行时注解（RUNTIME）</strong>：在运行阶段还起作用，甚至会影响运行逻辑的注解<br><strong>元注解</strong>：注解的注解</p>\n<h4 id=\"二、自定义注解\"><a href=\"#二、自定义注解\" class=\"headerlink\" title=\"二、自定义注解\"></a>二、自定义注解</h4><p><strong>定义：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//元注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义注解和成员变量</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Description&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">desc</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">author</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">age</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 20</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>@Target({ElementType.METHOD,ElementType.TYPE})</code></li>\n</ul>\n<blockquote>\n<p>作用域,可以包括<code>CONSTRUCTOR</code>(构造方法)、<code>FIELD</code>(字段)、<code>LOCAL_VARIABLE</code>(局部变量)、<code>METHOD</code>(方法)、<code>PACKAGE</code>(包)、<code>PARAMETER</code>(参数)、<code>TYPE</code>(类和接口)声明中，这里作用域为方法、类和接口</p>\n</blockquote>\n<ul>\n<li><code>@Retention(RetentionPolicy.RUNTIME)</code></li>\n</ul>\n<blockquote>\n<p>生命周期，可以设置为Source，CLASS，RUNTIME,这里生命周期是运行时</p>\n</blockquote>\n<ul>\n<li><code>@Inherited</code></li>\n</ul>\n<blockquote>\n<p>标识性注解，允许子类继承，只适用于类的继承，对接口的继承无效，而且只会继承类级别的注解，不会继承超类的方法和成员变量的注解</p>\n</blockquote>\n<ul>\n<li><code>@Documented</code></li>\n</ul>\n<blockquote>\n<p>生成javadoc包含注解信息</p>\n</blockquote>\n<ul>\n<li><code>@interface</code></li>\n</ul>\n<blockquote>\n<p>1.使用关键字<code>@interface</code>定义注解，<br>2.成员以无参无异常方式声明，可以用default指定一个默认值<br>3.成员类型是受限的，合法的类型包括基本类型，String，Class，Annotation，Enumeration<br>4.如果注解只有一个成员，则成员名必须为value()，在使用时可以忽略成员名和赋值号,即<code>Description(&quot;test&quot;)</code><br>5.注解可以没有成员名，叫标识注解</p>\n</blockquote>\n<p><strong>使用：</strong><br>@&lt;注解名&gt;(&lt;成员名1&gt;=&lt;成员值1&gt;,&lt;成员名2&gt;=&lt;成员值2&gt;,…)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Description(desc=<span class=\"string\">\"I am pinnuli\"</span>,author=<span class=\"string\">\"pinnuli\"</span>,age=<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三、解析注解\"><a href=\"#三、解析注解\" class=\"headerlink\" title=\"三、解析注解\"></a>三、解析注解</h4><blockquote>\n<p>通过反射获取类、函数或成员上的运行时追截信息，从而实现动态控制程序运行的逻辑</p>\n</blockquote>\n<p>1.使用类加载器加载类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c = Class.forname(<span class=\"string\">\"com.test.Student\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>2.找到类上的注解,拿到注解实例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(c.isAnnotationPresent(Description.class))&#123;</span><br><span class=\"line\">    Description d = (Description)c.getAnnotation(Description.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.找到方法上的注解</p>\n<ul>\n<li>方法一</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] ms = c.getMethods();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Method m:ms)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m.isAnnotationPresent(Description.class))&#123;</span><br><span class=\"line\">        Description d = (Description)m.getAnnotation(Description.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法二</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method[] ms = c.getMethods();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Method m:ms)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Annotation a:as)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a <span class=\"keyword\">instanceof</span> Description)&#123;</span><br><span class=\"line\">            Description d = (Description)a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"jsoup要点记录","date":"2018-03-16T04:50:17.000Z","_content":"\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  查找dom元素 </font>\n\n- getElementById: 根据id查询\n- getElementsByTag: 根据tag名称查询\n- getElementsByClass: 根据样式class名称查询\n- getElementsByAttribute: 根据属性名查询\n- getElementsByAttributeValue: 根据属性名和属性值查询\n\n实例代码\n\n\n``` java\n\t\n\timport org.apache.http.HttpEntity;\n\timport org.apache.http.client.methods.CloseableHttpResponse;\n\timport org.apache.http.client.methods.HttpGet;\n\timport org.apache.http.impl.client.CloseableHttpClient;\n\timport org.apache.http.impl.client.HttpClients;\n\timport org.apache.http.util.EntityUtils;\n\timport org.jsoup.Jsoup;\n\timport org.jsoup.nodes.Document;\n\timport org.jsoup.nodes.Element;\n\timport org.jsoup.select.Elements;\n\n\tpublic class Demo01 {\n\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\t\t/*用heepclient发起请求获取页面*/\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(\"https://www.cnblogs.com/\");\n\t\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString content = EntityUtils.toString(entity, \"utf-8\");\n\t\t\tresponse.close();\n\t\t\tDocument doc = Jsoup.parse(content); //用jsoup解析\n\t\t\t\n\t\t\t//通过标签名称查询\n\t\t\tElements elements = doc.getElementsByTag(\"title\");\n\t\t\tElement element = elements.get(0);\n\t\t\tString title = element.text();\n\t\t\tSystem.out.println(\"网页标题：\" + title);\n\t\t\t\n\t\t\t//获取首个标题标签内容\n\t\t\tElement titleElement = doc.getElementsByTag(\"title\").first(); \n\t\t\tSystem.out.println(\"首个标题： \" + titleElement.text());\n\t\t\t\n\t\t\t//通过id查询\n\t\t\tElement idElement = doc.getElementById(\"site_nav_top\"); \n\t\t\tSystem.out.println(\"id查询：\" + idElement.text());\n\t\t\t\n\t\t\t//通过class样式获取查询\n\t\t\tElements itemElements = doc.getElementsByClass(\"post_item\"); \n\t\t\tSystem.out.println(\"**********样式查询**********\");\n\t\t\tfor(Element e: itemElements) {\n\t\t\t\tSystem.out.println(e.text());\n\t\t\t\tSystem.out.println(\"-------\");\n\t\t\t}\n\t\t\n\t\t\t//属性名称查询\n\t\t\tElements attrElements = doc.getElementsByAttribute(\"width\");\n\t\t\tSystem.out.println(\"**********属性查询**********\");\n\t\t\tfor(Element e: attrElements) {\n\t\t\t\tSystem.out.println(e.toString());\n\t\t\t}\n\t\t\n\t\t\t//属性名称和属性值查询\n\t\t\tElements attrValueElements = doc.getElementsByAttributeValue(\"target\", \"_blank\");\n\t\t\tSystem.out.println(\"**********属性和属性值查询**********\");\n\t\t\tfor(Element e: attrValueElements) {\n\t\t\t\tSystem.out.println(e.toString());\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t}\n\n```\n\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  查找dom元素属性值 </font>\n\n\n实例代码\n\n```java\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\n\npublic class Demo2 {\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t/*用heepclient发起请求获取页面*/\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(\"https://www.cnblogs.com/\");\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"utf-8\");\n\t\tresponse.close();\n\t\tDocument doc = Jsoup.parse(content); //用jsoup解析\n\n\t\t\n\t\t//获取带有href属性的a标签\n\t\tElements attrElements = doc.select(\"a[href]\");\n\t\tSystem.out.println(\"**********获取属性值**********\");\n\t\tfor(Element e: attrElements) {\n\t\t\tSystem.out.println(e.toString());\n\t\t\tSystem.out.println(\"-------\");\n\t\t}\n\t\t\n\t\t//查找拓展名为gif的img标签\n\t\tElements imgElements = doc.select(\"img[src$=.gif]\");\n\t\tSystem.out.println(\"**********带有拓展名查询**********\");\n\t\tfor(Element e: imgElements) {\n\t\t\tSystem.out.println(e.toString());\n\t\t}\n\t}\n\n}\n\n\n```\n\n\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  使用选择器查询 </font>\n\n ***Jsoup 支持css，jquery的选择器***\n\n实例代码\n\n``` java\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\n\npublic class Demo03 {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\t/*用heepclient发起请求获取页面*/\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(\"https://www.cnblogs.com/\");\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"utf-8\");\n\t\tresponse.close();\n\t\tDocument doc = Jsoup.parse(content); //用jsoup解析\n\t\t\n\t\t//通过选择器查询\n\t\tElements linkElements = doc.select(\".headline ul .editor_pick a\");\n\t\tSystem.out.println(\"**********选择器查询**********\");\n\t\tfor(Element e: linkElements) {\n\t\t\tSystem.out.println(e.toString());\n\t\t\tSystem.out.println(\"地址： \" + e.attr(\"href\"));\n\t\t\tSystem.out.println(\"-------\");\n\t\t}\n\t\t\n\t\tElement linkElement = doc.select(\".headline ul li\").first();\n\t\tSystem.out.println(\"文本： \" + linkElement.text());\n\t\tSystem.out.println(\"html: \" + linkElement.html());\n\t\tSystem.out.println(\"class属性值： \" + linkElement.attr(\"class\"));\n\t\t\t\n\t}\n\n}\n\n```\n\n","source":"_posts/jsoup要点记录.md","raw":"---\ntitle: jsoup要点记录\ndate: 2018-03-16 12:50:17\ncategories: \"Jsoup笔记\" \ntags:\n\t- java爬虫\n\t- Jsoup\n---\n\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  查找dom元素 </font>\n\n- getElementById: 根据id查询\n- getElementsByTag: 根据tag名称查询\n- getElementsByClass: 根据样式class名称查询\n- getElementsByAttribute: 根据属性名查询\n- getElementsByAttributeValue: 根据属性名和属性值查询\n\n实例代码\n\n\n``` java\n\t\n\timport org.apache.http.HttpEntity;\n\timport org.apache.http.client.methods.CloseableHttpResponse;\n\timport org.apache.http.client.methods.HttpGet;\n\timport org.apache.http.impl.client.CloseableHttpClient;\n\timport org.apache.http.impl.client.HttpClients;\n\timport org.apache.http.util.EntityUtils;\n\timport org.jsoup.Jsoup;\n\timport org.jsoup.nodes.Document;\n\timport org.jsoup.nodes.Element;\n\timport org.jsoup.select.Elements;\n\n\tpublic class Demo01 {\n\n\t\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\t\t/*用heepclient发起请求获取页面*/\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(\"https://www.cnblogs.com/\");\n\t\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString content = EntityUtils.toString(entity, \"utf-8\");\n\t\t\tresponse.close();\n\t\t\tDocument doc = Jsoup.parse(content); //用jsoup解析\n\t\t\t\n\t\t\t//通过标签名称查询\n\t\t\tElements elements = doc.getElementsByTag(\"title\");\n\t\t\tElement element = elements.get(0);\n\t\t\tString title = element.text();\n\t\t\tSystem.out.println(\"网页标题：\" + title);\n\t\t\t\n\t\t\t//获取首个标题标签内容\n\t\t\tElement titleElement = doc.getElementsByTag(\"title\").first(); \n\t\t\tSystem.out.println(\"首个标题： \" + titleElement.text());\n\t\t\t\n\t\t\t//通过id查询\n\t\t\tElement idElement = doc.getElementById(\"site_nav_top\"); \n\t\t\tSystem.out.println(\"id查询：\" + idElement.text());\n\t\t\t\n\t\t\t//通过class样式获取查询\n\t\t\tElements itemElements = doc.getElementsByClass(\"post_item\"); \n\t\t\tSystem.out.println(\"**********样式查询**********\");\n\t\t\tfor(Element e: itemElements) {\n\t\t\t\tSystem.out.println(e.text());\n\t\t\t\tSystem.out.println(\"-------\");\n\t\t\t}\n\t\t\n\t\t\t//属性名称查询\n\t\t\tElements attrElements = doc.getElementsByAttribute(\"width\");\n\t\t\tSystem.out.println(\"**********属性查询**********\");\n\t\t\tfor(Element e: attrElements) {\n\t\t\t\tSystem.out.println(e.toString());\n\t\t\t}\n\t\t\n\t\t\t//属性名称和属性值查询\n\t\t\tElements attrValueElements = doc.getElementsByAttributeValue(\"target\", \"_blank\");\n\t\t\tSystem.out.println(\"**********属性和属性值查询**********\");\n\t\t\tfor(Element e: attrValueElements) {\n\t\t\t\tSystem.out.println(e.toString());\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t}\n\n```\n\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  查找dom元素属性值 </font>\n\n\n实例代码\n\n```java\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\n\npublic class Demo2 {\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t/*用heepclient发起请求获取页面*/\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(\"https://www.cnblogs.com/\");\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"utf-8\");\n\t\tresponse.close();\n\t\tDocument doc = Jsoup.parse(content); //用jsoup解析\n\n\t\t\n\t\t//获取带有href属性的a标签\n\t\tElements attrElements = doc.select(\"a[href]\");\n\t\tSystem.out.println(\"**********获取属性值**********\");\n\t\tfor(Element e: attrElements) {\n\t\t\tSystem.out.println(e.toString());\n\t\t\tSystem.out.println(\"-------\");\n\t\t}\n\t\t\n\t\t//查找拓展名为gif的img标签\n\t\tElements imgElements = doc.select(\"img[src$=.gif]\");\n\t\tSystem.out.println(\"**********带有拓展名查询**********\");\n\t\tfor(Element e: imgElements) {\n\t\t\tSystem.out.println(e.toString());\n\t\t}\n\t}\n\n}\n\n\n```\n\n\n\n#### <font color = #1E90FF size = 5 face = \"黑体\">  使用选择器查询 </font>\n\n ***Jsoup 支持css，jquery的选择器***\n\n实例代码\n\n``` java\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\n\npublic class Demo03 {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\t/*用heepclient发起请求获取页面*/\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(\"https://www.cnblogs.com/\");\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"utf-8\");\n\t\tresponse.close();\n\t\tDocument doc = Jsoup.parse(content); //用jsoup解析\n\t\t\n\t\t//通过选择器查询\n\t\tElements linkElements = doc.select(\".headline ul .editor_pick a\");\n\t\tSystem.out.println(\"**********选择器查询**********\");\n\t\tfor(Element e: linkElements) {\n\t\t\tSystem.out.println(e.toString());\n\t\t\tSystem.out.println(\"地址： \" + e.attr(\"href\"));\n\t\t\tSystem.out.println(\"-------\");\n\t\t}\n\t\t\n\t\tElement linkElement = doc.select(\".headline ul li\").first();\n\t\tSystem.out.println(\"文本： \" + linkElement.text());\n\t\tSystem.out.println(\"html: \" + linkElement.html());\n\t\tSystem.out.println(\"class属性值： \" + linkElement.attr(\"class\"));\n\t\t\t\n\t}\n\n}\n\n```\n\n","slug":"jsoup要点记录","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8os00128lyj3f153gzs","content":"<h4 id=\"查找dom元素\"><a href=\"#查找dom元素\" class=\"headerlink\" title=\"  查找dom元素 \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  查找dom元素 </font></h4><ul>\n<li>getElementById: 根据id查询</li>\n<li>getElementsByTag: 根据tag名称查询</li>\n<li>getElementsByClass: 根据样式class名称查询</li>\n<li>getElementsByAttribute: 根据属性名查询</li>\n<li>getElementsByAttributeValue: 根据属性名和属性值查询</li>\n</ul>\n<p>实例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.select.Elements;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*用heepclient发起请求获取页面*/</span></span><br><span class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">\t\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"https://www.cnblogs.com/\"</span>);</span><br><span class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class=\"line\">\t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">\t\tString content = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.close();</span><br><span class=\"line\">\t\tDocument doc = Jsoup.parse(content); <span class=\"comment\">//用jsoup解析</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过标签名称查询</span></span><br><span class=\"line\">\t\tElements elements = doc.getElementsByTag(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">\t\tElement element = elements.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tString title = element.text();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"网页标题：\"</span> + title);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取首个标题标签内容</span></span><br><span class=\"line\">\t\tElement titleElement = doc.getElementsByTag(<span class=\"string\">\"title\"</span>).first(); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"首个标题： \"</span> + titleElement.text());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过id查询</span></span><br><span class=\"line\">\t\tElement idElement = doc.getElementById(<span class=\"string\">\"site_nav_top\"</span>); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"id查询：\"</span> + idElement.text());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过class样式获取查询</span></span><br><span class=\"line\">\t\tElements itemElements = doc.getElementsByClass(<span class=\"string\">\"post_item\"</span>); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********样式查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: itemElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.text());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"-------\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//属性名称查询</span></span><br><span class=\"line\">\t\tElements attrElements = doc.getElementsByAttribute(<span class=\"string\">\"width\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********属性查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: attrElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//属性名称和属性值查询</span></span><br><span class=\"line\">\t\tElements attrValueElements = doc.getElementsByAttributeValue(<span class=\"string\">\"target\"</span>, <span class=\"string\">\"_blank\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********属性和属性值查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: attrValueElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找dom元素属性值\"><a href=\"#查找dom元素属性值\" class=\"headerlink\" title=\"  查找dom元素属性值 \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  查找dom元素属性值 </font></h4><p>实例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.select.Elements;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*用heepclient发起请求获取页面*/</span></span><br><span class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">\t\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"https://www.cnblogs.com/\"</span>);</span><br><span class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class=\"line\">\t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">\t\tString content = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.close();</span><br><span class=\"line\">\t\tDocument doc = Jsoup.parse(content); <span class=\"comment\">//用jsoup解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取带有href属性的a标签</span></span><br><span class=\"line\">\t\tElements attrElements = doc.select(<span class=\"string\">\"a[href]\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********获取属性值**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: attrElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"-------\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//查找拓展名为gif的img标签</span></span><br><span class=\"line\">\t\tElements imgElements = doc.select(<span class=\"string\">\"img[src$=.gif]\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********带有拓展名查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: imgElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用选择器查询\"><a href=\"#使用选择器查询\" class=\"headerlink\" title=\"  使用选择器查询 \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  使用选择器查询 </font></h4><p> <strong><em>Jsoup 支持css，jquery的选择器</em></strong></p>\n<p>实例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.select.Elements;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo03</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*用heepclient发起请求获取页面*/</span></span><br><span class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">\t\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"https://www.cnblogs.com/\"</span>);</span><br><span class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class=\"line\">\t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">\t\tString content = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.close();</span><br><span class=\"line\">\t\tDocument doc = Jsoup.parse(content); <span class=\"comment\">//用jsoup解析</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过选择器查询</span></span><br><span class=\"line\">\t\tElements linkElements = doc.select(<span class=\"string\">\".headline ul .editor_pick a\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********选择器查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: linkElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"地址： \"</span> + e.attr(<span class=\"string\">\"href\"</span>));</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"-------\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tElement linkElement = doc.select(<span class=\"string\">\".headline ul li\"</span>).first();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"文本： \"</span> + linkElement.text());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"html: \"</span> + linkElement.html());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"class属性值： \"</span> + linkElement.attr(<span class=\"string\">\"class\"</span>));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"查找dom元素\"><a href=\"#查找dom元素\" class=\"headerlink\" title=\"  查找dom元素 \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  查找dom元素 </font></h4><ul>\n<li>getElementById: 根据id查询</li>\n<li>getElementsByTag: 根据tag名称查询</li>\n<li>getElementsByClass: 根据样式class名称查询</li>\n<li>getElementsByAttribute: 根据属性名查询</li>\n<li>getElementsByAttributeValue: 根据属性名和属性值查询</li>\n</ul>\n<p>实例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.select.Elements;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*用heepclient发起请求获取页面*/</span></span><br><span class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">\t\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"https://www.cnblogs.com/\"</span>);</span><br><span class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class=\"line\">\t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">\t\tString content = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.close();</span><br><span class=\"line\">\t\tDocument doc = Jsoup.parse(content); <span class=\"comment\">//用jsoup解析</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过标签名称查询</span></span><br><span class=\"line\">\t\tElements elements = doc.getElementsByTag(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">\t\tElement element = elements.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tString title = element.text();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"网页标题：\"</span> + title);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取首个标题标签内容</span></span><br><span class=\"line\">\t\tElement titleElement = doc.getElementsByTag(<span class=\"string\">\"title\"</span>).first(); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"首个标题： \"</span> + titleElement.text());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过id查询</span></span><br><span class=\"line\">\t\tElement idElement = doc.getElementById(<span class=\"string\">\"site_nav_top\"</span>); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"id查询：\"</span> + idElement.text());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过class样式获取查询</span></span><br><span class=\"line\">\t\tElements itemElements = doc.getElementsByClass(<span class=\"string\">\"post_item\"</span>); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********样式查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: itemElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.text());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"-------\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//属性名称查询</span></span><br><span class=\"line\">\t\tElements attrElements = doc.getElementsByAttribute(<span class=\"string\">\"width\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********属性查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: attrElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//属性名称和属性值查询</span></span><br><span class=\"line\">\t\tElements attrValueElements = doc.getElementsByAttributeValue(<span class=\"string\">\"target\"</span>, <span class=\"string\">\"_blank\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********属性和属性值查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: attrValueElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找dom元素属性值\"><a href=\"#查找dom元素属性值\" class=\"headerlink\" title=\"  查找dom元素属性值 \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  查找dom元素属性值 </font></h4><p>实例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.select.Elements;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*用heepclient发起请求获取页面*/</span></span><br><span class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">\t\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"https://www.cnblogs.com/\"</span>);</span><br><span class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class=\"line\">\t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">\t\tString content = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.close();</span><br><span class=\"line\">\t\tDocument doc = Jsoup.parse(content); <span class=\"comment\">//用jsoup解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取带有href属性的a标签</span></span><br><span class=\"line\">\t\tElements attrElements = doc.select(<span class=\"string\">\"a[href]\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********获取属性值**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: attrElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"-------\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//查找拓展名为gif的img标签</span></span><br><span class=\"line\">\t\tElements imgElements = doc.select(<span class=\"string\">\"img[src$=.gif]\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********带有拓展名查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: imgElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用选择器查询\"><a href=\"#使用选择器查询\" class=\"headerlink\" title=\"  使用选择器查询 \"></a><font color=\"#1E90FF\" size=\"5\" face=\"黑体\">  使用选择器查询 </font></h4><p> <strong><em>Jsoup 支持css，jquery的选择器</em></strong></p>\n<p>实例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.select.Elements;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo03</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*用heepclient发起请求获取页面*/</span></span><br><span class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">\t\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"https://www.cnblogs.com/\"</span>);</span><br><span class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class=\"line\">\t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">\t\tString content = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.close();</span><br><span class=\"line\">\t\tDocument doc = Jsoup.parse(content); <span class=\"comment\">//用jsoup解析</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过选择器查询</span></span><br><span class=\"line\">\t\tElements linkElements = doc.select(<span class=\"string\">\".headline ul .editor_pick a\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**********选择器查询**********\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Element e: linkElements) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"地址： \"</span> + e.attr(<span class=\"string\">\"href\"</span>));</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"-------\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tElement linkElement = doc.select(<span class=\"string\">\".headline ul li\"</span>).first();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"文本： \"</span> + linkElement.text());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"html: \"</span> + linkElement.html());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"class属性值： \"</span> + linkElement.attr(<span class=\"string\">\"class\"</span>));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"java集合框架","date":"2018-07-10T23:02:56.000Z","_content":"\n\n1、迭代器\n--\niterator是一个或者实现了Iterator,或者实现ListIterator接口的对象，可以通过循环输出类集的内容，从而获得或删除元素，\n\n- next()方法\n\t- 逐个访问集合中的每个元素，经常需要与hasNext()方法搭配使用；\n\t- java迭代器可以认为位于两个元素之家，当调用next()时，迭代器越过下一个元素，并返回刚刚越过的那个元素的引用\n- 用\"for each\"循环遍历类集的内容，\n- remove()方法删除上次调用next()时返回的元素，因而调用remove之前没有调用next是不合法的，删除的元素依赖于迭代器的状态\n- 对于实现List的类集，可以使用ListIterator，可以双向访问类集，如果在调用previous之后调用remove，则会将迭代器右边的元素删掉\n\n\n2、List\n--\n- 有序集合，使用基于零的下标，可以用迭代器访问（顺序访问）或者用一个整数索引访问（随机访问）,有两个主要的实现类\n\n- ArrayList\n\n\t\n\t- 基于数组，能够动态到地增加或减小其大小，当也可以调用ensureCapacity方法来进行人工地增加ArrayList的容量，从而避免再分配的消耗时间，前提是事先知道需要存储很多内容，然后往往是不知道\n \n\t- 适用于需要进行随机访问时\n\t\n- LinkedList\n\t- 基于双向链表，\n\t- 对于有序集合，add方法只是添加到链表的尾部，当需要将元素添加到链表中间时，可以用迭代器的add，只有对自然有序的集合使用迭代器添加元素才有实际意义，但是这里的add不返回任何值\n\t- 适用于顺序访问\n\n\t\n\n3、Set\n--\n等同于Collection,不允许增加重复的元素，需要定义equals方法来确保元素唯一\n\n- HashSet\n\t- 基于散列表的集，无序\n\t- 存入的元素必须定义有hashCode()，以得到散列码\n\t- 可以快速地查找，对于大的集合，add()、contains()、remove()、size()等方法的运行时间保持不变\n\t- 可以设置装填因子来实现再散列\n\t- 适用于不关心访问顺序，需要查找大容量容器时\n\n- TreeSet\n\t- 基于红黑树排序，有序\n\t- 存入的元素必须实现Comparable接口，或者构造集必须提供一个Comparator\n\t- 每次添加元素时元素都会被放置到正确的位置，因而迭代器总是以排好序的顺序访问\n\t- 适用于存储大量需要进行快速检索的排序信息的情况\n\t\n- BitSet\n\t- 用于存放一个位序列\n\t- \n\n\n4、Queue\n--\n\n- 双端队列，可以同时在头部或者尾部添加或删除元素，有两个实现\n\t-  LinkedList\n\t-  ArrayList\n- PriorityQueue\n\t- 基于堆，堆是可以自我调整的二叉树，对树执行add和remove时，可以让最小的元素移动到根，不必对元素排序\n\t- 按照任意顺序插入，却可以按照顺序进行检索\n\t- 和TreeSet一样，存入的元素必须实现Comparable接口，或者构造器必须提供一个Comparator\n\n5、Map\n--\n\n- 对键进行散列或排序，键必须唯一，同一个键多次调用put时，后面的会取代前面的，put返回这个键存储的上一个值。\n- 键不存在时，get方法返回null，可以用getOrDefault返回默认值，test.get(id,0)\n- 更新映射项，正常情况可以得到与一个键关联的值，替代原来的值，但是在需要持续更新时，例如:使用一个映射统计一个单词在文件中的频数，`counts.put(word,counts.get(word)+1)`,需要解决一个问题，就是键第一次出现时，这时可以有三种方法\n\t- `counts.put(word,counts.getOrDefault(word,0) + 1)`\n\t- 先调用putIfAbsent，只有原先键存在时才会放一个值,`counts.putIfAnsent(word,0)`\t\t\n\t\t`counts.put(word,counts.get(word)+1)`\t\t\t\n\t- `counts.merge(word,1,Interger::sum)`(推荐）,当word关联的值为空（即键值对不存在），将word与1关联；不为空时，将sum应用于word和1，sum返回的结果与word关联\n- 映射视图：集合框架不认为映射本身是一种集合，不过可以通过调用Map一些方法得到映射的视图\n\t- 键集：`Set<K> keySet()`，\n\t- 值集：`Collection<V> values()`，\n\t- 键/值对集：`Set<Map.Entry<K,V>> entrySet()`\n\t- 这些集合不能添加元素，但可以删除这些集合中的远思，键和相关联的的值也将从映射中删除\n- 散列\n\t- 散列码，由对象的实例域产生的一个整数，由hashCOde()产生\n\t- 散列表，用链表数组实现，每个列表称为桶\n\t- 散列实现，Map中用数组保存键，查找表中对象的位置时，先算出散列码，然后与桶的总数取余，结果为保存此元素的桶的索引，即数组的下标，查询时通过equals()方法对List中的值进行查询\n\t> 新版jdk使用红黑树和List（数据多用树，少时用List)\n\t- 散列冲突，桶被占满时，可以设置装填因子（0~1），对散列表满时进行再散列，即创建桶数更多的表\n- HashMap\n\t- 比较快，适用于不需要按照排列顺序访问键时\n- TreeMap\n\t- 按排序顺序存储键值对，允许快速检索，保证了元素按关键字升序排序\n- WeakHashMap\n\t- 使用弱引用（weak reference)保存key，WeakReference对象将引用保存到另外一个对象中，就是散列键\n\t- 如果垃圾回收器发现某个特定的对象已经没有人引用，就将其回收，而如果某个对象只由WeakReference引用，垃圾回收器仍然回收它，并将这个对象的弱引用放入队列，WeakHashMap将周期性地检查队列，一边找出新添加的弱引用，并将删除对应的条目\n\t- 适用于需要缓存时\n- LinkedHashMap\n\t- 链接散列集与映射，用访问顺序，对映射条目进行迭代，每次调用get或put时，收到影响的条目从当前位置删除，并放到条目链表的尾部，不过条目仍然在原来散列码对应的桶中，只是改变了条目在链表中的位置\n\t- 用于实现高速缓存的“最近最少使用”原则\n \n\n6、视图与包装器\n--\n- 轻量级集合包装器\n\t- 例如Arrays类的asList返回一个包装了普通java数组的List包装器，可以将数组传递给一个期望得到列表或集合参数的方法\n```\n\tCard[] cardDeck = new Card[52];\n\tList<Card> cardList = Arrays.asList(cardDeck);\n```\n\t返回的是一个视图对象，可以调用底层数组的get和set，但不可改变数组的大小\n\t- 例如Collections类的一些使用方法，nCopied(100,\"KKK\"),single(anObject)等，返回一个不可修改的试图对象\n- 子范围\n\t- 相当于返回几个的一个“子集合”，例如返回列表staff的第10-19个元素，可以用`List group2 = staff.subList(10,20);`,类似于String类中获取子串\n\t- 可以将任何操作应用于子范围，如`group2.clear()``,元素会从staff中清除\n\t- 对于有序集或者映射，可以使用排序顺序建立子范围，如SortedSet声明的三个方法，返回大于等于from小于to的所有元素的子集，\n\t> SortedSet<E> subSet(E from, E to)\n\t> SortedSet<E> headSet(E to)\n\t> SortedSet<E> tailSet(E from)\n- 不可修改的视图\n\t- 只能对现有集合增加了一个运行时的检查，试图修改会抛出异常，不过仍然可以通过原始引用修改\n\t- 访问器方法从原始集合对象中获取值\n\t- 视图只是包装了接口而不是实际的集合对象，因而只能访问接口中定义的方法，例如：\n\t> unmodifiableCollection方法将返回一个集合，但他的equals()方法不调用底层集合的，而是调用它继承了Object类的equals()方法，这个方法只是检测两个对象是否是同一个对象，视图就是以这种方式运行的\n- 同步视图\n\t- 实现多线程访问，确保集合的线程安全，例如`Collections.synchronizedMap`\n- 受查视图\n\t- 用来对泛型类型进行检测，例如`Collections.checkedList`","source":"_posts/java集合框架.md","raw":"---\ntitle: java集合框架\ndate: 2018-07-11 07:02:56\ncategories: \"javase笔记\" \ntags:\n\t- javase\n---\n\n\n1、迭代器\n--\niterator是一个或者实现了Iterator,或者实现ListIterator接口的对象，可以通过循环输出类集的内容，从而获得或删除元素，\n\n- next()方法\n\t- 逐个访问集合中的每个元素，经常需要与hasNext()方法搭配使用；\n\t- java迭代器可以认为位于两个元素之家，当调用next()时，迭代器越过下一个元素，并返回刚刚越过的那个元素的引用\n- 用\"for each\"循环遍历类集的内容，\n- remove()方法删除上次调用next()时返回的元素，因而调用remove之前没有调用next是不合法的，删除的元素依赖于迭代器的状态\n- 对于实现List的类集，可以使用ListIterator，可以双向访问类集，如果在调用previous之后调用remove，则会将迭代器右边的元素删掉\n\n\n2、List\n--\n- 有序集合，使用基于零的下标，可以用迭代器访问（顺序访问）或者用一个整数索引访问（随机访问）,有两个主要的实现类\n\n- ArrayList\n\n\t\n\t- 基于数组，能够动态到地增加或减小其大小，当也可以调用ensureCapacity方法来进行人工地增加ArrayList的容量，从而避免再分配的消耗时间，前提是事先知道需要存储很多内容，然后往往是不知道\n \n\t- 适用于需要进行随机访问时\n\t\n- LinkedList\n\t- 基于双向链表，\n\t- 对于有序集合，add方法只是添加到链表的尾部，当需要将元素添加到链表中间时，可以用迭代器的add，只有对自然有序的集合使用迭代器添加元素才有实际意义，但是这里的add不返回任何值\n\t- 适用于顺序访问\n\n\t\n\n3、Set\n--\n等同于Collection,不允许增加重复的元素，需要定义equals方法来确保元素唯一\n\n- HashSet\n\t- 基于散列表的集，无序\n\t- 存入的元素必须定义有hashCode()，以得到散列码\n\t- 可以快速地查找，对于大的集合，add()、contains()、remove()、size()等方法的运行时间保持不变\n\t- 可以设置装填因子来实现再散列\n\t- 适用于不关心访问顺序，需要查找大容量容器时\n\n- TreeSet\n\t- 基于红黑树排序，有序\n\t- 存入的元素必须实现Comparable接口，或者构造集必须提供一个Comparator\n\t- 每次添加元素时元素都会被放置到正确的位置，因而迭代器总是以排好序的顺序访问\n\t- 适用于存储大量需要进行快速检索的排序信息的情况\n\t\n- BitSet\n\t- 用于存放一个位序列\n\t- \n\n\n4、Queue\n--\n\n- 双端队列，可以同时在头部或者尾部添加或删除元素，有两个实现\n\t-  LinkedList\n\t-  ArrayList\n- PriorityQueue\n\t- 基于堆，堆是可以自我调整的二叉树，对树执行add和remove时，可以让最小的元素移动到根，不必对元素排序\n\t- 按照任意顺序插入，却可以按照顺序进行检索\n\t- 和TreeSet一样，存入的元素必须实现Comparable接口，或者构造器必须提供一个Comparator\n\n5、Map\n--\n\n- 对键进行散列或排序，键必须唯一，同一个键多次调用put时，后面的会取代前面的，put返回这个键存储的上一个值。\n- 键不存在时，get方法返回null，可以用getOrDefault返回默认值，test.get(id,0)\n- 更新映射项，正常情况可以得到与一个键关联的值，替代原来的值，但是在需要持续更新时，例如:使用一个映射统计一个单词在文件中的频数，`counts.put(word,counts.get(word)+1)`,需要解决一个问题，就是键第一次出现时，这时可以有三种方法\n\t- `counts.put(word,counts.getOrDefault(word,0) + 1)`\n\t- 先调用putIfAbsent，只有原先键存在时才会放一个值,`counts.putIfAnsent(word,0)`\t\t\n\t\t`counts.put(word,counts.get(word)+1)`\t\t\t\n\t- `counts.merge(word,1,Interger::sum)`(推荐）,当word关联的值为空（即键值对不存在），将word与1关联；不为空时，将sum应用于word和1，sum返回的结果与word关联\n- 映射视图：集合框架不认为映射本身是一种集合，不过可以通过调用Map一些方法得到映射的视图\n\t- 键集：`Set<K> keySet()`，\n\t- 值集：`Collection<V> values()`，\n\t- 键/值对集：`Set<Map.Entry<K,V>> entrySet()`\n\t- 这些集合不能添加元素，但可以删除这些集合中的远思，键和相关联的的值也将从映射中删除\n- 散列\n\t- 散列码，由对象的实例域产生的一个整数，由hashCOde()产生\n\t- 散列表，用链表数组实现，每个列表称为桶\n\t- 散列实现，Map中用数组保存键，查找表中对象的位置时，先算出散列码，然后与桶的总数取余，结果为保存此元素的桶的索引，即数组的下标，查询时通过equals()方法对List中的值进行查询\n\t> 新版jdk使用红黑树和List（数据多用树，少时用List)\n\t- 散列冲突，桶被占满时，可以设置装填因子（0~1），对散列表满时进行再散列，即创建桶数更多的表\n- HashMap\n\t- 比较快，适用于不需要按照排列顺序访问键时\n- TreeMap\n\t- 按排序顺序存储键值对，允许快速检索，保证了元素按关键字升序排序\n- WeakHashMap\n\t- 使用弱引用（weak reference)保存key，WeakReference对象将引用保存到另外一个对象中，就是散列键\n\t- 如果垃圾回收器发现某个特定的对象已经没有人引用，就将其回收，而如果某个对象只由WeakReference引用，垃圾回收器仍然回收它，并将这个对象的弱引用放入队列，WeakHashMap将周期性地检查队列，一边找出新添加的弱引用，并将删除对应的条目\n\t- 适用于需要缓存时\n- LinkedHashMap\n\t- 链接散列集与映射，用访问顺序，对映射条目进行迭代，每次调用get或put时，收到影响的条目从当前位置删除，并放到条目链表的尾部，不过条目仍然在原来散列码对应的桶中，只是改变了条目在链表中的位置\n\t- 用于实现高速缓存的“最近最少使用”原则\n \n\n6、视图与包装器\n--\n- 轻量级集合包装器\n\t- 例如Arrays类的asList返回一个包装了普通java数组的List包装器，可以将数组传递给一个期望得到列表或集合参数的方法\n```\n\tCard[] cardDeck = new Card[52];\n\tList<Card> cardList = Arrays.asList(cardDeck);\n```\n\t返回的是一个视图对象，可以调用底层数组的get和set，但不可改变数组的大小\n\t- 例如Collections类的一些使用方法，nCopied(100,\"KKK\"),single(anObject)等，返回一个不可修改的试图对象\n- 子范围\n\t- 相当于返回几个的一个“子集合”，例如返回列表staff的第10-19个元素，可以用`List group2 = staff.subList(10,20);`,类似于String类中获取子串\n\t- 可以将任何操作应用于子范围，如`group2.clear()``,元素会从staff中清除\n\t- 对于有序集或者映射，可以使用排序顺序建立子范围，如SortedSet声明的三个方法，返回大于等于from小于to的所有元素的子集，\n\t> SortedSet<E> subSet(E from, E to)\n\t> SortedSet<E> headSet(E to)\n\t> SortedSet<E> tailSet(E from)\n- 不可修改的视图\n\t- 只能对现有集合增加了一个运行时的检查，试图修改会抛出异常，不过仍然可以通过原始引用修改\n\t- 访问器方法从原始集合对象中获取值\n\t- 视图只是包装了接口而不是实际的集合对象，因而只能访问接口中定义的方法，例如：\n\t> unmodifiableCollection方法将返回一个集合，但他的equals()方法不调用底层集合的，而是调用它继承了Object类的equals()方法，这个方法只是检测两个对象是否是同一个对象，视图就是以这种方式运行的\n- 同步视图\n\t- 实现多线程访问，确保集合的线程安全，例如`Collections.synchronizedMap`\n- 受查视图\n\t- 用来对泛型类型进行检测，例如`Collections.checkedList`","slug":"java集合框架","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8ot00158lyj2wjvxazp","content":"<h2 id=\"1、迭代器\"><a href=\"#1、迭代器\" class=\"headerlink\" title=\"1、迭代器\"></a>1、迭代器</h2><p>iterator是一个或者实现了Iterator,或者实现ListIterator接口的对象，可以通过循环输出类集的内容，从而获得或删除元素，</p>\n<ul>\n<li>next()方法<ul>\n<li>逐个访问集合中的每个元素，经常需要与hasNext()方法搭配使用；</li>\n<li>java迭代器可以认为位于两个元素之家，当调用next()时，迭代器越过下一个元素，并返回刚刚越过的那个元素的引用</li>\n</ul>\n</li>\n<li>用”for each”循环遍历类集的内容，</li>\n<li>remove()方法删除上次调用next()时返回的元素，因而调用remove之前没有调用next是不合法的，删除的元素依赖于迭代器的状态</li>\n<li>对于实现List的类集，可以使用ListIterator，可以双向访问类集，如果在调用previous之后调用remove，则会将迭代器右边的元素删掉</li>\n</ul>\n<h2 id=\"2、List\"><a href=\"#2、List\" class=\"headerlink\" title=\"2、List\"></a>2、List</h2><ul>\n<li><p>有序集合，使用基于零的下标，可以用迭代器访问（顺序访问）或者用一个整数索引访问（随机访问）,有两个主要的实现类</p>\n</li>\n<li><p>ArrayList</p>\n</li>\n</ul>\n<pre><code>- 基于数组，能够动态到地增加或减小其大小，当也可以调用ensureCapacity方法来进行人工地增加ArrayList的容量，从而避免再分配的消耗时间，前提是事先知道需要存储很多内容，然后往往是不知道\n\n- 适用于需要进行随机访问时\n</code></pre><ul>\n<li>LinkedList<ul>\n<li>基于双向链表，</li>\n<li>对于有序集合，add方法只是添加到链表的尾部，当需要将元素添加到链表中间时，可以用迭代器的add，只有对自然有序的集合使用迭代器添加元素才有实际意义，但是这里的add不返回任何值</li>\n<li>适用于顺序访问</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、Set\"><a href=\"#3、Set\" class=\"headerlink\" title=\"3、Set\"></a>3、Set</h2><p>等同于Collection,不允许增加重复的元素，需要定义equals方法来确保元素唯一</p>\n<ul>\n<li><p>HashSet</p>\n<ul>\n<li>基于散列表的集，无序</li>\n<li>存入的元素必须定义有hashCode()，以得到散列码</li>\n<li>可以快速地查找，对于大的集合，add()、contains()、remove()、size()等方法的运行时间保持不变</li>\n<li>可以设置装填因子来实现再散列</li>\n<li>适用于不关心访问顺序，需要查找大容量容器时</li>\n</ul>\n</li>\n<li><p>TreeSet</p>\n<ul>\n<li>基于红黑树排序，有序</li>\n<li>存入的元素必须实现Comparable接口，或者构造集必须提供一个Comparator</li>\n<li>每次添加元素时元素都会被放置到正确的位置，因而迭代器总是以排好序的顺序访问</li>\n<li>适用于存储大量需要进行快速检索的排序信息的情况</li>\n</ul>\n</li>\n<li><p>BitSet</p>\n<ul>\n<li>用于存放一个位序列</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4、Queue\"><a href=\"#4、Queue\" class=\"headerlink\" title=\"4、Queue\"></a>4、Queue</h2><ul>\n<li>双端队列，可以同时在头部或者尾部添加或删除元素，有两个实现<ul>\n<li>LinkedList</li>\n<li>ArrayList</li>\n</ul>\n</li>\n<li>PriorityQueue<ul>\n<li>基于堆，堆是可以自我调整的二叉树，对树执行add和remove时，可以让最小的元素移动到根，不必对元素排序</li>\n<li>按照任意顺序插入，却可以按照顺序进行检索</li>\n<li>和TreeSet一样，存入的元素必须实现Comparable接口，或者构造器必须提供一个Comparator</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5、Map\"><a href=\"#5、Map\" class=\"headerlink\" title=\"5、Map\"></a>5、Map</h2><ul>\n<li>对键进行散列或排序，键必须唯一，同一个键多次调用put时，后面的会取代前面的，put返回这个键存储的上一个值。</li>\n<li>键不存在时，get方法返回null，可以用getOrDefault返回默认值，test.get(id,0)</li>\n<li>更新映射项，正常情况可以得到与一个键关联的值，替代原来的值，但是在需要持续更新时，例如:使用一个映射统计一个单词在文件中的频数，<code>counts.put(word,counts.get(word)+1)</code>,需要解决一个问题，就是键第一次出现时，这时可以有三种方法<ul>\n<li><code>counts.put(word,counts.getOrDefault(word,0) + 1)</code></li>\n<li>先调用putIfAbsent，只有原先键存在时才会放一个值,<code>counts.putIfAnsent(word,0)</code><br>  <code>counts.put(word,counts.get(word)+1)</code>            </li>\n<li><code>counts.merge(word,1,Interger::sum)</code>(推荐）,当word关联的值为空（即键值对不存在），将word与1关联；不为空时，将sum应用于word和1，sum返回的结果与word关联</li>\n</ul>\n</li>\n<li>映射视图：集合框架不认为映射本身是一种集合，不过可以通过调用Map一些方法得到映射的视图<ul>\n<li>键集：<code>Set&lt;K&gt; keySet()</code>，</li>\n<li>值集：<code>Collection&lt;V&gt; values()</code>，</li>\n<li>键/值对集：<code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></li>\n<li>这些集合不能添加元素，但可以删除这些集合中的远思，键和相关联的的值也将从映射中删除</li>\n</ul>\n</li>\n<li>散列<ul>\n<li>散列码，由对象的实例域产生的一个整数，由hashCOde()产生</li>\n<li>散列表，用链表数组实现，每个列表称为桶</li>\n<li>散列实现，Map中用数组保存键，查找表中对象的位置时，先算出散列码，然后与桶的总数取余，结果为保存此元素的桶的索引，即数组的下标，查询时通过equals()方法对List中的值进行查询<blockquote>\n<p>新版jdk使用红黑树和List（数据多用树，少时用List)</p>\n</blockquote>\n</li>\n<li>散列冲突，桶被占满时，可以设置装填因子（0~1），对散列表满时进行再散列，即创建桶数更多的表</li>\n</ul>\n</li>\n<li>HashMap<ul>\n<li>比较快，适用于不需要按照排列顺序访问键时</li>\n</ul>\n</li>\n<li>TreeMap<ul>\n<li>按排序顺序存储键值对，允许快速检索，保证了元素按关键字升序排序</li>\n</ul>\n</li>\n<li>WeakHashMap<ul>\n<li>使用弱引用（weak reference)保存key，WeakReference对象将引用保存到另外一个对象中，就是散列键</li>\n<li>如果垃圾回收器发现某个特定的对象已经没有人引用，就将其回收，而如果某个对象只由WeakReference引用，垃圾回收器仍然回收它，并将这个对象的弱引用放入队列，WeakHashMap将周期性地检查队列，一边找出新添加的弱引用，并将删除对应的条目</li>\n<li>适用于需要缓存时</li>\n</ul>\n</li>\n<li>LinkedHashMap<ul>\n<li>链接散列集与映射，用访问顺序，对映射条目进行迭代，每次调用get或put时，收到影响的条目从当前位置删除，并放到条目链表的尾部，不过条目仍然在原来散列码对应的桶中，只是改变了条目在链表中的位置</li>\n<li>用于实现高速缓存的“最近最少使用”原则</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6、视图与包装器\"><a href=\"#6、视图与包装器\" class=\"headerlink\" title=\"6、视图与包装器\"></a>6、视图与包装器</h2><ul>\n<li><p>轻量级集合包装器</p>\n<ul>\n<li><p>例如Arrays类的asList返回一个包装了普通java数组的List包装器，可以将数组传递给一个期望得到列表或集合参数的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Card[] cardDeck = new Card[52];</span><br><span class=\"line\">List&lt;Card&gt; cardList = Arrays.asList(cardDeck);</span><br></pre></td></tr></table></figure>\n<p>返回的是一个视图对象，可以调用底层数组的get和set，但不可改变数组的大小</p>\n</li>\n<li>例如Collections类的一些使用方法，nCopied(100,”KKK”),single(anObject)等，返回一个不可修改的试图对象</li>\n</ul>\n</li>\n<li>子范围<ul>\n<li>相当于返回几个的一个“子集合”，例如返回列表staff的第10-19个元素，可以用<code>List group2 = staff.subList(10,20);</code>,类似于String类中获取子串</li>\n<li>可以将任何操作应用于子范围，如`group2.clear()``,元素会从staff中清除</li>\n<li>对于有序集或者映射，可以使用排序顺序建立子范围，如SortedSet声明的三个方法，返回大于等于from小于to的所有元素的子集，<blockquote>\n<p>SortedSet<e> subSet(E from, E to)<br>SortedSet<e> headSet(E to)<br>SortedSet<e> tailSet(E from)</e></e></e></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>不可修改的视图<ul>\n<li>只能对现有集合增加了一个运行时的检查，试图修改会抛出异常，不过仍然可以通过原始引用修改</li>\n<li>访问器方法从原始集合对象中获取值</li>\n<li>视图只是包装了接口而不是实际的集合对象，因而只能访问接口中定义的方法，例如：<blockquote>\n<p>unmodifiableCollection方法将返回一个集合，但他的equals()方法不调用底层集合的，而是调用它继承了Object类的equals()方法，这个方法只是检测两个对象是否是同一个对象，视图就是以这种方式运行的</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>同步视图<ul>\n<li>实现多线程访问，确保集合的线程安全，例如<code>Collections.synchronizedMap</code></li>\n</ul>\n</li>\n<li>受查视图<ul>\n<li>用来对泛型类型进行检测，例如<code>Collections.checkedList</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、迭代器\"><a href=\"#1、迭代器\" class=\"headerlink\" title=\"1、迭代器\"></a>1、迭代器</h2><p>iterator是一个或者实现了Iterator,或者实现ListIterator接口的对象，可以通过循环输出类集的内容，从而获得或删除元素，</p>\n<ul>\n<li>next()方法<ul>\n<li>逐个访问集合中的每个元素，经常需要与hasNext()方法搭配使用；</li>\n<li>java迭代器可以认为位于两个元素之家，当调用next()时，迭代器越过下一个元素，并返回刚刚越过的那个元素的引用</li>\n</ul>\n</li>\n<li>用”for each”循环遍历类集的内容，</li>\n<li>remove()方法删除上次调用next()时返回的元素，因而调用remove之前没有调用next是不合法的，删除的元素依赖于迭代器的状态</li>\n<li>对于实现List的类集，可以使用ListIterator，可以双向访问类集，如果在调用previous之后调用remove，则会将迭代器右边的元素删掉</li>\n</ul>\n<h2 id=\"2、List\"><a href=\"#2、List\" class=\"headerlink\" title=\"2、List\"></a>2、List</h2><ul>\n<li><p>有序集合，使用基于零的下标，可以用迭代器访问（顺序访问）或者用一个整数索引访问（随机访问）,有两个主要的实现类</p>\n</li>\n<li><p>ArrayList</p>\n</li>\n</ul>\n<pre><code>- 基于数组，能够动态到地增加或减小其大小，当也可以调用ensureCapacity方法来进行人工地增加ArrayList的容量，从而避免再分配的消耗时间，前提是事先知道需要存储很多内容，然后往往是不知道\n\n- 适用于需要进行随机访问时\n</code></pre><ul>\n<li>LinkedList<ul>\n<li>基于双向链表，</li>\n<li>对于有序集合，add方法只是添加到链表的尾部，当需要将元素添加到链表中间时，可以用迭代器的add，只有对自然有序的集合使用迭代器添加元素才有实际意义，但是这里的add不返回任何值</li>\n<li>适用于顺序访问</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、Set\"><a href=\"#3、Set\" class=\"headerlink\" title=\"3、Set\"></a>3、Set</h2><p>等同于Collection,不允许增加重复的元素，需要定义equals方法来确保元素唯一</p>\n<ul>\n<li><p>HashSet</p>\n<ul>\n<li>基于散列表的集，无序</li>\n<li>存入的元素必须定义有hashCode()，以得到散列码</li>\n<li>可以快速地查找，对于大的集合，add()、contains()、remove()、size()等方法的运行时间保持不变</li>\n<li>可以设置装填因子来实现再散列</li>\n<li>适用于不关心访问顺序，需要查找大容量容器时</li>\n</ul>\n</li>\n<li><p>TreeSet</p>\n<ul>\n<li>基于红黑树排序，有序</li>\n<li>存入的元素必须实现Comparable接口，或者构造集必须提供一个Comparator</li>\n<li>每次添加元素时元素都会被放置到正确的位置，因而迭代器总是以排好序的顺序访问</li>\n<li>适用于存储大量需要进行快速检索的排序信息的情况</li>\n</ul>\n</li>\n<li><p>BitSet</p>\n<ul>\n<li>用于存放一个位序列</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4、Queue\"><a href=\"#4、Queue\" class=\"headerlink\" title=\"4、Queue\"></a>4、Queue</h2><ul>\n<li>双端队列，可以同时在头部或者尾部添加或删除元素，有两个实现<ul>\n<li>LinkedList</li>\n<li>ArrayList</li>\n</ul>\n</li>\n<li>PriorityQueue<ul>\n<li>基于堆，堆是可以自我调整的二叉树，对树执行add和remove时，可以让最小的元素移动到根，不必对元素排序</li>\n<li>按照任意顺序插入，却可以按照顺序进行检索</li>\n<li>和TreeSet一样，存入的元素必须实现Comparable接口，或者构造器必须提供一个Comparator</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5、Map\"><a href=\"#5、Map\" class=\"headerlink\" title=\"5、Map\"></a>5、Map</h2><ul>\n<li>对键进行散列或排序，键必须唯一，同一个键多次调用put时，后面的会取代前面的，put返回这个键存储的上一个值。</li>\n<li>键不存在时，get方法返回null，可以用getOrDefault返回默认值，test.get(id,0)</li>\n<li>更新映射项，正常情况可以得到与一个键关联的值，替代原来的值，但是在需要持续更新时，例如:使用一个映射统计一个单词在文件中的频数，<code>counts.put(word,counts.get(word)+1)</code>,需要解决一个问题，就是键第一次出现时，这时可以有三种方法<ul>\n<li><code>counts.put(word,counts.getOrDefault(word,0) + 1)</code></li>\n<li>先调用putIfAbsent，只有原先键存在时才会放一个值,<code>counts.putIfAnsent(word,0)</code><br>  <code>counts.put(word,counts.get(word)+1)</code>            </li>\n<li><code>counts.merge(word,1,Interger::sum)</code>(推荐）,当word关联的值为空（即键值对不存在），将word与1关联；不为空时，将sum应用于word和1，sum返回的结果与word关联</li>\n</ul>\n</li>\n<li>映射视图：集合框架不认为映射本身是一种集合，不过可以通过调用Map一些方法得到映射的视图<ul>\n<li>键集：<code>Set&lt;K&gt; keySet()</code>，</li>\n<li>值集：<code>Collection&lt;V&gt; values()</code>，</li>\n<li>键/值对集：<code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></li>\n<li>这些集合不能添加元素，但可以删除这些集合中的远思，键和相关联的的值也将从映射中删除</li>\n</ul>\n</li>\n<li>散列<ul>\n<li>散列码，由对象的实例域产生的一个整数，由hashCOde()产生</li>\n<li>散列表，用链表数组实现，每个列表称为桶</li>\n<li>散列实现，Map中用数组保存键，查找表中对象的位置时，先算出散列码，然后与桶的总数取余，结果为保存此元素的桶的索引，即数组的下标，查询时通过equals()方法对List中的值进行查询<blockquote>\n<p>新版jdk使用红黑树和List（数据多用树，少时用List)</p>\n</blockquote>\n</li>\n<li>散列冲突，桶被占满时，可以设置装填因子（0~1），对散列表满时进行再散列，即创建桶数更多的表</li>\n</ul>\n</li>\n<li>HashMap<ul>\n<li>比较快，适用于不需要按照排列顺序访问键时</li>\n</ul>\n</li>\n<li>TreeMap<ul>\n<li>按排序顺序存储键值对，允许快速检索，保证了元素按关键字升序排序</li>\n</ul>\n</li>\n<li>WeakHashMap<ul>\n<li>使用弱引用（weak reference)保存key，WeakReference对象将引用保存到另外一个对象中，就是散列键</li>\n<li>如果垃圾回收器发现某个特定的对象已经没有人引用，就将其回收，而如果某个对象只由WeakReference引用，垃圾回收器仍然回收它，并将这个对象的弱引用放入队列，WeakHashMap将周期性地检查队列，一边找出新添加的弱引用，并将删除对应的条目</li>\n<li>适用于需要缓存时</li>\n</ul>\n</li>\n<li>LinkedHashMap<ul>\n<li>链接散列集与映射，用访问顺序，对映射条目进行迭代，每次调用get或put时，收到影响的条目从当前位置删除，并放到条目链表的尾部，不过条目仍然在原来散列码对应的桶中，只是改变了条目在链表中的位置</li>\n<li>用于实现高速缓存的“最近最少使用”原则</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6、视图与包装器\"><a href=\"#6、视图与包装器\" class=\"headerlink\" title=\"6、视图与包装器\"></a>6、视图与包装器</h2><ul>\n<li><p>轻量级集合包装器</p>\n<ul>\n<li><p>例如Arrays类的asList返回一个包装了普通java数组的List包装器，可以将数组传递给一个期望得到列表或集合参数的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Card[] cardDeck = new Card[52];</span><br><span class=\"line\">List&lt;Card&gt; cardList = Arrays.asList(cardDeck);</span><br></pre></td></tr></table></figure>\n<p>返回的是一个视图对象，可以调用底层数组的get和set，但不可改变数组的大小</p>\n</li>\n<li>例如Collections类的一些使用方法，nCopied(100,”KKK”),single(anObject)等，返回一个不可修改的试图对象</li>\n</ul>\n</li>\n<li>子范围<ul>\n<li>相当于返回几个的一个“子集合”，例如返回列表staff的第10-19个元素，可以用<code>List group2 = staff.subList(10,20);</code>,类似于String类中获取子串</li>\n<li>可以将任何操作应用于子范围，如`group2.clear()``,元素会从staff中清除</li>\n<li>对于有序集或者映射，可以使用排序顺序建立子范围，如SortedSet声明的三个方法，返回大于等于from小于to的所有元素的子集，<blockquote>\n<p>SortedSet<e> subSet(E from, E to)<br>SortedSet<e> headSet(E to)<br>SortedSet<e> tailSet(E from)</e></e></e></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>不可修改的视图<ul>\n<li>只能对现有集合增加了一个运行时的检查，试图修改会抛出异常，不过仍然可以通过原始引用修改</li>\n<li>访问器方法从原始集合对象中获取值</li>\n<li>视图只是包装了接口而不是实际的集合对象，因而只能访问接口中定义的方法，例如：<blockquote>\n<p>unmodifiableCollection方法将返回一个集合，但他的equals()方法不调用底层集合的，而是调用它继承了Object类的equals()方法，这个方法只是检测两个对象是否是同一个对象，视图就是以这种方式运行的</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>同步视图<ul>\n<li>实现多线程访问，确保集合的线程安全，例如<code>Collections.synchronizedMap</code></li>\n</ul>\n</li>\n<li>受查视图<ul>\n<li>用来对泛型类型进行检测，例如<code>Collections.checkedList</code></li>\n</ul>\n</li>\n</ul>\n"},{"title":"markdownpad2 无法预览 显示This view has crashed!","date":"2018-03-10T09:46:33.000Z","_content":"\n在使用markdownpad2时，一直报错，说html渲染错误，上了官网查看解释如下，\n![error resport](/images/markdownpad2.png)\n要安装 [Awesomium 1.6.6 SDK](http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe)，如果不行再安装[DirectX最终用户运行时](http://www.microsoft.com/en-us/download/details.aspx?id=8109),\n不过一般只需要安装sdk就没问题了","source":"_posts/markdownpad2-无法预览-显示This-view-has-crashed.md","raw":"---\ntitle: markdownpad2 无法预览 显示This view has crashed!\ndate: 2018-03-10 17:46:33\ncategories: \"踩过的坑\"\ntags: \n    - markdownPad\n---\n\n在使用markdownpad2时，一直报错，说html渲染错误，上了官网查看解释如下，\n![error resport](/images/markdownpad2.png)\n要安装 [Awesomium 1.6.6 SDK](http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe)，如果不行再安装[DirectX最终用户运行时](http://www.microsoft.com/en-us/download/details.aspx?id=8109),\n不过一般只需要安装sdk就没问题了","slug":"markdownpad2-无法预览-显示This-view-has-crashed","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8ov00188lyj0dh45nnj","content":"<p>在使用markdownpad2时，一直报错，说html渲染错误，上了官网查看解释如下，<br><img src=\"/images/markdownpad2.png\" alt=\"error resport\"><br>要安装 <a href=\"http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe\" target=\"_blank\" rel=\"noopener\">Awesomium 1.6.6 SDK</a>，如果不行再安装<a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=8109\" target=\"_blank\" rel=\"noopener\">DirectX最终用户运行时</a>,<br>不过一般只需要安装sdk就没问题了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用markdownpad2时，一直报错，说html渲染错误，上了官网查看解释如下，<br><img src=\"/images/markdownpad2.png\" alt=\"error resport\"><br>要安装 <a href=\"http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe\" target=\"_blank\" rel=\"noopener\">Awesomium 1.6.6 SDK</a>，如果不行再安装<a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=8109\" target=\"_blank\" rel=\"noopener\">DirectX最终用户运行时</a>,<br>不过一般只需要安装sdk就没问题了</p>\n"},{"title":"nginx 配置实现端口转发","date":"2018-04-04T14:14:46.000Z","_content":"最近在部署一个小程序的后台，但是小程序调用的接口是不能带端口号的，那么如果服务器上面80端口已经被其他程序占用，就只能采用端口转发或者虚拟目录，我采用的是端口转发，或者说当在一台主机上需要部署多个web应用，并且需要能在80端口访问这些web时，就可以采用这种方法，也可以叫做nginx反向代理用于实现负载均衡，这里记录一下遇到的一些小问题。\n\n加入服务器域名是test.com,那么你可以通过test.com/news在80端口访问新闻应用，但是服务器上分配的是其他端口，如8081。\n对应的nginx配置如下：\n\n80端口的配置： 访问test.com/news => 127.0.0.1:8081 ,这里有一个需要注意的地方是转发的url最后需要加上'/'，\n这相当指定了url'/',如果代理服务器地址中是带有URL的，此URL会替换掉 location 所匹配的URL部分, test.com/news/api,访问的是ip:8081/api;而如果代理服务器地址中是不带有URI的，则会用完整的请求URL来转发到代理服务器,test.com/news/api,访问的是ip:8081/news/api;\n\n``` bash\n\nserver {\n        listen       80;\n #      listen       [::]:80 default_server;\n        server_name  test.com\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        location /news{\n                proxy_pass http:test.com:8081/;\n        }\n\n    }\n\n```\n\n8081端口的配置： 与平时配置没什么差别\n\n``` bash\n\n\tserver {\n        listen 8081;\n        server_name localhost;\n        root /var/www/project;\n\n\n        location / {\n        index index.php index.html index.htm;\n        if ( !-e $request_filename){\n        rewrite ^(.*)$ /index.php?s=/$1 last;\n        break;\n                }\n        }\n\n\t   #error_page 500 502 503 504  /50x.html;\n       #location = /50x.html {\n       #root /usr/share/ngixn/html;\n       #}\n\n       #我部署的是PHP项目，这里配置PHP解析\n        location ~ \\.php$ {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include /etc/nginx/fastcgi_params;\n        include /etc/nginx/fastcgi.conf;\n        }\n}\n\n```\n\n","source":"_posts/nginx-配置实现端口转发.md","raw":"---\ntitle: nginx 配置实现端口转发\ndate: 2018-04-04 22:14:46\ncategories: \"服务器\"\ntags: \n    - nginx\n---\n最近在部署一个小程序的后台，但是小程序调用的接口是不能带端口号的，那么如果服务器上面80端口已经被其他程序占用，就只能采用端口转发或者虚拟目录，我采用的是端口转发，或者说当在一台主机上需要部署多个web应用，并且需要能在80端口访问这些web时，就可以采用这种方法，也可以叫做nginx反向代理用于实现负载均衡，这里记录一下遇到的一些小问题。\n\n加入服务器域名是test.com,那么你可以通过test.com/news在80端口访问新闻应用，但是服务器上分配的是其他端口，如8081。\n对应的nginx配置如下：\n\n80端口的配置： 访问test.com/news => 127.0.0.1:8081 ,这里有一个需要注意的地方是转发的url最后需要加上'/'，\n这相当指定了url'/',如果代理服务器地址中是带有URL的，此URL会替换掉 location 所匹配的URL部分, test.com/news/api,访问的是ip:8081/api;而如果代理服务器地址中是不带有URI的，则会用完整的请求URL来转发到代理服务器,test.com/news/api,访问的是ip:8081/news/api;\n\n``` bash\n\nserver {\n        listen       80;\n #      listen       [::]:80 default_server;\n        server_name  test.com\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        location /news{\n                proxy_pass http:test.com:8081/;\n        }\n\n    }\n\n```\n\n8081端口的配置： 与平时配置没什么差别\n\n``` bash\n\n\tserver {\n        listen 8081;\n        server_name localhost;\n        root /var/www/project;\n\n\n        location / {\n        index index.php index.html index.htm;\n        if ( !-e $request_filename){\n        rewrite ^(.*)$ /index.php?s=/$1 last;\n        break;\n                }\n        }\n\n\t   #error_page 500 502 503 504  /50x.html;\n       #location = /50x.html {\n       #root /usr/share/ngixn/html;\n       #}\n\n       #我部署的是PHP项目，这里配置PHP解析\n        location ~ \\.php$ {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include /etc/nginx/fastcgi_params;\n        include /etc/nginx/fastcgi.conf;\n        }\n}\n\n```\n\n","slug":"nginx-配置实现端口转发","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8ow001d8lyjrj8hxrp7","content":"<p>最近在部署一个小程序的后台，但是小程序调用的接口是不能带端口号的，那么如果服务器上面80端口已经被其他程序占用，就只能采用端口转发或者虚拟目录，我采用的是端口转发，或者说当在一台主机上需要部署多个web应用，并且需要能在80端口访问这些web时，就可以采用这种方法，也可以叫做nginx反向代理用于实现负载均衡，这里记录一下遇到的一些小问题。</p>\n<p>加入服务器域名是test.com,那么你可以通过test.com/news在80端口访问新闻应用，但是服务器上分配的是其他端口，如8081。<br>对应的nginx配置如下：</p>\n<p>80端口的配置： 访问test.com/news =&gt; 127.0.0.1:8081 ,这里有一个需要注意的地方是转发的url最后需要加上’/‘，<br>这相当指定了url’/‘,如果代理服务器地址中是带有URL的，此URL会替换掉 location 所匹配的URL部分, test.com/news/api,访问的是ip:8081/api;而如果代理服务器地址中是不带有URI的，则会用完整的请求URL来转发到代理服务器,test.com/news/api,访问的是ip:8081/news/api;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\"> <span class=\"comment\">#      listen       [::]:80 default_server;</span></span><br><span class=\"line\">        server_name  test.com</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /news&#123;</span><br><span class=\"line\">                proxy_pass http:test.com:8081/;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>8081端口的配置： 与平时配置没什么差别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">        listen 8081;</span><br><span class=\"line\">        server_name localhost;</span><br><span class=\"line\">        root /var/www/project;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        index index.php index.html index.htm;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !-e <span class=\"variable\">$request_filename</span>)&#123;</span><br><span class=\"line\">        rewrite ^(.*)$ /index.php?s=/<span class=\"variable\">$1</span> last;</span><br><span class=\"line\">        <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t   <span class=\"comment\">#error_page 500 502 503 504  /50x.html;</span></span><br><span class=\"line\">       <span class=\"comment\">#location = /50x.html &#123;</span></span><br><span class=\"line\">       <span class=\"comment\">#root /usr/share/ngixn/html;</span></span><br><span class=\"line\">       <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">#我部署的是PHP项目，这里配置PHP解析</span></span><br><span class=\"line\">        location ~ \\.php$ &#123;</span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        include /etc/nginx/fastcgi_params;</span><br><span class=\"line\">        include /etc/nginx/fastcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在部署一个小程序的后台，但是小程序调用的接口是不能带端口号的，那么如果服务器上面80端口已经被其他程序占用，就只能采用端口转发或者虚拟目录，我采用的是端口转发，或者说当在一台主机上需要部署多个web应用，并且需要能在80端口访问这些web时，就可以采用这种方法，也可以叫做nginx反向代理用于实现负载均衡，这里记录一下遇到的一些小问题。</p>\n<p>加入服务器域名是test.com,那么你可以通过test.com/news在80端口访问新闻应用，但是服务器上分配的是其他端口，如8081。<br>对应的nginx配置如下：</p>\n<p>80端口的配置： 访问test.com/news =&gt; 127.0.0.1:8081 ,这里有一个需要注意的地方是转发的url最后需要加上’/‘，<br>这相当指定了url’/‘,如果代理服务器地址中是带有URL的，此URL会替换掉 location 所匹配的URL部分, test.com/news/api,访问的是ip:8081/api;而如果代理服务器地址中是不带有URI的，则会用完整的请求URL来转发到代理服务器,test.com/news/api,访问的是ip:8081/news/api;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\"> <span class=\"comment\">#      listen       [::]:80 default_server;</span></span><br><span class=\"line\">        server_name  test.com</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /news&#123;</span><br><span class=\"line\">                proxy_pass http:test.com:8081/;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>8081端口的配置： 与平时配置没什么差别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">        listen 8081;</span><br><span class=\"line\">        server_name localhost;</span><br><span class=\"line\">        root /var/www/project;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        index index.php index.html index.htm;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !-e <span class=\"variable\">$request_filename</span>)&#123;</span><br><span class=\"line\">        rewrite ^(.*)$ /index.php?s=/<span class=\"variable\">$1</span> last;</span><br><span class=\"line\">        <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t   <span class=\"comment\">#error_page 500 502 503 504  /50x.html;</span></span><br><span class=\"line\">       <span class=\"comment\">#location = /50x.html &#123;</span></span><br><span class=\"line\">       <span class=\"comment\">#root /usr/share/ngixn/html;</span></span><br><span class=\"line\">       <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">#我部署的是PHP项目，这里配置PHP解析</span></span><br><span class=\"line\">        location ~ \\.php$ &#123;</span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        include /etc/nginx/fastcgi_params;</span><br><span class=\"line\">        include /etc/nginx/fastcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"test","date":"2018-07-23T10:39:16.000Z","_content":"","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2018-07-23 18:39:16\ntags:\n---\n","slug":"test","published":1,"updated":"2018-07-23T10:39:16.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8ox001g8lyj40z2nyob","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"vim的使用","date":"2018-04-30T11:42:21.000Z","_content":"一、一般模式：光标的移动、复制粘贴、搜索替换\n- 移动光标： \n\n\t** 向左移动一个字符：h 或 ← **\n\n\t** 向右移动一个字符：l 或 → **\n\n\t** 向上移动一个字符：k 或 ↑ **\n\n\t** 向下移动一个字符：j 或 ↓ **\n\n\t向左移动n个字符：n + h（其他同理)，如10h\n\t向右移动这一行的n个字符(会换到下一行)：n + space,如20space\n\t屏幕向上移动一页：Ctrl + b\n\t屏幕向下移动一页：Ctrl + f\n\t屏幕向上移动半页：Ctrl + u\n\t屏幕向下移动半页：Ctrl + d\n\t移动到非空格的下一行：+\n\t移动到非空格的上一行：-\n\t移动到屏幕最上方那一行的第一个字符：H\n\t移动到屏幕最中间那一行的第一个字符：M\n\t移动到屏幕最下方那一行的第一个字符：L\n\t** 移动到这个文件的最后一行：G **\n\t移动到这个文件的第n行：nG\n\t** 移动到这个文件的第一行:gg **\n\t** 向下移动n行：n + enter,如10enter **\n\n- 搜索替换：\n\t\n\t** 向光标往下搜索一个word的字符串：/word **\n\t** 向光标往上搜索一个word的字符串：?word **\n\t** 重复前一个搜寻动作 ，如果刚刚我们执行 /word 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 word 的字符串。如果是？word的话就向上搜寻。按下N则反向 **\n\t** 在第n1行与第n2行之间寻找word1这个字符串，并将给字符串取代为word2:n1,n2s/word1/word2/g, 如:10,100s/word/WORD/g **\n\t** 从第1行到最后一行寻找word1字符串，取代为word2: :1,$s/word1/word2/g **\n\t** 从第1行到最后一行寻找word1字符串，取代为word2，取代前提示用户确认（confirm）是否需要取代: :1,$s/word1/word2/gc **\n\t\n\n- 删除、复制与粘贴\n- 删除\n\t** 向前（后）删除一个字符：x(X)，相当于backspace **\n\t** 连续向后删除n个字符： nx,如10x **\n\t** 删除光标所在的一整行：dd **\n\t** 删除光标所在的向下n行：ndd **\n\t删除光标所在到第一行的所有数据：d1G\n\t输出光标所在到最后一行的所有数据:dG\n\t删除光标所在到该行最后一个字符：d$\n\t删除光标所在到该行第一个字符：d0\n\t\n-复制\n\t** 复制光标所在的那一行：yy **\n\t** 复制光标所在的向下n行：nyy **\n\t复制光标所在行到第一行的所有数据：y1G\n\t复制光标所在行到最后一行的所有数据:yG\n\t复制光标所在到该行最后一个字符：y$\n\t复制光标所在到该行第一个字符：y0\n\n-粘贴\n\t** 将已复制的数据在光标下（上）一行贴上：p(P); **\n\t** 将光标所在行与 下一行的数据结合成一行： J **\n\t重复删除多个数据:c，如向下删除10行：10cj\n\t** 复原前一个动作：u **\n\t** 重复上一个动作：Ctrl + r **\n\n\n\n二、一般模式到编辑模式的切换\n-进去输入模式\n-i/I\n\t** 从目前光标所在处输入：i **\n\t** 从目前所在行的第一个非空格符处开始输入：I **\n\t\n-a/A\n\t从目前光标所在的下一个字符处开始输入:a\n\t从光标所在行的最后一个字符处开始输入:A\n\n-o/O\n\t** 在光标所在的下一行输入新的一行：o **\n\t** 在光标所在的上一行输入新的一行：O **\n-进入取代模式\n-r/R\n\t** 取代光标所在的那一个字符一次：r **\n\t** 一直取代光标所在的字符，直到按esc **\n\n\n三、一般模式到命令行模式的切换\n- 指令行的存储、离开等\n\t** 保存编辑： :w **\n\t** 强制写入： :w! **\n\t** 退出： :q **\n\t** 强制退出，不保存修改： :q! **\n\t** 保存修改后退出： :wq **\n\t** 将修改后的数据另存为一个文件： :w filename **\n\t在当前编辑的数据中，读入另一个文件的数据： :r filename \n \t将n1到n2的内容存储成另一个文件filename: :n1,n2 w filename\n\t** \t暂时离开 vi 到指令行模式下执行 command 的显示结果： :!command ;例如:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的文件信息 **\n\n- vim环境的变更\n\t显示行号： :set nu\n\t取消显示行号： :set nonu","source":"_posts/vim的使用.md","raw":"---\ntitle: vim的使用\ndate: 2018-04-30 19:42:21\ncategories: \"编辑器\"\ntags:\n\t - vim\n---\n一、一般模式：光标的移动、复制粘贴、搜索替换\n- 移动光标： \n\n\t** 向左移动一个字符：h 或 ← **\n\n\t** 向右移动一个字符：l 或 → **\n\n\t** 向上移动一个字符：k 或 ↑ **\n\n\t** 向下移动一个字符：j 或 ↓ **\n\n\t向左移动n个字符：n + h（其他同理)，如10h\n\t向右移动这一行的n个字符(会换到下一行)：n + space,如20space\n\t屏幕向上移动一页：Ctrl + b\n\t屏幕向下移动一页：Ctrl + f\n\t屏幕向上移动半页：Ctrl + u\n\t屏幕向下移动半页：Ctrl + d\n\t移动到非空格的下一行：+\n\t移动到非空格的上一行：-\n\t移动到屏幕最上方那一行的第一个字符：H\n\t移动到屏幕最中间那一行的第一个字符：M\n\t移动到屏幕最下方那一行的第一个字符：L\n\t** 移动到这个文件的最后一行：G **\n\t移动到这个文件的第n行：nG\n\t** 移动到这个文件的第一行:gg **\n\t** 向下移动n行：n + enter,如10enter **\n\n- 搜索替换：\n\t\n\t** 向光标往下搜索一个word的字符串：/word **\n\t** 向光标往上搜索一个word的字符串：?word **\n\t** 重复前一个搜寻动作 ，如果刚刚我们执行 /word 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 word 的字符串。如果是？word的话就向上搜寻。按下N则反向 **\n\t** 在第n1行与第n2行之间寻找word1这个字符串，并将给字符串取代为word2:n1,n2s/word1/word2/g, 如:10,100s/word/WORD/g **\n\t** 从第1行到最后一行寻找word1字符串，取代为word2: :1,$s/word1/word2/g **\n\t** 从第1行到最后一行寻找word1字符串，取代为word2，取代前提示用户确认（confirm）是否需要取代: :1,$s/word1/word2/gc **\n\t\n\n- 删除、复制与粘贴\n- 删除\n\t** 向前（后）删除一个字符：x(X)，相当于backspace **\n\t** 连续向后删除n个字符： nx,如10x **\n\t** 删除光标所在的一整行：dd **\n\t** 删除光标所在的向下n行：ndd **\n\t删除光标所在到第一行的所有数据：d1G\n\t输出光标所在到最后一行的所有数据:dG\n\t删除光标所在到该行最后一个字符：d$\n\t删除光标所在到该行第一个字符：d0\n\t\n-复制\n\t** 复制光标所在的那一行：yy **\n\t** 复制光标所在的向下n行：nyy **\n\t复制光标所在行到第一行的所有数据：y1G\n\t复制光标所在行到最后一行的所有数据:yG\n\t复制光标所在到该行最后一个字符：y$\n\t复制光标所在到该行第一个字符：y0\n\n-粘贴\n\t** 将已复制的数据在光标下（上）一行贴上：p(P); **\n\t** 将光标所在行与 下一行的数据结合成一行： J **\n\t重复删除多个数据:c，如向下删除10行：10cj\n\t** 复原前一个动作：u **\n\t** 重复上一个动作：Ctrl + r **\n\n\n\n二、一般模式到编辑模式的切换\n-进去输入模式\n-i/I\n\t** 从目前光标所在处输入：i **\n\t** 从目前所在行的第一个非空格符处开始输入：I **\n\t\n-a/A\n\t从目前光标所在的下一个字符处开始输入:a\n\t从光标所在行的最后一个字符处开始输入:A\n\n-o/O\n\t** 在光标所在的下一行输入新的一行：o **\n\t** 在光标所在的上一行输入新的一行：O **\n-进入取代模式\n-r/R\n\t** 取代光标所在的那一个字符一次：r **\n\t** 一直取代光标所在的字符，直到按esc **\n\n\n三、一般模式到命令行模式的切换\n- 指令行的存储、离开等\n\t** 保存编辑： :w **\n\t** 强制写入： :w! **\n\t** 退出： :q **\n\t** 强制退出，不保存修改： :q! **\n\t** 保存修改后退出： :wq **\n\t** 将修改后的数据另存为一个文件： :w filename **\n\t在当前编辑的数据中，读入另一个文件的数据： :r filename \n \t将n1到n2的内容存储成另一个文件filename: :n1,n2 w filename\n\t** \t暂时离开 vi 到指令行模式下执行 command 的显示结果： :!command ;例如:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的文件信息 **\n\n- vim环境的变更\n\t显示行号： :set nu\n\t取消显示行号： :set nonu","slug":"vim的使用","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8oy001l8lyj4pacqqnt","content":"<p>一、一般模式：光标的移动、复制粘贴、搜索替换</p>\n<ul>\n<li><p>移动光标： </p>\n<p>  <strong> 向左移动一个字符：h 或 ← </strong></p>\n<p>  <strong> 向右移动一个字符：l 或 → </strong></p>\n<p>  <strong> 向上移动一个字符：k 或 ↑ </strong></p>\n<p>  <strong> 向下移动一个字符：j 或 ↓ </strong></p>\n<p>  向左移动n个字符：n + h（其他同理)，如10h<br>  向右移动这一行的n个字符(会换到下一行)：n + space,如20space<br>  屏幕向上移动一页：Ctrl + b<br>  屏幕向下移动一页：Ctrl + f<br>  屏幕向上移动半页：Ctrl + u<br>  屏幕向下移动半页：Ctrl + d<br>  移动到非空格的下一行：+<br>  移动到非空格的上一行：-<br>  移动到屏幕最上方那一行的第一个字符：H<br>  移动到屏幕最中间那一行的第一个字符：M<br>  移动到屏幕最下方那一行的第一个字符：L<br>  <strong> 移动到这个文件的最后一行：G </strong><br>  移动到这个文件的第n行：nG<br>  <strong> 移动到这个文件的第一行:gg </strong><br>  <strong> 向下移动n行：n + enter,如10enter </strong></p>\n</li>\n<li><p>搜索替换：</p>\n<p>  <strong> 向光标往下搜索一个word的字符串：/word </strong><br>  <strong> 向光标往上搜索一个word的字符串：?word </strong><br>  <strong> 重复前一个搜寻动作 ，如果刚刚我们执行 /word 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 word 的字符串。如果是？word的话就向上搜寻。按下N则反向 </strong><br>  <strong> 在第n1行与第n2行之间寻找word1这个字符串，并将给字符串取代为word2:n1,n2s/word1/word2/g, 如:10,100s/word/WORD/g </strong><br>  <strong> 从第1行到最后一行寻找word1字符串，取代为word2: :1,$s/word1/word2/g </strong><br>  <strong> 从第1行到最后一行寻找word1字符串，取代为word2，取代前提示用户确认（confirm）是否需要取代: :1,$s/word1/word2/gc </strong></p>\n</li>\n</ul>\n<ul>\n<li>删除、复制与粘贴</li>\n<li>删除<br>  <strong> 向前（后）删除一个字符：x(X)，相当于backspace </strong><br>  <strong> 连续向后删除n个字符： nx,如10x </strong><br>  <strong> 删除光标所在的一整行：dd </strong><br>  <strong> 删除光标所在的向下n行：ndd </strong><br>  删除光标所在到第一行的所有数据：d1G<br>  输出光标所在到最后一行的所有数据:dG<br>  删除光标所在到该行最后一个字符：d$<br>  删除光标所在到该行第一个字符：d0</li>\n</ul>\n<p>-复制<br>    <strong> 复制光标所在的那一行：yy </strong><br>    <strong> 复制光标所在的向下n行：nyy </strong><br>    复制光标所在行到第一行的所有数据：y1G<br>    复制光标所在行到最后一行的所有数据:yG<br>    复制光标所在到该行最后一个字符：y$<br>    复制光标所在到该行第一个字符：y0</p>\n<p>-粘贴<br>    <strong> 将已复制的数据在光标下（上）一行贴上：p(P); </strong><br>    <strong> 将光标所在行与 下一行的数据结合成一行： J </strong><br>    重复删除多个数据:c，如向下删除10行：10cj<br>    <strong> 复原前一个动作：u </strong><br>    <strong> 重复上一个动作：Ctrl + r </strong></p>\n<p>二、一般模式到编辑模式的切换<br>-进去输入模式<br>-i/I<br>    <strong> 从目前光标所在处输入：i </strong><br>    <strong> 从目前所在行的第一个非空格符处开始输入：I </strong></p>\n<p>-a/A<br>    从目前光标所在的下一个字符处开始输入:a<br>    从光标所在行的最后一个字符处开始输入:A</p>\n<p>-o/O<br>    <strong> 在光标所在的下一行输入新的一行：o </strong><br>    <strong> 在光标所在的上一行输入新的一行：O </strong><br>-进入取代模式<br>-r/R<br>    <strong> 取代光标所在的那一个字符一次：r </strong><br>    <strong> 一直取代光标所在的字符，直到按esc </strong></p>\n<p>三、一般模式到命令行模式的切换</p>\n<ul>\n<li><p>指令行的存储、离开等<br>  <strong> 保存编辑： :w </strong><br>  <strong> 强制写入： :w! </strong><br>  <strong> 退出： :q </strong><br>  <strong> 强制退出，不保存修改： :q! </strong><br>  <strong> 保存修改后退出： :wq </strong><br>  <strong> 将修改后的数据另存为一个文件： :w filename </strong><br>  在当前编辑的数据中，读入另一个文件的数据： :r filename<br>   将n1到n2的内容存储成另一个文件filename: :n1,n2 w filename<br>  <strong>     暂时离开 vi 到指令行模式下执行 command 的显示结果： :!command ;例如:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的文件信息 </strong></p>\n</li>\n<li><p>vim环境的变更<br>  显示行号： :set nu<br>  取消显示行号： :set nonu</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>一、一般模式：光标的移动、复制粘贴、搜索替换</p>\n<ul>\n<li><p>移动光标： </p>\n<p>  <strong> 向左移动一个字符：h 或 ← </strong></p>\n<p>  <strong> 向右移动一个字符：l 或 → </strong></p>\n<p>  <strong> 向上移动一个字符：k 或 ↑ </strong></p>\n<p>  <strong> 向下移动一个字符：j 或 ↓ </strong></p>\n<p>  向左移动n个字符：n + h（其他同理)，如10h<br>  向右移动这一行的n个字符(会换到下一行)：n + space,如20space<br>  屏幕向上移动一页：Ctrl + b<br>  屏幕向下移动一页：Ctrl + f<br>  屏幕向上移动半页：Ctrl + u<br>  屏幕向下移动半页：Ctrl + d<br>  移动到非空格的下一行：+<br>  移动到非空格的上一行：-<br>  移动到屏幕最上方那一行的第一个字符：H<br>  移动到屏幕最中间那一行的第一个字符：M<br>  移动到屏幕最下方那一行的第一个字符：L<br>  <strong> 移动到这个文件的最后一行：G </strong><br>  移动到这个文件的第n行：nG<br>  <strong> 移动到这个文件的第一行:gg </strong><br>  <strong> 向下移动n行：n + enter,如10enter </strong></p>\n</li>\n<li><p>搜索替换：</p>\n<p>  <strong> 向光标往下搜索一个word的字符串：/word </strong><br>  <strong> 向光标往上搜索一个word的字符串：?word </strong><br>  <strong> 重复前一个搜寻动作 ，如果刚刚我们执行 /word 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 word 的字符串。如果是？word的话就向上搜寻。按下N则反向 </strong><br>  <strong> 在第n1行与第n2行之间寻找word1这个字符串，并将给字符串取代为word2:n1,n2s/word1/word2/g, 如:10,100s/word/WORD/g </strong><br>  <strong> 从第1行到最后一行寻找word1字符串，取代为word2: :1,$s/word1/word2/g </strong><br>  <strong> 从第1行到最后一行寻找word1字符串，取代为word2，取代前提示用户确认（confirm）是否需要取代: :1,$s/word1/word2/gc </strong></p>\n</li>\n</ul>\n<ul>\n<li>删除、复制与粘贴</li>\n<li>删除<br>  <strong> 向前（后）删除一个字符：x(X)，相当于backspace </strong><br>  <strong> 连续向后删除n个字符： nx,如10x </strong><br>  <strong> 删除光标所在的一整行：dd </strong><br>  <strong> 删除光标所在的向下n行：ndd </strong><br>  删除光标所在到第一行的所有数据：d1G<br>  输出光标所在到最后一行的所有数据:dG<br>  删除光标所在到该行最后一个字符：d$<br>  删除光标所在到该行第一个字符：d0</li>\n</ul>\n<p>-复制<br>    <strong> 复制光标所在的那一行：yy </strong><br>    <strong> 复制光标所在的向下n行：nyy </strong><br>    复制光标所在行到第一行的所有数据：y1G<br>    复制光标所在行到最后一行的所有数据:yG<br>    复制光标所在到该行最后一个字符：y$<br>    复制光标所在到该行第一个字符：y0</p>\n<p>-粘贴<br>    <strong> 将已复制的数据在光标下（上）一行贴上：p(P); </strong><br>    <strong> 将光标所在行与 下一行的数据结合成一行： J </strong><br>    重复删除多个数据:c，如向下删除10行：10cj<br>    <strong> 复原前一个动作：u </strong><br>    <strong> 重复上一个动作：Ctrl + r </strong></p>\n<p>二、一般模式到编辑模式的切换<br>-进去输入模式<br>-i/I<br>    <strong> 从目前光标所在处输入：i </strong><br>    <strong> 从目前所在行的第一个非空格符处开始输入：I </strong></p>\n<p>-a/A<br>    从目前光标所在的下一个字符处开始输入:a<br>    从光标所在行的最后一个字符处开始输入:A</p>\n<p>-o/O<br>    <strong> 在光标所在的下一行输入新的一行：o </strong><br>    <strong> 在光标所在的上一行输入新的一行：O </strong><br>-进入取代模式<br>-r/R<br>    <strong> 取代光标所在的那一个字符一次：r </strong><br>    <strong> 一直取代光标所在的字符，直到按esc </strong></p>\n<p>三、一般模式到命令行模式的切换</p>\n<ul>\n<li><p>指令行的存储、离开等<br>  <strong> 保存编辑： :w </strong><br>  <strong> 强制写入： :w! </strong><br>  <strong> 退出： :q </strong><br>  <strong> 强制退出，不保存修改： :q! </strong><br>  <strong> 保存修改后退出： :wq </strong><br>  <strong> 将修改后的数据另存为一个文件： :w filename </strong><br>  在当前编辑的数据中，读入另一个文件的数据： :r filename<br>   将n1到n2的内容存储成另一个文件filename: :n1,n2 w filename<br>  <strong>     暂时离开 vi 到指令行模式下执行 command 的显示结果： :!command ;例如:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的文件信息 </strong></p>\n</li>\n<li><p>vim环境的变更<br>  显示行号： :set nu<br>  取消显示行号： :set nonu</p>\n</li>\n</ul>\n"},{"title":"进程并发常见问题基于信号量解决方法总结：生产者/消费者问题、读/写者问题、银行家算法、哲学家进餐","date":"2018-04-16T11:07:43.000Z","_content":"\n一、信号量\n\n信号量是一个与队列有关的整型变量。\n可以初始化成非负数；\nsemWait操作使信号量减1。若值为负数，则执行semWait的进程阻塞，否则继续执行；\nsemSignal操作使信号量加1。若值小于或等于0，则被semWait操作阻塞的进程被解除阻塞。\n信号量原语semWait和semSignal的定义：\n\n\n``` bash\n\t\n\tstrcut semaphore{\n\t\tint count;\n\t\taueueType queue;\n\t};\n\t\n\tvoid semWait(semaphore s) {\n\t\ts.count--;\n\t\tif(s.count < 0) {\n \t\t\tplace this process in s.queue;\n\t\t\tblock this process;\n\t\t}\n\t}\n\n\tvoid semSignal(semaphore s) {\n\t\ts.count ++;\n\t \tif(s.count <= 0) {\n\t\t\tremove a process P from s.queue;\n\t\t\tplace process P on ready list;\n\t\t}\n\t}\n\n```\n\n\n信号量实现互斥\n\n``` bash\n\n\tconst int n;\n\tsemaphore s = 1;\n\tvoid P(int i) {\n\t\twhile(true) {\n\t\t\tsemWait(s);\n\t\t\toperate;\n\t\t\tsemSignal(s);\n\t\t}\n\t}\n\n\tvoid main() {\n\t\tparbegin(P(1), P(2), ...,P(n));\n\t}\n\n```\n\n\n总结：\n\n信号量：\n\n\t一个信号量可用于n个进程的同步互斥；且只能由semWait、semSignal操作修改。\n用于互斥时，S初值为1，取值为1~ - (n-1)        （相当于临界区的通行证，实际上也是资源个数）\n       S=1：临界区可用\n       S=0：已有一进程进入临界区\n       S<0：临界区已被占用，|S|个进程正等待进入\n用于同步时，S初值>=0\n       S>=0:表示可用资源个数\n       S<0: 表示该资源的等待队列长度\n\nsemWait、semSignal操作：\n\t   semWait(S)：请求分配一个资源。\n\t\tsemSignal(S)：释放一个资源。\n\t\tsemWait、semSignal操作必须成对出现。\n \t\t用于互斥时，位于同一进程内；\n \t\t用于同步时，交错出现于两个合作进程内。\n\t\t多个semWait操作的次序不能颠倒，否则可能导致死锁。 \n\t\t多个semSignal操作的次序可任意。\n\n二、生产者/消费者问题\n\n问题描述：\n\t有一个或多个生产者生产某种类型的数据，并放置在缓冲区中；\n\t有一个消费者从缓冲区中取数据，每次取一项；\n\t系统保证避免对缓冲区的重复操作，即任何时候只有一个主体（生产者或消费者）可以访问缓冲区。\n\t缓存已满时，生产者不能继续添加数据；\n\t缓存已空时，消费者不能继续移走数据。\n\nproducer:\t\n\n``` bash\n\t\n\twhile(true) {\n\t\t/* produce item v */\n\t\twhile((in + 1) % n == out) //等待缓存有空位\n\t\t\t/* doing nothing */\n\t\tb[in] = v;\n\t\tin = (in + 1) % n;\n\t}\t\n\t\n```\nconsumer:\n\t\n``` bash\n\n\twhile(true) {\n\t\twhile(in == out) //此时缓存为空，等待生产者生产放入缓存后才可消费\n\t\t\t/* doing nothing */\n\t\tw = b[out];\n\t\tout = (out + 1) % n;\n\t\t/* consume item w */\n\t}\n\n```\n\n有限缓冲区：\n\n![process_concurrent_finite_buffer](/image/process_concurrent_finite_buffer.png)\n\n\n使用信号量解决有限缓冲区生产者消费者问题:\n\nn 表示已生产产品的数量\ns 用来控制互斥\ne 表示空闲空间数目\n\n``` bash\n\n\tsemaphore n = 0, s = 1, e = buf - size;\n\n\tvoid producer() {\n\t\twhile(true) {\n\t\t\tproduce();\n\t\t\tsemWait(e);\n\t\t\tsemWait(s);\n\t\t\tappend();\n\t\t\tsemSignal(s);\n\t\t\tsemSignal(e);\n\t\t}\n\t}\n\n\tvoid consumer() {\n\t\twhile(true) {\n\t\t\tsemWait(n);\n\t\t\tsemWait(s);\n\t\t\ttake();\n\t\t\tsemSignal(s);\n\t\t\tsemSignal(e);\n\t\t\tconsume();\n\t\t}\n\t}\n\n\n```\n\n例题\n1) 桌子上有一个盘子，可以存放一个水果。父亲总是放苹果到盘子中，而母亲总是放香蕉到盘子中；儿子专等吃盘中的香蕉，而女儿专等吃盘中的苹果。\n\n分析：\n\t生产者－消费者问题的一种变形，生产者、消费者以及放入缓冲区的产品都有两类（苹果和香蕉），但每类消费者只消费其中固定的一种产品（儿子消费香蕉，女儿消费苹果）。\n\n数据结构： semaphore dish, apple, banana;\n\tdish: 表示盘子是否为空,用于控制互斥\n\tapple：表示盘子中是否有苹果，初始值为0\n\tbanana:表示盘子中是否有香蕉，初始值为0\n\n``` bash\n\t\nprocess father() {\n\tsemWait(dish);\n\tput the apple in the dish;\n\tsemSignal(apple);\n}\n\nprocess mother() {\n\tsemWait(dish);\n\tput the banana in the dish;\n\tsemSignal(banana);\n}\n\nprocess son() {\n\tsemWait(banana);\n\tget the banana from the dish;\n\tsemSignal(dish);\n}\n\nprocess daughter() {\n\tsemWait(apple);\n\tget the apple from the dish;\n\tsemSignal(dish);\n}\n\n```\n\n2) 在一个盒子里，混装了数量相等的黑白围棋子。现在用自动分拣系统把黑子、白子分开，设分拣系统有两个进程P1和P2，其中P1拣白子，P2拣黑子。规定每个进程每次拣一子，当一个进程在拣时，不允许另一个进程去拣；当一个进程拣了一子时，必须让另一个进程去拣。试用信号量协调两个进程的并发执行。\n\n分析：\n\t实际上就是两个进程的同步问题，也就是拣了一个白棋子才能拣一个黑棋子，两者成合作关系\n\n数据结构：semaphore s1, s2;\n\ts1 和s2 分别表示可拣白子和黑子，不失一般性，若令先拣白子。初值， s1=1； s2=0；\n\t\n\n ``` bash\n\nprocess p1() {\n\twhile(true){\n\t\tsemWait(s1);\n\t\tPick a white chessman;\n\t\tsemSignal(s2);\n\t}\n}\n\nprocess p2() {\n\twhile(true){\n\t\tsemWait(s2);\n\t\tPick a white chessman;\n\t\tsemSignal(s1);\n\t}\n}\n\n ```\n\n\n3) 假设一个阅览室有100个座位，没有座位时读者在阅览室外等待；每个读者进入阅览室时都必须在阅览室门口的一个登记本上登记座位号和姓名，然后阅览，离开阅览室时要去掉登记项。每次只允许一个人登记或去掉登记。用信号量操作描述读者的行为。\n\n分析：\n\t实际上是一个非常简单的同步-互斥问题，登记时需要保证互斥，室内人数在100之内时，无需等待，大于100人是，开始需要等待室内有人出来后方可有人入室\n\n数据结构：\n\tstrcut {\n\t\tchar name[10];\n\t\tint number;\n\t} a[100]; //表示进入阅览室的小朋友\n\tsemaphore mutex, seatcount;\n\t\tmutex: 用来控制互斥，初始值为1\n\t\tseatcount： 对空座位进行计数，初始值为100；\n\t\n\t初始化入室人员信息\n\tfor(int i = 0; i < 100; i++){\n\t\ta[i].number = i;\n\t\ta[i].name = null;\n\t}\n\n\n ``` bash\n\t\nprocess readeri(char readername[]) {\n\tsemWait(seatcount);  \t//等待空余作为，若人数未满100，则直接进入，到达100，则等待\n\tsemWait(mutex);\t\t \t//控制互斥\n\n\t/* 进入是登记 */\n\tfor(int i = 0; i < 100; i++)\n\t\tif(a[i].name == null){\t//找到名字为空的座位\n\t\t\ta[i].name = readername;\n\t\t\tbreak;\n\t\t}\n\treader get the seat nember i;\n\tsemSiganl(mutex);\n\tgo into the reading room and sit down at the seat number i.\n\t\n\t/* 离开时登记 */\n\tsemWait(mutex);\n\ta[i].name = null;  \n\tsemSignal(mutex);\n\tsemSignal(seatcount);\n\tleave reading room;\n}\n\n ```\n\n\t\n\n二、读/写者问题\n\t描述：\n\t有一个由多个进程共享的数据区，一些进程只读取这个数据区中的数据，一些进程只往数据区中写数据。并须满足以下条件：\n\t任意多的读进程可以同时读文件；\n\t一次只有一个写进程可以写文件；\n\t如果一个写进程正在写文件，那么禁止任何读进程读文件。\n\n读者优先\n\n分析：\n\t当一个读进程开始访问数据区时，只要至少有一个读进程正在读，就为读进程保留对这个数据区的控制权，因此，写进程有可能处于饥饿状态。\t\n\t\n数据结构：\n\treadcount: 控制wsem的的设置\n\twsem： 当没有读进程正在读时，第一个试图读的读进程需要在wsem上等待； 当至少有一个读进程在读时，随后的读进程无需等待直接进入。\n\tx: 用于确保readcount被正确更新。\n\t\n\n``` bash\n\t\n\tint readcount;\n\tsemphore x = 1, wsem = 1;\n\tvoid reader() {\n\t\twhile (true) {\n\t \tsemWait(x);\n   \t\treadcount++;\n   \t\tif(readcount==1)\n      \t\tsemWait(wsem);  //如果是第一个读者，则要控制wsem\n   \t\tsemSignal(x);\n   \t\tREADUNIT();   \n\t\tsemWait(x);\n\t\treadcount--;\n\t\tif(readcount==0)\n   \t\tsemSignal(wsem);\n\t\tsemSignal(x);\n\t\t}\n\n\t}\n\n\tvoid writer(){\n\t\t while (true) {\n \t \t\tsemWait(wsem);\n   \t\t\tWRITEUNIT();\n   \t\t\tsemSignal(wsem);\n \t\t}\n\t}\n\n\n```\n\n实例：\n\t独木桥问题：东、西向汽车过独木桥。桥上无车时允许一方汽车过桥，待全部过完后才允许另一方汽车过桥。用信号量操作写出同步算法。(提示：参考读者优先的解法)\n\n数据结构：\n\t\n\n\tmutex1/mutex2: 用于确保count1/count2被准备更新\n\tcount1/count2: 控制wait的设置\n    wait: 当没有车同向的车通过独木桥时，第一辆通过的车需要在wait上等待； 当至少有一辆同向的车通过时，随后同方向的车无需等待直接进入。\n\n``` bash\n\n\t\tsemaphore wait=1, mutex1=1, mutex2=1;\n\t\tint count1=0, count2=0; \n\n\t\tprocess P east(){\n    \tsemWait(mutex1);\n      \tcount1++;\n      \tif(count1==1)   semWait(wait);\n      \tsemSignal(mutex1);\n       \tthrough the singal-log bridge；\n      \tsemWait(mutex1);\n      \tcount1--;\n      \tif(count1==0)   semSignal(wait);\n      \tsemSignal(mutex1);\n   }\n\n\tprocess P west(){\n    \tsemWait(mutex2);\n      \tcount2++;\n      \tif(count2==1)   semWait(wait);\n      \tsemSignal(mutex2);\n        through the singal-log bridge；\n      \tsemWait(mutex2);\n      \tcount2--;\n      \tif(count2==0)   semSignal(wait);\n      \tsemSignal(mutex2);\n   }\n\n```\n\n","source":"_posts/进程并发常见问题基于信号量解决方法总结：生产者消费者问题、读写者问题、银行家算法、哲学家进餐.md","raw":"---\ntitle: 进程并发常见问题基于信号量解决方法总结：生产者/消费者问题、读/写者问题、银行家算法、哲学家进餐\ndate: 2018-04-16 19:07:43\ncategories: \"计算机基础\"\ntags:\n\t- OS\n\t- 计算机基础\n---\n\n一、信号量\n\n信号量是一个与队列有关的整型变量。\n可以初始化成非负数；\nsemWait操作使信号量减1。若值为负数，则执行semWait的进程阻塞，否则继续执行；\nsemSignal操作使信号量加1。若值小于或等于0，则被semWait操作阻塞的进程被解除阻塞。\n信号量原语semWait和semSignal的定义：\n\n\n``` bash\n\t\n\tstrcut semaphore{\n\t\tint count;\n\t\taueueType queue;\n\t};\n\t\n\tvoid semWait(semaphore s) {\n\t\ts.count--;\n\t\tif(s.count < 0) {\n \t\t\tplace this process in s.queue;\n\t\t\tblock this process;\n\t\t}\n\t}\n\n\tvoid semSignal(semaphore s) {\n\t\ts.count ++;\n\t \tif(s.count <= 0) {\n\t\t\tremove a process P from s.queue;\n\t\t\tplace process P on ready list;\n\t\t}\n\t}\n\n```\n\n\n信号量实现互斥\n\n``` bash\n\n\tconst int n;\n\tsemaphore s = 1;\n\tvoid P(int i) {\n\t\twhile(true) {\n\t\t\tsemWait(s);\n\t\t\toperate;\n\t\t\tsemSignal(s);\n\t\t}\n\t}\n\n\tvoid main() {\n\t\tparbegin(P(1), P(2), ...,P(n));\n\t}\n\n```\n\n\n总结：\n\n信号量：\n\n\t一个信号量可用于n个进程的同步互斥；且只能由semWait、semSignal操作修改。\n用于互斥时，S初值为1，取值为1~ - (n-1)        （相当于临界区的通行证，实际上也是资源个数）\n       S=1：临界区可用\n       S=0：已有一进程进入临界区\n       S<0：临界区已被占用，|S|个进程正等待进入\n用于同步时，S初值>=0\n       S>=0:表示可用资源个数\n       S<0: 表示该资源的等待队列长度\n\nsemWait、semSignal操作：\n\t   semWait(S)：请求分配一个资源。\n\t\tsemSignal(S)：释放一个资源。\n\t\tsemWait、semSignal操作必须成对出现。\n \t\t用于互斥时，位于同一进程内；\n \t\t用于同步时，交错出现于两个合作进程内。\n\t\t多个semWait操作的次序不能颠倒，否则可能导致死锁。 \n\t\t多个semSignal操作的次序可任意。\n\n二、生产者/消费者问题\n\n问题描述：\n\t有一个或多个生产者生产某种类型的数据，并放置在缓冲区中；\n\t有一个消费者从缓冲区中取数据，每次取一项；\n\t系统保证避免对缓冲区的重复操作，即任何时候只有一个主体（生产者或消费者）可以访问缓冲区。\n\t缓存已满时，生产者不能继续添加数据；\n\t缓存已空时，消费者不能继续移走数据。\n\nproducer:\t\n\n``` bash\n\t\n\twhile(true) {\n\t\t/* produce item v */\n\t\twhile((in + 1) % n == out) //等待缓存有空位\n\t\t\t/* doing nothing */\n\t\tb[in] = v;\n\t\tin = (in + 1) % n;\n\t}\t\n\t\n```\nconsumer:\n\t\n``` bash\n\n\twhile(true) {\n\t\twhile(in == out) //此时缓存为空，等待生产者生产放入缓存后才可消费\n\t\t\t/* doing nothing */\n\t\tw = b[out];\n\t\tout = (out + 1) % n;\n\t\t/* consume item w */\n\t}\n\n```\n\n有限缓冲区：\n\n![process_concurrent_finite_buffer](/image/process_concurrent_finite_buffer.png)\n\n\n使用信号量解决有限缓冲区生产者消费者问题:\n\nn 表示已生产产品的数量\ns 用来控制互斥\ne 表示空闲空间数目\n\n``` bash\n\n\tsemaphore n = 0, s = 1, e = buf - size;\n\n\tvoid producer() {\n\t\twhile(true) {\n\t\t\tproduce();\n\t\t\tsemWait(e);\n\t\t\tsemWait(s);\n\t\t\tappend();\n\t\t\tsemSignal(s);\n\t\t\tsemSignal(e);\n\t\t}\n\t}\n\n\tvoid consumer() {\n\t\twhile(true) {\n\t\t\tsemWait(n);\n\t\t\tsemWait(s);\n\t\t\ttake();\n\t\t\tsemSignal(s);\n\t\t\tsemSignal(e);\n\t\t\tconsume();\n\t\t}\n\t}\n\n\n```\n\n例题\n1) 桌子上有一个盘子，可以存放一个水果。父亲总是放苹果到盘子中，而母亲总是放香蕉到盘子中；儿子专等吃盘中的香蕉，而女儿专等吃盘中的苹果。\n\n分析：\n\t生产者－消费者问题的一种变形，生产者、消费者以及放入缓冲区的产品都有两类（苹果和香蕉），但每类消费者只消费其中固定的一种产品（儿子消费香蕉，女儿消费苹果）。\n\n数据结构： semaphore dish, apple, banana;\n\tdish: 表示盘子是否为空,用于控制互斥\n\tapple：表示盘子中是否有苹果，初始值为0\n\tbanana:表示盘子中是否有香蕉，初始值为0\n\n``` bash\n\t\nprocess father() {\n\tsemWait(dish);\n\tput the apple in the dish;\n\tsemSignal(apple);\n}\n\nprocess mother() {\n\tsemWait(dish);\n\tput the banana in the dish;\n\tsemSignal(banana);\n}\n\nprocess son() {\n\tsemWait(banana);\n\tget the banana from the dish;\n\tsemSignal(dish);\n}\n\nprocess daughter() {\n\tsemWait(apple);\n\tget the apple from the dish;\n\tsemSignal(dish);\n}\n\n```\n\n2) 在一个盒子里，混装了数量相等的黑白围棋子。现在用自动分拣系统把黑子、白子分开，设分拣系统有两个进程P1和P2，其中P1拣白子，P2拣黑子。规定每个进程每次拣一子，当一个进程在拣时，不允许另一个进程去拣；当一个进程拣了一子时，必须让另一个进程去拣。试用信号量协调两个进程的并发执行。\n\n分析：\n\t实际上就是两个进程的同步问题，也就是拣了一个白棋子才能拣一个黑棋子，两者成合作关系\n\n数据结构：semaphore s1, s2;\n\ts1 和s2 分别表示可拣白子和黑子，不失一般性，若令先拣白子。初值， s1=1； s2=0；\n\t\n\n ``` bash\n\nprocess p1() {\n\twhile(true){\n\t\tsemWait(s1);\n\t\tPick a white chessman;\n\t\tsemSignal(s2);\n\t}\n}\n\nprocess p2() {\n\twhile(true){\n\t\tsemWait(s2);\n\t\tPick a white chessman;\n\t\tsemSignal(s1);\n\t}\n}\n\n ```\n\n\n3) 假设一个阅览室有100个座位，没有座位时读者在阅览室外等待；每个读者进入阅览室时都必须在阅览室门口的一个登记本上登记座位号和姓名，然后阅览，离开阅览室时要去掉登记项。每次只允许一个人登记或去掉登记。用信号量操作描述读者的行为。\n\n分析：\n\t实际上是一个非常简单的同步-互斥问题，登记时需要保证互斥，室内人数在100之内时，无需等待，大于100人是，开始需要等待室内有人出来后方可有人入室\n\n数据结构：\n\tstrcut {\n\t\tchar name[10];\n\t\tint number;\n\t} a[100]; //表示进入阅览室的小朋友\n\tsemaphore mutex, seatcount;\n\t\tmutex: 用来控制互斥，初始值为1\n\t\tseatcount： 对空座位进行计数，初始值为100；\n\t\n\t初始化入室人员信息\n\tfor(int i = 0; i < 100; i++){\n\t\ta[i].number = i;\n\t\ta[i].name = null;\n\t}\n\n\n ``` bash\n\t\nprocess readeri(char readername[]) {\n\tsemWait(seatcount);  \t//等待空余作为，若人数未满100，则直接进入，到达100，则等待\n\tsemWait(mutex);\t\t \t//控制互斥\n\n\t/* 进入是登记 */\n\tfor(int i = 0; i < 100; i++)\n\t\tif(a[i].name == null){\t//找到名字为空的座位\n\t\t\ta[i].name = readername;\n\t\t\tbreak;\n\t\t}\n\treader get the seat nember i;\n\tsemSiganl(mutex);\n\tgo into the reading room and sit down at the seat number i.\n\t\n\t/* 离开时登记 */\n\tsemWait(mutex);\n\ta[i].name = null;  \n\tsemSignal(mutex);\n\tsemSignal(seatcount);\n\tleave reading room;\n}\n\n ```\n\n\t\n\n二、读/写者问题\n\t描述：\n\t有一个由多个进程共享的数据区，一些进程只读取这个数据区中的数据，一些进程只往数据区中写数据。并须满足以下条件：\n\t任意多的读进程可以同时读文件；\n\t一次只有一个写进程可以写文件；\n\t如果一个写进程正在写文件，那么禁止任何读进程读文件。\n\n读者优先\n\n分析：\n\t当一个读进程开始访问数据区时，只要至少有一个读进程正在读，就为读进程保留对这个数据区的控制权，因此，写进程有可能处于饥饿状态。\t\n\t\n数据结构：\n\treadcount: 控制wsem的的设置\n\twsem： 当没有读进程正在读时，第一个试图读的读进程需要在wsem上等待； 当至少有一个读进程在读时，随后的读进程无需等待直接进入。\n\tx: 用于确保readcount被正确更新。\n\t\n\n``` bash\n\t\n\tint readcount;\n\tsemphore x = 1, wsem = 1;\n\tvoid reader() {\n\t\twhile (true) {\n\t \tsemWait(x);\n   \t\treadcount++;\n   \t\tif(readcount==1)\n      \t\tsemWait(wsem);  //如果是第一个读者，则要控制wsem\n   \t\tsemSignal(x);\n   \t\tREADUNIT();   \n\t\tsemWait(x);\n\t\treadcount--;\n\t\tif(readcount==0)\n   \t\tsemSignal(wsem);\n\t\tsemSignal(x);\n\t\t}\n\n\t}\n\n\tvoid writer(){\n\t\t while (true) {\n \t \t\tsemWait(wsem);\n   \t\t\tWRITEUNIT();\n   \t\t\tsemSignal(wsem);\n \t\t}\n\t}\n\n\n```\n\n实例：\n\t独木桥问题：东、西向汽车过独木桥。桥上无车时允许一方汽车过桥，待全部过完后才允许另一方汽车过桥。用信号量操作写出同步算法。(提示：参考读者优先的解法)\n\n数据结构：\n\t\n\n\tmutex1/mutex2: 用于确保count1/count2被准备更新\n\tcount1/count2: 控制wait的设置\n    wait: 当没有车同向的车通过独木桥时，第一辆通过的车需要在wait上等待； 当至少有一辆同向的车通过时，随后同方向的车无需等待直接进入。\n\n``` bash\n\n\t\tsemaphore wait=1, mutex1=1, mutex2=1;\n\t\tint count1=0, count2=0; \n\n\t\tprocess P east(){\n    \tsemWait(mutex1);\n      \tcount1++;\n      \tif(count1==1)   semWait(wait);\n      \tsemSignal(mutex1);\n       \tthrough the singal-log bridge；\n      \tsemWait(mutex1);\n      \tcount1--;\n      \tif(count1==0)   semSignal(wait);\n      \tsemSignal(mutex1);\n   }\n\n\tprocess P west(){\n    \tsemWait(mutex2);\n      \tcount2++;\n      \tif(count2==1)   semWait(wait);\n      \tsemSignal(mutex2);\n        through the singal-log bridge；\n      \tsemWait(mutex2);\n      \tcount2--;\n      \tif(count2==0)   semSignal(wait);\n      \tsemSignal(mutex2);\n   }\n\n```\n\n","slug":"进程并发常见问题基于信号量解决方法总结：生产者消费者问题、读写者问题、银行家算法、哲学家进餐","published":1,"updated":"2018-07-23T10:30:32.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjy5e8oz001o8lyje1l0082y","content":"<p>一、信号量</p>\n<p>信号量是一个与队列有关的整型变量。<br>可以初始化成非负数；<br>semWait操作使信号量减1。若值为负数，则执行semWait的进程阻塞，否则继续执行；<br>semSignal操作使信号量加1。若值小于或等于0，则被semWait操作阻塞的进程被解除阻塞。<br>信号量原语semWait和semSignal的定义：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">strcut semaphore&#123;</span><br><span class=\"line\">\tint count;</span><br><span class=\"line\">\taueueType queue;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void semWait(semaphore s) &#123;</span><br><span class=\"line\">\ts.count--;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.count &lt; 0) &#123;</span><br><span class=\"line\">\t\t\tplace this process <span class=\"keyword\">in</span> s.queue;</span><br><span class=\"line\">\t\tblock this process;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void semSignal(semaphore s) &#123;</span><br><span class=\"line\">\ts.count ++;</span><br><span class=\"line\"> \t<span class=\"keyword\">if</span>(s.count &lt;= 0) &#123;</span><br><span class=\"line\">\t\tremove a process P from s.queue;</span><br><span class=\"line\">\t\tplace process P on ready list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>信号量实现互斥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const int n;</span><br><span class=\"line\">semaphore s = 1;</span><br><span class=\"line\">void P(int i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tsemWait(s);</span><br><span class=\"line\">\t\toperate;</span><br><span class=\"line\">\t\tsemSignal(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">\tparbegin(P(1), P(2), ...,P(n));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>信号量：</p>\n<pre><code>一个信号量可用于n个进程的同步互斥；且只能由semWait、semSignal操作修改。\n</code></pre><p>用于互斥时，S初值为1，取值为1~ - (n-1)        （相当于临界区的通行证，实际上也是资源个数）<br>       S=1：临界区可用<br>       S=0：已有一进程进入临界区<br>       S<0：临界区已被占用，|s|个进程正等待进入 用于同步时，s初值=\"\">=0<br>       S&gt;=0:表示可用资源个数<br>       S&lt;0: 表示该资源的等待队列长度</0：临界区已被占用，|s|个进程正等待进入></p>\n<p>semWait、semSignal操作：<br>       semWait(S)：请求分配一个资源。<br>        semSignal(S)：释放一个资源。<br>        semWait、semSignal操作必须成对出现。<br>         用于互斥时，位于同一进程内；<br>         用于同步时，交错出现于两个合作进程内。<br>        多个semWait操作的次序不能颠倒，否则可能导致死锁。<br>        多个semSignal操作的次序可任意。</p>\n<p>二、生产者/消费者问题</p>\n<p>问题描述：<br>    有一个或多个生产者生产某种类型的数据，并放置在缓冲区中；<br>    有一个消费者从缓冲区中取数据，每次取一项；<br>    系统保证避免对缓冲区的重复操作，即任何时候只有一个主体（生产者或消费者）可以访问缓冲区。<br>    缓存已满时，生产者不能继续添加数据；<br>    缓存已空时，消费者不能继续移走数据。</p>\n<p>producer:    </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t/* produce item v */</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((<span class=\"keyword\">in</span> + 1) % n == out) //等待缓存有空位</span><br><span class=\"line\">\t\t/* doing nothing */</span><br><span class=\"line\">\tb[<span class=\"keyword\">in</span>] = v;</span><br><span class=\"line\">\t<span class=\"keyword\">in</span> = (<span class=\"keyword\">in</span> + 1) % n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>consumer:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"keyword\">in</span> == out) //此时缓存为空，等待生产者生产放入缓存后才可消费</span><br><span class=\"line\">\t\t/* doing nothing */</span><br><span class=\"line\">\tw = b[out];</span><br><span class=\"line\">\tout = (out + 1) % n;</span><br><span class=\"line\">\t/* consume item w */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有限缓冲区：</p>\n<p><img src=\"/image/process_concurrent_finite_buffer.png\" alt=\"process_concurrent_finite_buffer\"></p>\n<p>使用信号量解决有限缓冲区生产者消费者问题:</p>\n<p>n 表示已生产产品的数量<br>s 用来控制互斥<br>e 表示空闲空间数目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">semaphore n = 0, s = 1, e = buf - size;</span><br><span class=\"line\"></span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">producer</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tproduce();</span><br><span class=\"line\">\t\tsemWait(e);</span><br><span class=\"line\">\t\tsemWait(s);</span><br><span class=\"line\">\t\tappend();</span><br><span class=\"line\">\t\tsemSignal(s);</span><br><span class=\"line\">\t\tsemSignal(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">consumer</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tsemWait(n);</span><br><span class=\"line\">\t\tsemWait(s);</span><br><span class=\"line\">\t\ttake();</span><br><span class=\"line\">\t\tsemSignal(s);</span><br><span class=\"line\">\t\tsemSignal(e);</span><br><span class=\"line\">\t\tconsume();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例题<br>1) 桌子上有一个盘子，可以存放一个水果。父亲总是放苹果到盘子中，而母亲总是放香蕉到盘子中；儿子专等吃盘中的香蕉，而女儿专等吃盘中的苹果。</p>\n<p>分析：<br>    生产者－消费者问题的一种变形，生产者、消费者以及放入缓冲区的产品都有两类（苹果和香蕉），但每类消费者只消费其中固定的一种产品（儿子消费香蕉，女儿消费苹果）。</p>\n<p>数据结构： semaphore dish, apple, banana;<br>    dish: 表示盘子是否为空,用于控制互斥<br>    apple：表示盘子中是否有苹果，初始值为0<br>    banana:表示盘子中是否有香蕉，初始值为0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">father</span></span>() &#123;</span><br><span class=\"line\">\tsemWait(dish);</span><br><span class=\"line\">\tput the apple <span class=\"keyword\">in</span> the dish;</span><br><span class=\"line\">\tsemSignal(apple);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">mother</span></span>() &#123;</span><br><span class=\"line\">\tsemWait(dish);</span><br><span class=\"line\">\tput the banana <span class=\"keyword\">in</span> the dish;</span><br><span class=\"line\">\tsemSignal(banana);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">son</span></span>() &#123;</span><br><span class=\"line\">\tsemWait(banana);</span><br><span class=\"line\">\tget the banana from the dish;</span><br><span class=\"line\">\tsemSignal(dish);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">daughter</span></span>() &#123;</span><br><span class=\"line\">\tsemWait(apple);</span><br><span class=\"line\">\tget the apple from the dish;</span><br><span class=\"line\">\tsemSignal(dish);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2) 在一个盒子里，混装了数量相等的黑白围棋子。现在用自动分拣系统把黑子、白子分开，设分拣系统有两个进程P1和P2，其中P1拣白子，P2拣黑子。规定每个进程每次拣一子，当一个进程在拣时，不允许另一个进程去拣；当一个进程拣了一子时，必须让另一个进程去拣。试用信号量协调两个进程的并发执行。</p>\n<p>分析：<br>    实际上就是两个进程的同步问题，也就是拣了一个白棋子才能拣一个黑棋子，两者成合作关系</p>\n<p>数据结构：semaphore s1, s2;<br>    s1 和s2 分别表示可拣白子和黑子，不失一般性，若令先拣白子。初值， s1=1； s2=0；</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">p1</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t\tsemWait(s1);</span><br><span class=\"line\">\t\tPick a white chessman;</span><br><span class=\"line\">\t\tsemSignal(s2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">p2</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t\tsemWait(s2);</span><br><span class=\"line\">\t\tPick a white chessman;</span><br><span class=\"line\">\t\tsemSignal(s1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3) 假设一个阅览室有100个座位，没有座位时读者在阅览室外等待；每个读者进入阅览室时都必须在阅览室门口的一个登记本上登记座位号和姓名，然后阅览，离开阅览室时要去掉登记项。每次只允许一个人登记或去掉登记。用信号量操作描述读者的行为。</p>\n<p>分析：<br>    实际上是一个非常简单的同步-互斥问题，登记时需要保证互斥，室内人数在100之内时，无需等待，大于100人是，开始需要等待室内有人出来后方可有人入室</p>\n<p>数据结构：<br>    strcut {<br>        char name[10];<br>        int number;<br>    } a[100]; //表示进入阅览室的小朋友<br>    semaphore mutex, seatcount;<br>        mutex: 用来控制互斥，初始值为1<br>        seatcount： 对空座位进行计数，初始值为100；</p>\n<pre><code>初始化入室人员信息\nfor(int i = 0; i &lt; 100; i++){\n    a[i].number = i;\n    a[i].name = null;\n}\n</code></pre> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">process readeri(char readername[]) &#123;</span><br><span class=\"line\">\tsemWait(seatcount);  \t//等待空余作为，若人数未满100，则直接进入，到达100，则等待</span><br><span class=\"line\">\tsemWait(mutex);\t\t \t//控制互斥</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 进入是登记 */</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(int i = 0; i &lt; 100; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i].name == null)&#123;\t//找到名字为空的座位</span><br><span class=\"line\">\t\t\ta[i].name = readername;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\treader get the seat nember i;</span><br><span class=\"line\">\tsemSiganl(mutex);</span><br><span class=\"line\">\tgo into the reading room and sit down at the seat number i.</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/* 离开时登记 */</span><br><span class=\"line\">\tsemWait(mutex);</span><br><span class=\"line\">\ta[i].name = null;  </span><br><span class=\"line\">\tsemSignal(mutex);</span><br><span class=\"line\">\tsemSignal(seatcount);</span><br><span class=\"line\">\tleave reading room;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二、读/写者问题<br>    描述：<br>    有一个由多个进程共享的数据区，一些进程只读取这个数据区中的数据，一些进程只往数据区中写数据。并须满足以下条件：<br>    任意多的读进程可以同时读文件；<br>    一次只有一个写进程可以写文件；<br>    如果一个写进程正在写文件，那么禁止任何读进程读文件。</p>\n<p>读者优先</p>\n<p>分析：<br>    当一个读进程开始访问数据区时，只要至少有一个读进程正在读，就为读进程保留对这个数据区的控制权，因此，写进程有可能处于饥饿状态。    </p>\n<p>数据结构：<br>    readcount: 控制wsem的的设置<br>    wsem： 当没有读进程正在读时，第一个试图读的读进程需要在wsem上等待； 当至少有一个读进程在读时，随后的读进程无需等待直接进入。<br>    x: 用于确保readcount被正确更新。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">int readcount;</span><br><span class=\"line\">semphore x = 1, wsem = 1;</span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">reader</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\"> \tsemWait(x);</span><br><span class=\"line\">  \t\treadcount++;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(readcount==1)</span><br><span class=\"line\">     \t\tsemWait(wsem);  //如果是第一个读者，则要控制wsem</span><br><span class=\"line\">  \t\tsemSignal(x);</span><br><span class=\"line\">  \t\tREADUNIT();   </span><br><span class=\"line\">\tsemWait(x);</span><br><span class=\"line\">\treadcount--;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(readcount==0)</span><br><span class=\"line\">  \t\tsemSignal(wsem);</span><br><span class=\"line\">\tsemSignal(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">writer</span></span>()&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t \t\tsemWait(wsem);</span><br><span class=\"line\">  \t\t\tWRITEUNIT();</span><br><span class=\"line\">  \t\t\tsemSignal(wsem);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例：<br>    独木桥问题：东、西向汽车过独木桥。桥上无车时允许一方汽车过桥，待全部过完后才允许另一方汽车过桥。用信号量操作写出同步算法。(提示：参考读者优先的解法)</p>\n<p>数据结构：</p>\n<pre><code>mutex1/mutex2: 用于确保count1/count2被准备更新\ncount1/count2: 控制wait的设置\nwait: 当没有车同向的车通过独木桥时，第一辆通过的车需要在wait上等待； 当至少有一辆同向的车通过时，随后同方向的车无需等待直接进入。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\tsemaphore <span class=\"built_in\">wait</span>=1, mutex1=1, mutex2=1;</span><br><span class=\"line\">\tint count1=0, count2=0; </span><br><span class=\"line\"></span><br><span class=\"line\">\tprocess P <span class=\"function\"><span class=\"title\">east</span></span>()&#123;</span><br><span class=\"line\">   \tsemWait(mutex1);</span><br><span class=\"line\">     \tcount1++;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(count1==1)   semWait(<span class=\"built_in\">wait</span>);</span><br><span class=\"line\">     \tsemSignal(mutex1);</span><br><span class=\"line\">      \tthrough the singal-log bridge；</span><br><span class=\"line\">     \tsemWait(mutex1);</span><br><span class=\"line\">     \tcount1--;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(count1==0)   semSignal(<span class=\"built_in\">wait</span>);</span><br><span class=\"line\">     \tsemSignal(mutex1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process P <span class=\"function\"><span class=\"title\">west</span></span>()&#123;</span><br><span class=\"line\">   \tsemWait(mutex2);</span><br><span class=\"line\">     \tcount2++;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(count2==1)   semWait(<span class=\"built_in\">wait</span>);</span><br><span class=\"line\">     \tsemSignal(mutex2);</span><br><span class=\"line\">       through the singal-log bridge；</span><br><span class=\"line\">     \tsemWait(mutex2);</span><br><span class=\"line\">     \tcount2--;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(count2==0)   semSignal(<span class=\"built_in\">wait</span>);</span><br><span class=\"line\">     \tsemSignal(mutex2);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一、信号量</p>\n<p>信号量是一个与队列有关的整型变量。<br>可以初始化成非负数；<br>semWait操作使信号量减1。若值为负数，则执行semWait的进程阻塞，否则继续执行；<br>semSignal操作使信号量加1。若值小于或等于0，则被semWait操作阻塞的进程被解除阻塞。<br>信号量原语semWait和semSignal的定义：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">strcut semaphore&#123;</span><br><span class=\"line\">\tint count;</span><br><span class=\"line\">\taueueType queue;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void semWait(semaphore s) &#123;</span><br><span class=\"line\">\ts.count--;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.count &lt; 0) &#123;</span><br><span class=\"line\">\t\t\tplace this process <span class=\"keyword\">in</span> s.queue;</span><br><span class=\"line\">\t\tblock this process;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void semSignal(semaphore s) &#123;</span><br><span class=\"line\">\ts.count ++;</span><br><span class=\"line\"> \t<span class=\"keyword\">if</span>(s.count &lt;= 0) &#123;</span><br><span class=\"line\">\t\tremove a process P from s.queue;</span><br><span class=\"line\">\t\tplace process P on ready list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>信号量实现互斥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const int n;</span><br><span class=\"line\">semaphore s = 1;</span><br><span class=\"line\">void P(int i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tsemWait(s);</span><br><span class=\"line\">\t\toperate;</span><br><span class=\"line\">\t\tsemSignal(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">\tparbegin(P(1), P(2), ...,P(n));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>信号量：</p>\n<pre><code>一个信号量可用于n个进程的同步互斥；且只能由semWait、semSignal操作修改。\n</code></pre><p>用于互斥时，S初值为1，取值为1~ - (n-1)        （相当于临界区的通行证，实际上也是资源个数）<br>       S=1：临界区可用<br>       S=0：已有一进程进入临界区<br>       S<0：临界区已被占用，|s|个进程正等待进入 用于同步时，s初值=\"\">=0<br>       S&gt;=0:表示可用资源个数<br>       S&lt;0: 表示该资源的等待队列长度</0：临界区已被占用，|s|个进程正等待进入></p>\n<p>semWait、semSignal操作：<br>       semWait(S)：请求分配一个资源。<br>        semSignal(S)：释放一个资源。<br>        semWait、semSignal操作必须成对出现。<br>         用于互斥时，位于同一进程内；<br>         用于同步时，交错出现于两个合作进程内。<br>        多个semWait操作的次序不能颠倒，否则可能导致死锁。<br>        多个semSignal操作的次序可任意。</p>\n<p>二、生产者/消费者问题</p>\n<p>问题描述：<br>    有一个或多个生产者生产某种类型的数据，并放置在缓冲区中；<br>    有一个消费者从缓冲区中取数据，每次取一项；<br>    系统保证避免对缓冲区的重复操作，即任何时候只有一个主体（生产者或消费者）可以访问缓冲区。<br>    缓存已满时，生产者不能继续添加数据；<br>    缓存已空时，消费者不能继续移走数据。</p>\n<p>producer:    </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t/* produce item v */</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((<span class=\"keyword\">in</span> + 1) % n == out) //等待缓存有空位</span><br><span class=\"line\">\t\t/* doing nothing */</span><br><span class=\"line\">\tb[<span class=\"keyword\">in</span>] = v;</span><br><span class=\"line\">\t<span class=\"keyword\">in</span> = (<span class=\"keyword\">in</span> + 1) % n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>consumer:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"keyword\">in</span> == out) //此时缓存为空，等待生产者生产放入缓存后才可消费</span><br><span class=\"line\">\t\t/* doing nothing */</span><br><span class=\"line\">\tw = b[out];</span><br><span class=\"line\">\tout = (out + 1) % n;</span><br><span class=\"line\">\t/* consume item w */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有限缓冲区：</p>\n<p><img src=\"/image/process_concurrent_finite_buffer.png\" alt=\"process_concurrent_finite_buffer\"></p>\n<p>使用信号量解决有限缓冲区生产者消费者问题:</p>\n<p>n 表示已生产产品的数量<br>s 用来控制互斥<br>e 表示空闲空间数目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">semaphore n = 0, s = 1, e = buf - size;</span><br><span class=\"line\"></span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">producer</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tproduce();</span><br><span class=\"line\">\t\tsemWait(e);</span><br><span class=\"line\">\t\tsemWait(s);</span><br><span class=\"line\">\t\tappend();</span><br><span class=\"line\">\t\tsemSignal(s);</span><br><span class=\"line\">\t\tsemSignal(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">consumer</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tsemWait(n);</span><br><span class=\"line\">\t\tsemWait(s);</span><br><span class=\"line\">\t\ttake();</span><br><span class=\"line\">\t\tsemSignal(s);</span><br><span class=\"line\">\t\tsemSignal(e);</span><br><span class=\"line\">\t\tconsume();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例题<br>1) 桌子上有一个盘子，可以存放一个水果。父亲总是放苹果到盘子中，而母亲总是放香蕉到盘子中；儿子专等吃盘中的香蕉，而女儿专等吃盘中的苹果。</p>\n<p>分析：<br>    生产者－消费者问题的一种变形，生产者、消费者以及放入缓冲区的产品都有两类（苹果和香蕉），但每类消费者只消费其中固定的一种产品（儿子消费香蕉，女儿消费苹果）。</p>\n<p>数据结构： semaphore dish, apple, banana;<br>    dish: 表示盘子是否为空,用于控制互斥<br>    apple：表示盘子中是否有苹果，初始值为0<br>    banana:表示盘子中是否有香蕉，初始值为0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">father</span></span>() &#123;</span><br><span class=\"line\">\tsemWait(dish);</span><br><span class=\"line\">\tput the apple <span class=\"keyword\">in</span> the dish;</span><br><span class=\"line\">\tsemSignal(apple);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">mother</span></span>() &#123;</span><br><span class=\"line\">\tsemWait(dish);</span><br><span class=\"line\">\tput the banana <span class=\"keyword\">in</span> the dish;</span><br><span class=\"line\">\tsemSignal(banana);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">son</span></span>() &#123;</span><br><span class=\"line\">\tsemWait(banana);</span><br><span class=\"line\">\tget the banana from the dish;</span><br><span class=\"line\">\tsemSignal(dish);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">daughter</span></span>() &#123;</span><br><span class=\"line\">\tsemWait(apple);</span><br><span class=\"line\">\tget the apple from the dish;</span><br><span class=\"line\">\tsemSignal(dish);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2) 在一个盒子里，混装了数量相等的黑白围棋子。现在用自动分拣系统把黑子、白子分开，设分拣系统有两个进程P1和P2，其中P1拣白子，P2拣黑子。规定每个进程每次拣一子，当一个进程在拣时，不允许另一个进程去拣；当一个进程拣了一子时，必须让另一个进程去拣。试用信号量协调两个进程的并发执行。</p>\n<p>分析：<br>    实际上就是两个进程的同步问题，也就是拣了一个白棋子才能拣一个黑棋子，两者成合作关系</p>\n<p>数据结构：semaphore s1, s2;<br>    s1 和s2 分别表示可拣白子和黑子，不失一般性，若令先拣白子。初值， s1=1； s2=0；</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">p1</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t\tsemWait(s1);</span><br><span class=\"line\">\t\tPick a white chessman;</span><br><span class=\"line\">\t\tsemSignal(s2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process <span class=\"function\"><span class=\"title\">p2</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t\tsemWait(s2);</span><br><span class=\"line\">\t\tPick a white chessman;</span><br><span class=\"line\">\t\tsemSignal(s1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3) 假设一个阅览室有100个座位，没有座位时读者在阅览室外等待；每个读者进入阅览室时都必须在阅览室门口的一个登记本上登记座位号和姓名，然后阅览，离开阅览室时要去掉登记项。每次只允许一个人登记或去掉登记。用信号量操作描述读者的行为。</p>\n<p>分析：<br>    实际上是一个非常简单的同步-互斥问题，登记时需要保证互斥，室内人数在100之内时，无需等待，大于100人是，开始需要等待室内有人出来后方可有人入室</p>\n<p>数据结构：<br>    strcut {<br>        char name[10];<br>        int number;<br>    } a[100]; //表示进入阅览室的小朋友<br>    semaphore mutex, seatcount;<br>        mutex: 用来控制互斥，初始值为1<br>        seatcount： 对空座位进行计数，初始值为100；</p>\n<pre><code>初始化入室人员信息\nfor(int i = 0; i &lt; 100; i++){\n    a[i].number = i;\n    a[i].name = null;\n}\n</code></pre> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">process readeri(char readername[]) &#123;</span><br><span class=\"line\">\tsemWait(seatcount);  \t//等待空余作为，若人数未满100，则直接进入，到达100，则等待</span><br><span class=\"line\">\tsemWait(mutex);\t\t \t//控制互斥</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 进入是登记 */</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(int i = 0; i &lt; 100; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i].name == null)&#123;\t//找到名字为空的座位</span><br><span class=\"line\">\t\t\ta[i].name = readername;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\treader get the seat nember i;</span><br><span class=\"line\">\tsemSiganl(mutex);</span><br><span class=\"line\">\tgo into the reading room and sit down at the seat number i.</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/* 离开时登记 */</span><br><span class=\"line\">\tsemWait(mutex);</span><br><span class=\"line\">\ta[i].name = null;  </span><br><span class=\"line\">\tsemSignal(mutex);</span><br><span class=\"line\">\tsemSignal(seatcount);</span><br><span class=\"line\">\tleave reading room;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二、读/写者问题<br>    描述：<br>    有一个由多个进程共享的数据区，一些进程只读取这个数据区中的数据，一些进程只往数据区中写数据。并须满足以下条件：<br>    任意多的读进程可以同时读文件；<br>    一次只有一个写进程可以写文件；<br>    如果一个写进程正在写文件，那么禁止任何读进程读文件。</p>\n<p>读者优先</p>\n<p>分析：<br>    当一个读进程开始访问数据区时，只要至少有一个读进程正在读，就为读进程保留对这个数据区的控制权，因此，写进程有可能处于饥饿状态。    </p>\n<p>数据结构：<br>    readcount: 控制wsem的的设置<br>    wsem： 当没有读进程正在读时，第一个试图读的读进程需要在wsem上等待； 当至少有一个读进程在读时，随后的读进程无需等待直接进入。<br>    x: 用于确保readcount被正确更新。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">int readcount;</span><br><span class=\"line\">semphore x = 1, wsem = 1;</span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">reader</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\"> \tsemWait(x);</span><br><span class=\"line\">  \t\treadcount++;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span>(readcount==1)</span><br><span class=\"line\">     \t\tsemWait(wsem);  //如果是第一个读者，则要控制wsem</span><br><span class=\"line\">  \t\tsemSignal(x);</span><br><span class=\"line\">  \t\tREADUNIT();   </span><br><span class=\"line\">\tsemWait(x);</span><br><span class=\"line\">\treadcount--;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(readcount==0)</span><br><span class=\"line\">  \t\tsemSignal(wsem);</span><br><span class=\"line\">\tsemSignal(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">writer</span></span>()&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t \t\tsemWait(wsem);</span><br><span class=\"line\">  \t\t\tWRITEUNIT();</span><br><span class=\"line\">  \t\t\tsemSignal(wsem);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例：<br>    独木桥问题：东、西向汽车过独木桥。桥上无车时允许一方汽车过桥，待全部过完后才允许另一方汽车过桥。用信号量操作写出同步算法。(提示：参考读者优先的解法)</p>\n<p>数据结构：</p>\n<pre><code>mutex1/mutex2: 用于确保count1/count2被准备更新\ncount1/count2: 控制wait的设置\nwait: 当没有车同向的车通过独木桥时，第一辆通过的车需要在wait上等待； 当至少有一辆同向的车通过时，随后同方向的车无需等待直接进入。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\tsemaphore <span class=\"built_in\">wait</span>=1, mutex1=1, mutex2=1;</span><br><span class=\"line\">\tint count1=0, count2=0; </span><br><span class=\"line\"></span><br><span class=\"line\">\tprocess P <span class=\"function\"><span class=\"title\">east</span></span>()&#123;</span><br><span class=\"line\">   \tsemWait(mutex1);</span><br><span class=\"line\">     \tcount1++;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(count1==1)   semWait(<span class=\"built_in\">wait</span>);</span><br><span class=\"line\">     \tsemSignal(mutex1);</span><br><span class=\"line\">      \tthrough the singal-log bridge；</span><br><span class=\"line\">     \tsemWait(mutex1);</span><br><span class=\"line\">     \tcount1--;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(count1==0)   semSignal(<span class=\"built_in\">wait</span>);</span><br><span class=\"line\">     \tsemSignal(mutex1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process P <span class=\"function\"><span class=\"title\">west</span></span>()&#123;</span><br><span class=\"line\">   \tsemWait(mutex2);</span><br><span class=\"line\">     \tcount2++;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(count2==1)   semWait(<span class=\"built_in\">wait</span>);</span><br><span class=\"line\">     \tsemSignal(mutex2);</span><br><span class=\"line\">       through the singal-log bridge；</span><br><span class=\"line\">     \tsemWait(mutex2);</span><br><span class=\"line\">     \tcount2--;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(count2==0)   semSignal(<span class=\"built_in\">wait</span>);</span><br><span class=\"line\">     \tsemSignal(mutex2);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjy5e8o100008lyjll9dbc12","category_id":"cjjy5e8o800048lyjljuvtwf4","_id":"cjjy5e8oh000f8lyja1wtvkvn"},{"post_id":"cjjy5e8o500028lyjozu8xfwb","category_id":"cjjy5e8od000a8lyjlba2ye2q","_id":"cjjy5e8ok000k8lyj10v7cq4s"},{"post_id":"cjjy5e8oi000i8lyjnokto1u4","category_id":"cjjy5e8oh000g8lyjulcr5f5x","_id":"cjjy5e8oo000q8lyjuusyv67o"},{"post_id":"cjjy5e8oa00068lyjiapge1ep","category_id":"cjjy5e8oh000g8lyjulcr5f5x","_id":"cjjy5e8oq000v8lyj1f62ax72"},{"post_id":"cjjy5e8oj000j8lyjk9wrqsa6","category_id":"cjjy5e8oh000g8lyjulcr5f5x","_id":"cjjy5e8os000y8lyjk4tqb6ob"},{"post_id":"cjjy5e8om000n8lyj5aqkoo85","category_id":"cjjy5e8oh000g8lyjulcr5f5x","_id":"cjjy5e8ot00138lyjjrv8uya6"},{"post_id":"cjjy5e8ob00088lyjrz24e0si","category_id":"cjjy5e8oh000g8lyjulcr5f5x","_id":"cjjy5e8ou00168lyjd4go4q5k"},{"post_id":"cjjy5e8oo000p8lyj5ddu5ufx","category_id":"cjjy5e8oh000g8lyjulcr5f5x","_id":"cjjy5e8ov00198lyj1k9wooki"},{"post_id":"cjjy5e8oc00098lyjybx0yfq7","category_id":"cjjy5e8op000s8lyjl2ge2hol","_id":"cjjy5e8ox001e8lyjeix0ljhp"},{"post_id":"cjjy5e8or000x8lyj0dag0hh8","category_id":"cjjy5e8oh000g8lyjulcr5f5x","_id":"cjjy5e8oy001h8lyjcqtejtav"},{"post_id":"cjjy5e8ot00158lyj2wjvxazp","category_id":"cjjy5e8oh000g8lyjulcr5f5x","_id":"cjjy5e8oz001m8lyjv26g4r01"},{"post_id":"cjjy5e8oe000d8lyj9pmqsydg","category_id":"cjjy5e8os00108lyjcnl2b7b9","_id":"cjjy5e8p0001p8lyjhnh7mq8s"},{"post_id":"cjjy5e8ow001d8lyjrj8hxrp7","category_id":"cjjy5e8op000s8lyjl2ge2hol","_id":"cjjy5e8p1001t8lyjmi9gz384"},{"post_id":"cjjy5e8of000e8lyjr3uqkb72","category_id":"cjjy5e8os00108lyjcnl2b7b9","_id":"cjjy5e8p1001v8lyjai77tkcu"},{"post_id":"cjjy5e8oy001l8lyj4pacqqnt","category_id":"cjjy5e8oy001i8lyjzbpjsj66","_id":"cjjy5e8p2001y8lyjvcz5ar1m"},{"post_id":"cjjy5e8op000u8lyjqcaz2jhf","category_id":"cjjy5e8oy001i8lyjzbpjsj66","_id":"cjjy5e8p200208lyjjso42bl6"},{"post_id":"cjjy5e8os00128lyj3f153gzs","category_id":"cjjy5e8p0001q8lyjxgr94pti","_id":"cjjy5e8p300238lyjb2s8b7gp"},{"post_id":"cjjy5e8ov00188lyj0dh45nnj","category_id":"cjjy5e8p2001w8lyjvvar1bwj","_id":"cjjy5e8p400268lyjulyupzk7"},{"post_id":"cjjy5e8oz001o8lyje1l0082y","category_id":"cjjy5e8p300228lyjwc1o7lkv","_id":"cjjy5e8p400298lyjb69ims3h"}],"PostTag":[{"post_id":"cjjy5e8o100008lyjll9dbc12","tag_id":"cjjy5e8o900058lyjhme21xmm","_id":"cjjy5e8oe000c8lyjo1bo9ndy"},{"post_id":"cjjy5e8o500028lyjozu8xfwb","tag_id":"cjjy5e8od000b8lyjuul0xj9x","_id":"cjjy5e8on000o8lyjkdj4vni0"},{"post_id":"cjjy5e8o500028lyjozu8xfwb","tag_id":"cjjy5e8oi000h8lyjpc1zytkr","_id":"cjjy5e8op000r8lyjvyvubd6o"},{"post_id":"cjjy5e8om000n8lyj5aqkoo85","tag_id":"cjjy5e8ol000m8lyj7zlu1bqq","_id":"cjjy5e8or000w8lyjznqv5x99"},{"post_id":"cjjy5e8oa00068lyjiapge1ep","tag_id":"cjjy5e8ol000m8lyj7zlu1bqq","_id":"cjjy5e8os000z8lyjfqgnr3c8"},{"post_id":"cjjy5e8oo000p8lyj5ddu5ufx","tag_id":"cjjy5e8ol000m8lyj7zlu1bqq","_id":"cjjy5e8ot00148lyjwggcnt2b"},{"post_id":"cjjy5e8ob00088lyjrz24e0si","tag_id":"cjjy5e8ol000m8lyj7zlu1bqq","_id":"cjjy5e8ou00178lyjo3h0fycc"},{"post_id":"cjjy5e8or000x8lyj0dag0hh8","tag_id":"cjjy5e8ol000m8lyj7zlu1bqq","_id":"cjjy5e8ow001c8lyjxleiingg"},{"post_id":"cjjy5e8ot00158lyj2wjvxazp","tag_id":"cjjy5e8ol000m8lyj7zlu1bqq","_id":"cjjy5e8ox001f8lyjyupc1q8s"},{"post_id":"cjjy5e8ow001d8lyjrj8hxrp7","tag_id":"cjjy5e8ov001b8lyjjz701obk","_id":"cjjy5e8oy001k8lyj48aap1eg"},{"post_id":"cjjy5e8oc00098lyjybx0yfq7","tag_id":"cjjy5e8os00118lyjydue8s0v","_id":"cjjy5e8oz001n8lyjcuh1wa39"},{"post_id":"cjjy5e8oc00098lyjybx0yfq7","tag_id":"cjjy5e8ov001b8lyjjz701obk","_id":"cjjy5e8p1001s8lyjopyp4esg"},{"post_id":"cjjy5e8oe000d8lyj9pmqsydg","tag_id":"cjjy5e8oy001j8lyj3z517our","_id":"cjjy5e8p1001u8lyjqm953wqo"},{"post_id":"cjjy5e8of000e8lyjr3uqkb72","tag_id":"cjjy5e8oy001j8lyj3z517our","_id":"cjjy5e8p2001z8lyjm0mz4j0c"},{"post_id":"cjjy5e8oi000i8lyjnokto1u4","tag_id":"cjjy5e8ol000m8lyj7zlu1bqq","_id":"cjjy5e8p300248lyjwdxjew2a"},{"post_id":"cjjy5e8oj000j8lyjk9wrqsa6","tag_id":"cjjy5e8ol000m8lyj7zlu1bqq","_id":"cjjy5e8p400278lyj7nrwctxo"},{"post_id":"cjjy5e8op000u8lyjqcaz2jhf","tag_id":"cjjy5e8p400258lyja8g8am38","_id":"cjjy5e8p4002a8lyjwf5ds4nu"},{"post_id":"cjjy5e8os00128lyj3f153gzs","tag_id":"cjjy5e8p400288lyj118h64lr","_id":"cjjy5e8p5002d8lyjv9rehkhg"},{"post_id":"cjjy5e8os00128lyj3f153gzs","tag_id":"cjjy5e8p5002b8lyj499qu73g","_id":"cjjy5e8p5002e8lyj1y4ja2as"},{"post_id":"cjjy5e8ov00188lyj0dh45nnj","tag_id":"cjjy5e8p5002c8lyj513nl55q","_id":"cjjy5e8p5002g8lyjz9bsfwpc"},{"post_id":"cjjy5e8oy001l8lyj4pacqqnt","tag_id":"cjjy5e8p5002f8lyjjr2q8b7k","_id":"cjjy5e8p6002i8lyj62b7sefm"},{"post_id":"cjjy5e8oz001o8lyje1l0082y","tag_id":"cjjy5e8p5002h8lyjced8za18","_id":"cjjy5e8p6002k8lyjkwlgpuvx"},{"post_id":"cjjy5e8oz001o8lyje1l0082y","tag_id":"cjjy5e8p6002j8lyjn60lyz97","_id":"cjjy5e8p6002l8lyj50osi2wn"}],"Tag":[{"name":"计划","_id":"cjjy5e8o900058lyjhme21xmm"},{"name":"JSP","_id":"cjjy5e8od000b8lyjuul0xj9x"},{"name":"JavaWeb","_id":"cjjy5e8oi000h8lyjpc1zytkr"},{"name":"javase","_id":"cjjy5e8ol000m8lyj7zlu1bqq"},{"name":"centos","_id":"cjjy5e8os00118lyjydue8s0v"},{"name":"nginx","_id":"cjjy5e8ov001b8lyjjz701obk"},{"name":"git","_id":"cjjy5e8oy001j8lyj3z517our"},{"name":"IDEA","_id":"cjjy5e8p400258lyja8g8am38"},{"name":"java爬虫","_id":"cjjy5e8p400288lyj118h64lr"},{"name":"Jsoup","_id":"cjjy5e8p5002b8lyj499qu73g"},{"name":"markdownPad","_id":"cjjy5e8p5002c8lyj513nl55q"},{"name":"vim","_id":"cjjy5e8p5002f8lyjjr2q8b7k"},{"name":"OS","_id":"cjjy5e8p5002h8lyjced8za18"},{"name":"计算机基础","_id":"cjjy5e8p6002j8lyjn60lyz97"}]}}